// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/sc2api.proto

#include "s2clientprotocol/sc2api.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_s2clientprotocol_2fcommon_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AvailableAbility;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point2D;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Size2DI;
}  // namespace protobuf_s2clientprotocol_2fcommon_2eproto
namespace protobuf_s2clientprotocol_2fdata_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AbilityData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BuffData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EffectData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fdata_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UpgradeData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fdata_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_UnitTypeData;
}  // namespace protobuf_s2clientprotocol_2fdata_2eproto
namespace protobuf_s2clientprotocol_2fdebug_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fdebug_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_DebugCommand;
}  // namespace protobuf_s2clientprotocol_2fdebug_2eproto
namespace protobuf_s2clientprotocol_2fquery_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fquery_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_RequestQuery;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fquery_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ResponseQuery;
}  // namespace protobuf_s2clientprotocol_2fquery_2eproto
namespace protobuf_s2clientprotocol_2fraw_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fraw_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ActionRaw;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fraw_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_StartRaw;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fraw_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_ObservationRaw;
}  // namespace protobuf_s2clientprotocol_2fraw_2eproto
namespace protobuf_s2clientprotocol_2fsc2api_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ActionChat;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ActionError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ActionObserverCameraFollowPlayer;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ActionObserverCameraFollowUnits;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ActionObserverPlayerPerspective;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChatReceived;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LocalMap;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerCommon;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerResult;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerSetup;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PortSet;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestAvailableMaps;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestGameInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestLeaveGame;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestObservation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestPing;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestQuickLoad;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestQuickSave;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestQuit;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestReplayInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestRestartGame;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestSaveMap;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestSaveReplay;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RequestStep;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseAction;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseAvailableMaps;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseCreateGame;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseDebug;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseJoinGame;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseLeaveGame;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseObserverAction;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponsePing;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseQuickLoad;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseQuickSave;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseQuit;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseRestartGame;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseSaveMap;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseSaveReplay;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseStartReplay;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ResponseStep;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ActionObserverCameraMove;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_InterfaceOptions;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RequestAction;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RequestDebug;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RequestObserverAction;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RequestStartReplay;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ResponseReplayInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SpatialCameraSetup;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_PlayerInfoExtra;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RequestCreateGame;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_RequestJoinGame;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_ResponseGameInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Action;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_ObserverAction;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_ResponseData;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_ResponseObservation;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fsc2api_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_Observation;
}  // namespace protobuf_s2clientprotocol_2fsc2api_2eproto
namespace protobuf_s2clientprotocol_2fscore_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fscore_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Score;
}  // namespace protobuf_s2clientprotocol_2fscore_2eproto
namespace protobuf_s2clientprotocol_2fspatial_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ObservationRender;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ObservationFeatureLayer;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fspatial_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_ActionSpatial;
}  // namespace protobuf_s2clientprotocol_2fspatial_2eproto
namespace protobuf_s2clientprotocol_2fui_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fui_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_ObservationUI;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_s2clientprotocol_2fui_2eproto ::google::protobuf::internal::SCCInfo<9> scc_info_ActionUI;
}  // namespace protobuf_s2clientprotocol_2fui_2eproto
namespace SC2APIProtocol {
class RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request>
      _instance;
  const ::SC2APIProtocol::RequestCreateGame* create_game_;
  const ::SC2APIProtocol::RequestJoinGame* join_game_;
  const ::SC2APIProtocol::RequestRestartGame* restart_game_;
  const ::SC2APIProtocol::RequestStartReplay* start_replay_;
  const ::SC2APIProtocol::RequestLeaveGame* leave_game_;
  const ::SC2APIProtocol::RequestQuickSave* quick_save_;
  const ::SC2APIProtocol::RequestQuickLoad* quick_load_;
  const ::SC2APIProtocol::RequestQuit* quit_;
  const ::SC2APIProtocol::RequestGameInfo* game_info_;
  const ::SC2APIProtocol::RequestObservation* observation_;
  const ::SC2APIProtocol::RequestAction* action_;
  const ::SC2APIProtocol::RequestObserverAction* obs_action_;
  const ::SC2APIProtocol::RequestStep* step_;
  const ::SC2APIProtocol::RequestData* data_;
  const ::SC2APIProtocol::RequestQuery* query_;
  const ::SC2APIProtocol::RequestSaveReplay* save_replay_;
  const ::SC2APIProtocol::RequestReplayInfo* replay_info_;
  const ::SC2APIProtocol::RequestAvailableMaps* available_maps_;
  const ::SC2APIProtocol::RequestSaveMap* save_map_;
  const ::SC2APIProtocol::RequestPing* ping_;
  const ::SC2APIProtocol::RequestDebug* debug_;
} _Request_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response>
      _instance;
  const ::SC2APIProtocol::ResponseCreateGame* create_game_;
  const ::SC2APIProtocol::ResponseJoinGame* join_game_;
  const ::SC2APIProtocol::ResponseRestartGame* restart_game_;
  const ::SC2APIProtocol::ResponseStartReplay* start_replay_;
  const ::SC2APIProtocol::ResponseLeaveGame* leave_game_;
  const ::SC2APIProtocol::ResponseQuickSave* quick_save_;
  const ::SC2APIProtocol::ResponseQuickLoad* quick_load_;
  const ::SC2APIProtocol::ResponseQuit* quit_;
  const ::SC2APIProtocol::ResponseGameInfo* game_info_;
  const ::SC2APIProtocol::ResponseObservation* observation_;
  const ::SC2APIProtocol::ResponseAction* action_;
  const ::SC2APIProtocol::ResponseObserverAction* obs_action_;
  const ::SC2APIProtocol::ResponseStep* step_;
  const ::SC2APIProtocol::ResponseData* data_;
  const ::SC2APIProtocol::ResponseQuery* query_;
  const ::SC2APIProtocol::ResponseSaveReplay* save_replay_;
  const ::SC2APIProtocol::ResponseReplayInfo* replay_info_;
  const ::SC2APIProtocol::ResponseAvailableMaps* available_maps_;
  const ::SC2APIProtocol::ResponseSaveMap* save_map_;
  const ::SC2APIProtocol::ResponsePing* ping_;
  const ::SC2APIProtocol::ResponseDebug* debug_;
} _Response_default_instance_;
class RequestCreateGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestCreateGame>
      _instance;
  const ::SC2APIProtocol::LocalMap* local_map_;
  ::google::protobuf::internal::ArenaStringPtr battlenet_map_name_;
} _RequestCreateGame_default_instance_;
class LocalMapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocalMap>
      _instance;
} _LocalMap_default_instance_;
class ResponseCreateGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseCreateGame>
      _instance;
} _ResponseCreateGame_default_instance_;
class RequestJoinGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestJoinGame>
      _instance;
  int race_;
  ::google::protobuf::uint32 observed_player_id_;
} _RequestJoinGame_default_instance_;
class PortSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PortSet>
      _instance;
} _PortSet_default_instance_;
class ResponseJoinGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseJoinGame>
      _instance;
} _ResponseJoinGame_default_instance_;
class RequestRestartGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestRestartGame>
      _instance;
} _RequestRestartGame_default_instance_;
class ResponseRestartGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseRestartGame>
      _instance;
} _ResponseRestartGame_default_instance_;
class RequestStartReplayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestStartReplay>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr replay_path_;
  ::google::protobuf::internal::ArenaStringPtr replay_data_;
} _RequestStartReplay_default_instance_;
class ResponseStartReplayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseStartReplay>
      _instance;
} _ResponseStartReplay_default_instance_;
class RequestLeaveGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestLeaveGame>
      _instance;
} _RequestLeaveGame_default_instance_;
class ResponseLeaveGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseLeaveGame>
      _instance;
} _ResponseLeaveGame_default_instance_;
class RequestQuickSaveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestQuickSave>
      _instance;
} _RequestQuickSave_default_instance_;
class ResponseQuickSaveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseQuickSave>
      _instance;
} _ResponseQuickSave_default_instance_;
class RequestQuickLoadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestQuickLoad>
      _instance;
} _RequestQuickLoad_default_instance_;
class ResponseQuickLoadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseQuickLoad>
      _instance;
} _ResponseQuickLoad_default_instance_;
class RequestQuitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestQuit>
      _instance;
} _RequestQuit_default_instance_;
class ResponseQuitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseQuit>
      _instance;
} _ResponseQuit_default_instance_;
class RequestGameInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestGameInfo>
      _instance;
} _RequestGameInfo_default_instance_;
class ResponseGameInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseGameInfo>
      _instance;
} _ResponseGameInfo_default_instance_;
class RequestObservationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestObservation>
      _instance;
} _RequestObservation_default_instance_;
class ResponseObservationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseObservation>
      _instance;
} _ResponseObservation_default_instance_;
class ChatReceivedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChatReceived>
      _instance;
} _ChatReceived_default_instance_;
class RequestActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestAction>
      _instance;
} _RequestAction_default_instance_;
class ResponseActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseAction>
      _instance;
} _ResponseAction_default_instance_;
class RequestObserverActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestObserverAction>
      _instance;
} _RequestObserverAction_default_instance_;
class ResponseObserverActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseObserverAction>
      _instance;
} _ResponseObserverAction_default_instance_;
class RequestStepDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestStep>
      _instance;
} _RequestStep_default_instance_;
class ResponseStepDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseStep>
      _instance;
} _ResponseStep_default_instance_;
class RequestDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestData>
      _instance;
} _RequestData_default_instance_;
class ResponseDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseData>
      _instance;
} _ResponseData_default_instance_;
class RequestSaveReplayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestSaveReplay>
      _instance;
} _RequestSaveReplay_default_instance_;
class ResponseSaveReplayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseSaveReplay>
      _instance;
} _ResponseSaveReplay_default_instance_;
class RequestReplayInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestReplayInfo>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr replay_path_;
  ::google::protobuf::internal::ArenaStringPtr replay_data_;
} _RequestReplayInfo_default_instance_;
class PlayerInfoExtraDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerInfoExtra>
      _instance;
} _PlayerInfoExtra_default_instance_;
class ResponseReplayInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseReplayInfo>
      _instance;
} _ResponseReplayInfo_default_instance_;
class RequestAvailableMapsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestAvailableMaps>
      _instance;
} _RequestAvailableMaps_default_instance_;
class ResponseAvailableMapsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseAvailableMaps>
      _instance;
} _ResponseAvailableMaps_default_instance_;
class RequestSaveMapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestSaveMap>
      _instance;
} _RequestSaveMap_default_instance_;
class ResponseSaveMapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseSaveMap>
      _instance;
} _ResponseSaveMap_default_instance_;
class RequestPingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestPing>
      _instance;
} _RequestPing_default_instance_;
class ResponsePingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponsePing>
      _instance;
} _ResponsePing_default_instance_;
class RequestDebugDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestDebug>
      _instance;
} _RequestDebug_default_instance_;
class ResponseDebugDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ResponseDebug>
      _instance;
} _ResponseDebug_default_instance_;
class PlayerSetupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerSetup>
      _instance;
} _PlayerSetup_default_instance_;
class SpatialCameraSetupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpatialCameraSetup>
      _instance;
} _SpatialCameraSetup_default_instance_;
class InterfaceOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InterfaceOptions>
      _instance;
} _InterfaceOptions_default_instance_;
class PlayerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerInfo>
      _instance;
} _PlayerInfo_default_instance_;
class PlayerCommonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerCommon>
      _instance;
} _PlayerCommon_default_instance_;
class ObservationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Observation>
      _instance;
} _Observation_default_instance_;
class ActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Action>
      _instance;
} _Action_default_instance_;
class ActionChatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionChat>
      _instance;
} _ActionChat_default_instance_;
class ActionErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionError>
      _instance;
} _ActionError_default_instance_;
class ObserverActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ObserverAction>
      _instance;
  const ::SC2APIProtocol::ActionObserverPlayerPerspective* player_perspective_;
  const ::SC2APIProtocol::ActionObserverCameraMove* camera_move_;
  const ::SC2APIProtocol::ActionObserverCameraFollowPlayer* camera_follow_player_;
  const ::SC2APIProtocol::ActionObserverCameraFollowUnits* camera_follow_units_;
} _ObserverAction_default_instance_;
class ActionObserverPlayerPerspectiveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionObserverPlayerPerspective>
      _instance;
} _ActionObserverPlayerPerspective_default_instance_;
class ActionObserverCameraMoveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionObserverCameraMove>
      _instance;
} _ActionObserverCameraMove_default_instance_;
class ActionObserverCameraFollowPlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionObserverCameraFollowPlayer>
      _instance;
} _ActionObserverCameraFollowPlayer_default_instance_;
class ActionObserverCameraFollowUnitsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionObserverCameraFollowUnits>
      _instance;
} _ActionObserverCameraFollowUnits_default_instance_;
class PlayerResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerResult>
      _instance;
} _PlayerResult_default_instance_;
}  // namespace SC2APIProtocol
namespace protobuf_s2clientprotocol_2fsc2api_2eproto {
static void InitDefaultsRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_Request_default_instance_;
    new (ptr) ::SC2APIProtocol::Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<21> scc_info_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 21, InitDefaultsRequest}, {
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestCreateGame.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestJoinGame.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestRestartGame.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestStartReplay.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestLeaveGame.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestQuickSave.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestQuickLoad.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestQuit.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestGameInfo.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestObservation.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestAction.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestObserverAction.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestStep.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestData.base,
      &protobuf_s2clientprotocol_2fquery_2eproto::scc_info_RequestQuery.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestSaveReplay.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestReplayInfo.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestAvailableMaps.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestSaveMap.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestPing.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestDebug.base,}};

static void InitDefaultsResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_Response_default_instance_;
    new (ptr) ::SC2APIProtocol::Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<21> scc_info_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 21, InitDefaultsResponse}, {
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseCreateGame.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseJoinGame.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseRestartGame.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseStartReplay.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseLeaveGame.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseQuickSave.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseQuickLoad.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseQuit.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseGameInfo.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseObservation.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseAction.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseObserverAction.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseStep.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseData.base,
      &protobuf_s2clientprotocol_2fquery_2eproto::scc_info_ResponseQuery.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseSaveReplay.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseReplayInfo.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseAvailableMaps.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseSaveMap.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponsePing.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseDebug.base,}};

static void InitDefaultsRequestCreateGame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_RequestCreateGame_default_instance_;
    new (ptr) ::SC2APIProtocol::RequestCreateGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::RequestCreateGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RequestCreateGame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRequestCreateGame}, {
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_LocalMap.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_PlayerSetup.base,}};

static void InitDefaultsLocalMap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_LocalMap_default_instance_;
    new (ptr) ::SC2APIProtocol::LocalMap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::LocalMap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LocalMap =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLocalMap}, {}};

static void InitDefaultsResponseCreateGame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ResponseCreateGame_default_instance_;
    new (ptr) ::SC2APIProtocol::ResponseCreateGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ResponseCreateGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseCreateGame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseCreateGame}, {}};

static void InitDefaultsRequestJoinGame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_RequestJoinGame_default_instance_;
    new (ptr) ::SC2APIProtocol::RequestJoinGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::RequestJoinGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RequestJoinGame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRequestJoinGame}, {
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_InterfaceOptions.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_PortSet.base,}};

static void InitDefaultsPortSet() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_PortSet_default_instance_;
    new (ptr) ::SC2APIProtocol::PortSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::PortSet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PortSet =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPortSet}, {}};

static void InitDefaultsResponseJoinGame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ResponseJoinGame_default_instance_;
    new (ptr) ::SC2APIProtocol::ResponseJoinGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ResponseJoinGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseJoinGame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseJoinGame}, {}};

static void InitDefaultsRequestRestartGame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_RequestRestartGame_default_instance_;
    new (ptr) ::SC2APIProtocol::RequestRestartGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::RequestRestartGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestRestartGame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestRestartGame}, {}};

static void InitDefaultsResponseRestartGame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ResponseRestartGame_default_instance_;
    new (ptr) ::SC2APIProtocol::ResponseRestartGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ResponseRestartGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseRestartGame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseRestartGame}, {}};

static void InitDefaultsRequestStartReplay() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_RequestStartReplay_default_instance_;
    new (ptr) ::SC2APIProtocol::RequestStartReplay();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::RequestStartReplay::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RequestStartReplay =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRequestStartReplay}, {
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_InterfaceOptions.base,}};

static void InitDefaultsResponseStartReplay() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ResponseStartReplay_default_instance_;
    new (ptr) ::SC2APIProtocol::ResponseStartReplay();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ResponseStartReplay::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseStartReplay =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseStartReplay}, {}};

static void InitDefaultsRequestLeaveGame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_RequestLeaveGame_default_instance_;
    new (ptr) ::SC2APIProtocol::RequestLeaveGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::RequestLeaveGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestLeaveGame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestLeaveGame}, {}};

static void InitDefaultsResponseLeaveGame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ResponseLeaveGame_default_instance_;
    new (ptr) ::SC2APIProtocol::ResponseLeaveGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ResponseLeaveGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseLeaveGame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseLeaveGame}, {}};

static void InitDefaultsRequestQuickSave() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_RequestQuickSave_default_instance_;
    new (ptr) ::SC2APIProtocol::RequestQuickSave();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::RequestQuickSave::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestQuickSave =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestQuickSave}, {}};

static void InitDefaultsResponseQuickSave() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ResponseQuickSave_default_instance_;
    new (ptr) ::SC2APIProtocol::ResponseQuickSave();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ResponseQuickSave::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseQuickSave =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseQuickSave}, {}};

static void InitDefaultsRequestQuickLoad() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_RequestQuickLoad_default_instance_;
    new (ptr) ::SC2APIProtocol::RequestQuickLoad();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::RequestQuickLoad::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestQuickLoad =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestQuickLoad}, {}};

static void InitDefaultsResponseQuickLoad() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ResponseQuickLoad_default_instance_;
    new (ptr) ::SC2APIProtocol::ResponseQuickLoad();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ResponseQuickLoad::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseQuickLoad =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseQuickLoad}, {}};

static void InitDefaultsRequestQuit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_RequestQuit_default_instance_;
    new (ptr) ::SC2APIProtocol::RequestQuit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::RequestQuit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestQuit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestQuit}, {}};

static void InitDefaultsResponseQuit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ResponseQuit_default_instance_;
    new (ptr) ::SC2APIProtocol::ResponseQuit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ResponseQuit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseQuit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseQuit}, {}};

static void InitDefaultsRequestGameInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_RequestGameInfo_default_instance_;
    new (ptr) ::SC2APIProtocol::RequestGameInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::RequestGameInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestGameInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestGameInfo}, {}};

static void InitDefaultsResponseGameInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ResponseGameInfo_default_instance_;
    new (ptr) ::SC2APIProtocol::ResponseGameInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ResponseGameInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ResponseGameInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsResponseGameInfo}, {
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_PlayerInfo.base,
      &protobuf_s2clientprotocol_2fraw_2eproto::scc_info_StartRaw.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_InterfaceOptions.base,}};

static void InitDefaultsRequestObservation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_RequestObservation_default_instance_;
    new (ptr) ::SC2APIProtocol::RequestObservation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::RequestObservation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestObservation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestObservation}, {}};

static void InitDefaultsResponseObservation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ResponseObservation_default_instance_;
    new (ptr) ::SC2APIProtocol::ResponseObservation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ResponseObservation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_ResponseObservation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsResponseObservation}, {
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_Action.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ActionError.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_Observation.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_PlayerResult.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ChatReceived.base,}};

static void InitDefaultsChatReceived() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ChatReceived_default_instance_;
    new (ptr) ::SC2APIProtocol::ChatReceived();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ChatReceived::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChatReceived =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChatReceived}, {}};

static void InitDefaultsRequestAction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_RequestAction_default_instance_;
    new (ptr) ::SC2APIProtocol::RequestAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::RequestAction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RequestAction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRequestAction}, {
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_Action.base,}};

static void InitDefaultsResponseAction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ResponseAction_default_instance_;
    new (ptr) ::SC2APIProtocol::ResponseAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ResponseAction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseAction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseAction}, {}};

static void InitDefaultsRequestObserverAction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_RequestObserverAction_default_instance_;
    new (ptr) ::SC2APIProtocol::RequestObserverAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::RequestObserverAction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RequestObserverAction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRequestObserverAction}, {
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ObserverAction.base,}};

static void InitDefaultsResponseObserverAction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ResponseObserverAction_default_instance_;
    new (ptr) ::SC2APIProtocol::ResponseObserverAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ResponseObserverAction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseObserverAction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseObserverAction}, {}};

static void InitDefaultsRequestStep() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_RequestStep_default_instance_;
    new (ptr) ::SC2APIProtocol::RequestStep();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::RequestStep::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestStep =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestStep}, {}};

static void InitDefaultsResponseStep() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ResponseStep_default_instance_;
    new (ptr) ::SC2APIProtocol::ResponseStep();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ResponseStep::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseStep =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseStep}, {}};

static void InitDefaultsRequestData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_RequestData_default_instance_;
    new (ptr) ::SC2APIProtocol::RequestData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::RequestData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestData}, {}};

static void InitDefaultsResponseData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ResponseData_default_instance_;
    new (ptr) ::SC2APIProtocol::ResponseData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ResponseData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_ResponseData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsResponseData}, {
      &protobuf_s2clientprotocol_2fdata_2eproto::scc_info_AbilityData.base,
      &protobuf_s2clientprotocol_2fdata_2eproto::scc_info_UnitTypeData.base,
      &protobuf_s2clientprotocol_2fdata_2eproto::scc_info_UpgradeData.base,
      &protobuf_s2clientprotocol_2fdata_2eproto::scc_info_BuffData.base,
      &protobuf_s2clientprotocol_2fdata_2eproto::scc_info_EffectData.base,}};

static void InitDefaultsRequestSaveReplay() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_RequestSaveReplay_default_instance_;
    new (ptr) ::SC2APIProtocol::RequestSaveReplay();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::RequestSaveReplay::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestSaveReplay =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestSaveReplay}, {}};

static void InitDefaultsResponseSaveReplay() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ResponseSaveReplay_default_instance_;
    new (ptr) ::SC2APIProtocol::ResponseSaveReplay();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ResponseSaveReplay::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseSaveReplay =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseSaveReplay}, {}};

static void InitDefaultsRequestReplayInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_RequestReplayInfo_default_instance_;
    new (ptr) ::SC2APIProtocol::RequestReplayInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::RequestReplayInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestReplayInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestReplayInfo}, {}};

static void InitDefaultsPlayerInfoExtra() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_PlayerInfoExtra_default_instance_;
    new (ptr) ::SC2APIProtocol::PlayerInfoExtra();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::PlayerInfoExtra::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PlayerInfoExtra =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPlayerInfoExtra}, {
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_PlayerInfo.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_PlayerResult.base,}};

static void InitDefaultsResponseReplayInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ResponseReplayInfo_default_instance_;
    new (ptr) ::SC2APIProtocol::ResponseReplayInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ResponseReplayInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ResponseReplayInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsResponseReplayInfo}, {
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_PlayerInfoExtra.base,}};

static void InitDefaultsRequestAvailableMaps() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_RequestAvailableMaps_default_instance_;
    new (ptr) ::SC2APIProtocol::RequestAvailableMaps();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::RequestAvailableMaps::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestAvailableMaps =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestAvailableMaps}, {}};

static void InitDefaultsResponseAvailableMaps() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ResponseAvailableMaps_default_instance_;
    new (ptr) ::SC2APIProtocol::ResponseAvailableMaps();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ResponseAvailableMaps::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseAvailableMaps =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseAvailableMaps}, {}};

static void InitDefaultsRequestSaveMap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_RequestSaveMap_default_instance_;
    new (ptr) ::SC2APIProtocol::RequestSaveMap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::RequestSaveMap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestSaveMap =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestSaveMap}, {}};

static void InitDefaultsResponseSaveMap() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ResponseSaveMap_default_instance_;
    new (ptr) ::SC2APIProtocol::ResponseSaveMap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ResponseSaveMap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseSaveMap =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseSaveMap}, {}};

static void InitDefaultsRequestPing() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_RequestPing_default_instance_;
    new (ptr) ::SC2APIProtocol::RequestPing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::RequestPing::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestPing =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestPing}, {}};

static void InitDefaultsResponsePing() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ResponsePing_default_instance_;
    new (ptr) ::SC2APIProtocol::ResponsePing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ResponsePing::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponsePing =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponsePing}, {}};

static void InitDefaultsRequestDebug() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_RequestDebug_default_instance_;
    new (ptr) ::SC2APIProtocol::RequestDebug();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::RequestDebug::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RequestDebug =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRequestDebug}, {
      &protobuf_s2clientprotocol_2fdebug_2eproto::scc_info_DebugCommand.base,}};

static void InitDefaultsResponseDebug() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ResponseDebug_default_instance_;
    new (ptr) ::SC2APIProtocol::ResponseDebug();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ResponseDebug::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ResponseDebug =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponseDebug}, {}};

static void InitDefaultsPlayerSetup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_PlayerSetup_default_instance_;
    new (ptr) ::SC2APIProtocol::PlayerSetup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::PlayerSetup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerSetup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerSetup}, {}};

static void InitDefaultsSpatialCameraSetup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_SpatialCameraSetup_default_instance_;
    new (ptr) ::SC2APIProtocol::SpatialCameraSetup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::SpatialCameraSetup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SpatialCameraSetup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpatialCameraSetup}, {
      &protobuf_s2clientprotocol_2fcommon_2eproto::scc_info_Size2DI.base,}};

static void InitDefaultsInterfaceOptions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_InterfaceOptions_default_instance_;
    new (ptr) ::SC2APIProtocol::InterfaceOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::InterfaceOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_InterfaceOptions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInterfaceOptions}, {
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_SpatialCameraSetup.base,}};

static void InitDefaultsPlayerInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_PlayerInfo_default_instance_;
    new (ptr) ::SC2APIProtocol::PlayerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::PlayerInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerInfo}, {}};

static void InitDefaultsPlayerCommon() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_PlayerCommon_default_instance_;
    new (ptr) ::SC2APIProtocol::PlayerCommon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::PlayerCommon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerCommon =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerCommon}, {}};

static void InitDefaultsObservation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_Observation_default_instance_;
    new (ptr) ::SC2APIProtocol::Observation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::Observation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_Observation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsObservation}, {
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_PlayerCommon.base,
      &protobuf_s2clientprotocol_2fcommon_2eproto::scc_info_AvailableAbility.base,
      &protobuf_s2clientprotocol_2fscore_2eproto::scc_info_Score.base,
      &protobuf_s2clientprotocol_2fraw_2eproto::scc_info_ObservationRaw.base,
      &protobuf_s2clientprotocol_2fspatial_2eproto::scc_info_ObservationFeatureLayer.base,
      &protobuf_s2clientprotocol_2fspatial_2eproto::scc_info_ObservationRender.base,
      &protobuf_s2clientprotocol_2fui_2eproto::scc_info_ObservationUI.base,}};

static void InitDefaultsAction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_Action_default_instance_;
    new (ptr) ::SC2APIProtocol::Action();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::Action::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Action =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsAction}, {
      &protobuf_s2clientprotocol_2fraw_2eproto::scc_info_ActionRaw.base,
      &protobuf_s2clientprotocol_2fspatial_2eproto::scc_info_ActionSpatial.base,
      &protobuf_s2clientprotocol_2fui_2eproto::scc_info_ActionUI.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ActionChat.base,}};

static void InitDefaultsActionChat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ActionChat_default_instance_;
    new (ptr) ::SC2APIProtocol::ActionChat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ActionChat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActionChat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActionChat}, {}};

static void InitDefaultsActionError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ActionError_default_instance_;
    new (ptr) ::SC2APIProtocol::ActionError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ActionError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActionError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActionError}, {}};

static void InitDefaultsObserverAction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ObserverAction_default_instance_;
    new (ptr) ::SC2APIProtocol::ObserverAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ObserverAction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_ObserverAction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsObserverAction}, {
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ActionObserverPlayerPerspective.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ActionObserverCameraMove.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ActionObserverCameraFollowPlayer.base,
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ActionObserverCameraFollowUnits.base,}};

static void InitDefaultsActionObserverPlayerPerspective() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ActionObserverPlayerPerspective_default_instance_;
    new (ptr) ::SC2APIProtocol::ActionObserverPlayerPerspective();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ActionObserverPlayerPerspective::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActionObserverPlayerPerspective =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActionObserverPlayerPerspective}, {}};

static void InitDefaultsActionObserverCameraMove() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ActionObserverCameraMove_default_instance_;
    new (ptr) ::SC2APIProtocol::ActionObserverCameraMove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ActionObserverCameraMove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ActionObserverCameraMove =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsActionObserverCameraMove}, {
      &protobuf_s2clientprotocol_2fcommon_2eproto::scc_info_Point2D.base,}};

static void InitDefaultsActionObserverCameraFollowPlayer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ActionObserverCameraFollowPlayer_default_instance_;
    new (ptr) ::SC2APIProtocol::ActionObserverCameraFollowPlayer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ActionObserverCameraFollowPlayer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActionObserverCameraFollowPlayer =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActionObserverCameraFollowPlayer}, {}};

static void InitDefaultsActionObserverCameraFollowUnits() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_ActionObserverCameraFollowUnits_default_instance_;
    new (ptr) ::SC2APIProtocol::ActionObserverCameraFollowUnits();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::ActionObserverCameraFollowUnits::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ActionObserverCameraFollowUnits =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsActionObserverCameraFollowUnits}, {}};

static void InitDefaultsPlayerResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SC2APIProtocol::_PlayerResult_default_instance_;
    new (ptr) ::SC2APIProtocol::PlayerResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SC2APIProtocol::PlayerResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerResult}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestCreateGame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocalMap.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseCreateGame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestJoinGame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PortSet.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseJoinGame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestRestartGame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseRestartGame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestStartReplay.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseStartReplay.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestLeaveGame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseLeaveGame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestQuickSave.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseQuickSave.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestQuickLoad.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseQuickLoad.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestQuit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseQuit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestGameInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseGameInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestObservation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseObservation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChatReceived.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestAction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseAction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestObserverAction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseObserverAction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestStep.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseStep.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestSaveReplay.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseSaveReplay.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestReplayInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerInfoExtra.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseReplayInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestAvailableMaps.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseAvailableMaps.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestSaveMap.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseSaveMap.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestPing.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponsePing.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestDebug.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ResponseDebug.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerSetup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpatialCameraSetup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InterfaceOptions.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerCommon.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Observation.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Action.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionChat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ObserverAction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionObserverPlayerPerspective.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionObserverCameraMove.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionObserverCameraFollowPlayer.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionObserverCameraFollowUnits.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerResult.base);
}

::google::protobuf::Metadata file_level_metadata[61];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[12];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::SC2APIProtocol::RequestDefaultTypeInternal, create_game_),
  offsetof(::SC2APIProtocol::RequestDefaultTypeInternal, join_game_),
  offsetof(::SC2APIProtocol::RequestDefaultTypeInternal, restart_game_),
  offsetof(::SC2APIProtocol::RequestDefaultTypeInternal, start_replay_),
  offsetof(::SC2APIProtocol::RequestDefaultTypeInternal, leave_game_),
  offsetof(::SC2APIProtocol::RequestDefaultTypeInternal, quick_save_),
  offsetof(::SC2APIProtocol::RequestDefaultTypeInternal, quick_load_),
  offsetof(::SC2APIProtocol::RequestDefaultTypeInternal, quit_),
  offsetof(::SC2APIProtocol::RequestDefaultTypeInternal, game_info_),
  offsetof(::SC2APIProtocol::RequestDefaultTypeInternal, observation_),
  offsetof(::SC2APIProtocol::RequestDefaultTypeInternal, action_),
  offsetof(::SC2APIProtocol::RequestDefaultTypeInternal, obs_action_),
  offsetof(::SC2APIProtocol::RequestDefaultTypeInternal, step_),
  offsetof(::SC2APIProtocol::RequestDefaultTypeInternal, data_),
  offsetof(::SC2APIProtocol::RequestDefaultTypeInternal, query_),
  offsetof(::SC2APIProtocol::RequestDefaultTypeInternal, save_replay_),
  offsetof(::SC2APIProtocol::RequestDefaultTypeInternal, replay_info_),
  offsetof(::SC2APIProtocol::RequestDefaultTypeInternal, available_maps_),
  offsetof(::SC2APIProtocol::RequestDefaultTypeInternal, save_map_),
  offsetof(::SC2APIProtocol::RequestDefaultTypeInternal, ping_),
  offsetof(::SC2APIProtocol::RequestDefaultTypeInternal, debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Request, request_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::SC2APIProtocol::ResponseDefaultTypeInternal, create_game_),
  offsetof(::SC2APIProtocol::ResponseDefaultTypeInternal, join_game_),
  offsetof(::SC2APIProtocol::ResponseDefaultTypeInternal, restart_game_),
  offsetof(::SC2APIProtocol::ResponseDefaultTypeInternal, start_replay_),
  offsetof(::SC2APIProtocol::ResponseDefaultTypeInternal, leave_game_),
  offsetof(::SC2APIProtocol::ResponseDefaultTypeInternal, quick_save_),
  offsetof(::SC2APIProtocol::ResponseDefaultTypeInternal, quick_load_),
  offsetof(::SC2APIProtocol::ResponseDefaultTypeInternal, quit_),
  offsetof(::SC2APIProtocol::ResponseDefaultTypeInternal, game_info_),
  offsetof(::SC2APIProtocol::ResponseDefaultTypeInternal, observation_),
  offsetof(::SC2APIProtocol::ResponseDefaultTypeInternal, action_),
  offsetof(::SC2APIProtocol::ResponseDefaultTypeInternal, obs_action_),
  offsetof(::SC2APIProtocol::ResponseDefaultTypeInternal, step_),
  offsetof(::SC2APIProtocol::ResponseDefaultTypeInternal, data_),
  offsetof(::SC2APIProtocol::ResponseDefaultTypeInternal, query_),
  offsetof(::SC2APIProtocol::ResponseDefaultTypeInternal, save_replay_),
  offsetof(::SC2APIProtocol::ResponseDefaultTypeInternal, replay_info_),
  offsetof(::SC2APIProtocol::ResponseDefaultTypeInternal, available_maps_),
  offsetof(::SC2APIProtocol::ResponseDefaultTypeInternal, save_map_),
  offsetof(::SC2APIProtocol::ResponseDefaultTypeInternal, ping_),
  offsetof(::SC2APIProtocol::ResponseDefaultTypeInternal, debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Response, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Response, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Response, response_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestCreateGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestCreateGame, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestCreateGame, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::SC2APIProtocol::RequestCreateGameDefaultTypeInternal, local_map_),
  offsetof(::SC2APIProtocol::RequestCreateGameDefaultTypeInternal, battlenet_map_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestCreateGame, player_setup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestCreateGame, disable_fog_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestCreateGame, random_seed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestCreateGame, realtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestCreateGame, Map_),
  ~0u,
  ~0u,
  ~0u,
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::LocalMap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::LocalMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::LocalMap, map_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::LocalMap, map_data_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseCreateGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseCreateGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseCreateGame, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseCreateGame, error_details_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestJoinGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestJoinGame, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestJoinGame, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::SC2APIProtocol::RequestJoinGameDefaultTypeInternal, race_),
  offsetof(::SC2APIProtocol::RequestJoinGameDefaultTypeInternal, observed_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestJoinGame, options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestJoinGame, server_ports_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestJoinGame, client_ports_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestJoinGame, shared_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestJoinGame, participation_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PortSet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PortSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PortSet, game_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PortSet, base_port_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseJoinGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseJoinGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseJoinGame, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseJoinGame, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseJoinGame, error_details_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestRestartGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestRestartGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseRestartGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseRestartGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseRestartGame, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseRestartGame, error_details_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestStartReplay, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestStartReplay, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestStartReplay, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::SC2APIProtocol::RequestStartReplayDefaultTypeInternal, replay_path_),
  offsetof(::SC2APIProtocol::RequestStartReplayDefaultTypeInternal, replay_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestStartReplay, map_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestStartReplay, observed_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestStartReplay, options_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestStartReplay, disable_fog_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestStartReplay, realtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestStartReplay, replay_),
  ~0u,
  ~0u,
  0,
  2,
  1,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseStartReplay, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseStartReplay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseStartReplay, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseStartReplay, error_details_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestLeaveGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestLeaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseLeaveGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseLeaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestQuickSave, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestQuickSave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseQuickSave, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseQuickSave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestQuickLoad, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestQuickLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseQuickLoad, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseQuickLoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestQuit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestQuit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseQuit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseQuit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestGameInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseGameInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseGameInfo, map_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseGameInfo, mod_names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseGameInfo, local_map_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseGameInfo, player_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseGameInfo, start_raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseGameInfo, options_),
  0,
  ~0u,
  1,
  ~0u,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestObservation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestObservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestObservation, disable_fog_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseObservation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseObservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseObservation, actions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseObservation, action_errors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseObservation, observation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseObservation, player_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseObservation, chat_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ChatReceived, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ChatReceived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ChatReceived, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ChatReceived, message_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestAction, actions_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseAction, result_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestObserverAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestObserverAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestObserverAction, actions_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseObserverAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseObserverAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestStep, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestStep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestStep, count_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseStep, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseStep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestData, ability_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestData, unit_type_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestData, upgrade_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestData, buff_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestData, effect_id_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseData, abilities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseData, units_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseData, upgrades_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseData, buffs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseData, effects_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestSaveReplay, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestSaveReplay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseSaveReplay, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseSaveReplay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseSaveReplay, data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestReplayInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestReplayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestReplayInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::SC2APIProtocol::RequestReplayInfoDefaultTypeInternal, replay_path_),
  offsetof(::SC2APIProtocol::RequestReplayInfoDefaultTypeInternal, replay_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestReplayInfo, download_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestReplayInfo, replay_),
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerInfoExtra, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerInfoExtra, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerInfoExtra, player_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerInfoExtra, player_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerInfoExtra, player_mmr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerInfoExtra, player_apm_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, map_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, local_map_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, player_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, game_duration_loops_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, game_duration_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, game_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, data_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, data_build_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, base_build_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, error_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseReplayInfo, error_details_),
  0,
  1,
  ~0u,
  5,
  6,
  2,
  4,
  7,
  8,
  9,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestAvailableMaps, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestAvailableMaps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseAvailableMaps, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseAvailableMaps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseAvailableMaps, local_map_paths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseAvailableMaps, battlenet_map_names_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestSaveMap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestSaveMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestSaveMap, map_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestSaveMap, map_data_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseSaveMap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseSaveMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseSaveMap, error_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestPing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponsePing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponsePing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponsePing, game_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponsePing, data_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponsePing, data_build_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponsePing, base_build_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::RequestDebug, debug_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseDebug, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ResponseDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerSetup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerSetup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerSetup, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerSetup, race_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerSetup, difficulty_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::SpatialCameraSetup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::SpatialCameraSetup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::SpatialCameraSetup, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::SpatialCameraSetup, resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::SpatialCameraSetup, minimap_resolution_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::InterfaceOptions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::InterfaceOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::InterfaceOptions, raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::InterfaceOptions, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::InterfaceOptions, feature_layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::InterfaceOptions, render_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerInfo, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerInfo, race_requested_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerInfo, race_actual_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerInfo, difficulty_),
  0,
  3,
  1,
  2,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, minerals_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, vespene_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, food_cap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, food_used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, food_army_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, food_workers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, idle_worker_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, army_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, warp_gate_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerCommon, larva_count_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Observation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Observation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Observation, game_loop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Observation, player_common_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Observation, alerts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Observation, abilities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Observation, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Observation, raw_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Observation, feature_layer_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Observation, render_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Observation, ui_data_),
  6,
  0,
  ~0u,
  ~0u,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Action, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Action, action_raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Action, action_feature_layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Action, action_render_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Action, action_ui_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::Action, action_chat_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ActionChat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ActionChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ActionChat, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ActionChat, message_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ActionError, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ActionError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ActionError, unit_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ActionError, ability_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ActionError, result_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ObserverAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ObserverAction, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ObserverAction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::SC2APIProtocol::ObserverActionDefaultTypeInternal, player_perspective_),
  offsetof(::SC2APIProtocol::ObserverActionDefaultTypeInternal, camera_move_),
  offsetof(::SC2APIProtocol::ObserverActionDefaultTypeInternal, camera_follow_player_),
  offsetof(::SC2APIProtocol::ObserverActionDefaultTypeInternal, camera_follow_units_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ObserverAction, action_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ActionObserverPlayerPerspective, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ActionObserverPlayerPerspective, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ActionObserverPlayerPerspective, player_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ActionObserverCameraMove, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ActionObserverCameraMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ActionObserverCameraMove, world_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ActionObserverCameraMove, distance_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ActionObserverCameraFollowPlayer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ActionObserverCameraFollowPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ActionObserverCameraFollowPlayer, player_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ActionObserverCameraFollowUnits, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ActionObserverCameraFollowUnits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::ActionObserverCameraFollowUnits, unit_tags_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerResult, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SC2APIProtocol::PlayerResult, result_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 27, sizeof(::SC2APIProtocol::Request)},
  { 48, 77, sizeof(::SC2APIProtocol::Response)},
  { 100, 112, sizeof(::SC2APIProtocol::RequestCreateGame)},
  { 118, 125, sizeof(::SC2APIProtocol::LocalMap)},
  { 127, 134, sizeof(::SC2APIProtocol::ResponseCreateGame)},
  { 136, 148, sizeof(::SC2APIProtocol::RequestJoinGame)},
  { 154, 161, sizeof(::SC2APIProtocol::PortSet)},
  { 163, 171, sizeof(::SC2APIProtocol::ResponseJoinGame)},
  { 174, 179, sizeof(::SC2APIProtocol::RequestRestartGame)},
  { 179, 186, sizeof(::SC2APIProtocol::ResponseRestartGame)},
  { 188, 201, sizeof(::SC2APIProtocol::RequestStartReplay)},
  { 208, 215, sizeof(::SC2APIProtocol::ResponseStartReplay)},
  { 217, 222, sizeof(::SC2APIProtocol::RequestLeaveGame)},
  { 222, 227, sizeof(::SC2APIProtocol::ResponseLeaveGame)},
  { 227, 232, sizeof(::SC2APIProtocol::RequestQuickSave)},
  { 232, 237, sizeof(::SC2APIProtocol::ResponseQuickSave)},
  { 237, 242, sizeof(::SC2APIProtocol::RequestQuickLoad)},
  { 242, 247, sizeof(::SC2APIProtocol::ResponseQuickLoad)},
  { 247, 252, sizeof(::SC2APIProtocol::RequestQuit)},
  { 252, 257, sizeof(::SC2APIProtocol::ResponseQuit)},
  { 257, 262, sizeof(::SC2APIProtocol::RequestGameInfo)},
  { 262, 273, sizeof(::SC2APIProtocol::ResponseGameInfo)},
  { 279, 285, sizeof(::SC2APIProtocol::RequestObservation)},
  { 286, 296, sizeof(::SC2APIProtocol::ResponseObservation)},
  { 301, 308, sizeof(::SC2APIProtocol::ChatReceived)},
  { 310, 316, sizeof(::SC2APIProtocol::RequestAction)},
  { 317, 323, sizeof(::SC2APIProtocol::ResponseAction)},
  { 324, 330, sizeof(::SC2APIProtocol::RequestObserverAction)},
  { 331, 336, sizeof(::SC2APIProtocol::ResponseObserverAction)},
  { 336, 342, sizeof(::SC2APIProtocol::RequestStep)},
  { 343, 348, sizeof(::SC2APIProtocol::ResponseStep)},
  { 348, 358, sizeof(::SC2APIProtocol::RequestData)},
  { 363, 373, sizeof(::SC2APIProtocol::ResponseData)},
  { 378, 383, sizeof(::SC2APIProtocol::RequestSaveReplay)},
  { 383, 389, sizeof(::SC2APIProtocol::ResponseSaveReplay)},
  { 390, 399, sizeof(::SC2APIProtocol::RequestReplayInfo)},
  { 402, 411, sizeof(::SC2APIProtocol::PlayerInfoExtra)},
  { 415, 431, sizeof(::SC2APIProtocol::ResponseReplayInfo)},
  { 442, 447, sizeof(::SC2APIProtocol::RequestAvailableMaps)},
  { 447, 454, sizeof(::SC2APIProtocol::ResponseAvailableMaps)},
  { 456, 463, sizeof(::SC2APIProtocol::RequestSaveMap)},
  { 465, 471, sizeof(::SC2APIProtocol::ResponseSaveMap)},
  { 472, 477, sizeof(::SC2APIProtocol::RequestPing)},
  { 477, 486, sizeof(::SC2APIProtocol::ResponsePing)},
  { 490, 496, sizeof(::SC2APIProtocol::RequestDebug)},
  { 497, 502, sizeof(::SC2APIProtocol::ResponseDebug)},
  { 502, 510, sizeof(::SC2APIProtocol::PlayerSetup)},
  { 513, 521, sizeof(::SC2APIProtocol::SpatialCameraSetup)},
  { 524, 533, sizeof(::SC2APIProtocol::InterfaceOptions)},
  { 537, 547, sizeof(::SC2APIProtocol::PlayerInfo)},
  { 552, 568, sizeof(::SC2APIProtocol::PlayerCommon)},
  { 579, 593, sizeof(::SC2APIProtocol::Observation)},
  { 602, 612, sizeof(::SC2APIProtocol::Action)},
  { 617, 624, sizeof(::SC2APIProtocol::ActionChat)},
  { 626, 634, sizeof(::SC2APIProtocol::ActionError)},
  { 637, 647, sizeof(::SC2APIProtocol::ObserverAction)},
  { 651, 657, sizeof(::SC2APIProtocol::ActionObserverPlayerPerspective)},
  { 658, 665, sizeof(::SC2APIProtocol::ActionObserverCameraMove)},
  { 667, 673, sizeof(::SC2APIProtocol::ActionObserverCameraFollowPlayer)},
  { 674, 680, sizeof(::SC2APIProtocol::ActionObserverCameraFollowUnits)},
  { 681, 688, sizeof(::SC2APIProtocol::PlayerResult)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_RequestCreateGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_LocalMap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ResponseCreateGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_RequestJoinGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_PortSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ResponseJoinGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_RequestRestartGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ResponseRestartGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_RequestStartReplay_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ResponseStartReplay_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_RequestLeaveGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ResponseLeaveGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_RequestQuickSave_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ResponseQuickSave_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_RequestQuickLoad_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ResponseQuickLoad_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_RequestQuit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ResponseQuit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_RequestGameInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ResponseGameInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_RequestObservation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ResponseObservation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ChatReceived_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_RequestAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ResponseAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_RequestObserverAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ResponseObserverAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_RequestStep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ResponseStep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_RequestData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ResponseData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_RequestSaveReplay_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ResponseSaveReplay_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_RequestReplayInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_PlayerInfoExtra_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ResponseReplayInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_RequestAvailableMaps_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ResponseAvailableMaps_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_RequestSaveMap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ResponseSaveMap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_RequestPing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ResponsePing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_RequestDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ResponseDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_PlayerSetup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_SpatialCameraSetup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_InterfaceOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_PlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_PlayerCommon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_Observation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_Action_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ActionChat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ActionError_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ObserverAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ActionObserverPlayerPerspective_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ActionObserverCameraMove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ActionObserverCameraFollowPlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_ActionObserverCameraFollowUnits_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SC2APIProtocol::_PlayerResult_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "s2clientprotocol/sc2api.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 61);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035s2clientprotocol/sc2api.proto\022\016SC2APIP"
      "rotocol\032\035s2clientprotocol/common.proto\032\033"
      "s2clientprotocol/data.proto\032\034s2clientpro"
      "tocol/debug.proto\032\034s2clientprotocol/erro"
      "r.proto\032\034s2clientprotocol/query.proto\032\032s"
      "2clientprotocol/raw.proto\032\034s2clientproto"
      "col/score.proto\032\036s2clientprotocol/spatia"
      "l.proto\032\031s2clientprotocol/ui.proto\"\375\010\n\007R"
      "equest\0228\n\013create_game\030\001 \001(\0132!.SC2APIProt"
      "ocol.RequestCreateGameH\000\0224\n\tjoin_game\030\002 "
      "\001(\0132\037.SC2APIProtocol.RequestJoinGameH\000\022:"
      "\n\014restart_game\030\003 \001(\0132\".SC2APIProtocol.Re"
      "questRestartGameH\000\022:\n\014start_replay\030\004 \001(\013"
      "2\".SC2APIProtocol.RequestStartReplayH\000\0226"
      "\n\nleave_game\030\005 \001(\0132 .SC2APIProtocol.Requ"
      "estLeaveGameH\000\0226\n\nquick_save\030\006 \001(\0132 .SC2"
      "APIProtocol.RequestQuickSaveH\000\0226\n\nquick_"
      "load\030\007 \001(\0132 .SC2APIProtocol.RequestQuick"
      "LoadH\000\022+\n\004quit\030\010 \001(\0132\033.SC2APIProtocol.Re"
      "questQuitH\000\0224\n\tgame_info\030\t \001(\0132\037.SC2APIP"
      "rotocol.RequestGameInfoH\000\0229\n\013observation"
      "\030\n \001(\0132\".SC2APIProtocol.RequestObservati"
      "onH\000\022/\n\006action\030\013 \001(\0132\035.SC2APIProtocol.Re"
      "questActionH\000\022;\n\nobs_action\030\025 \001(\0132%.SC2A"
      "PIProtocol.RequestObserverActionH\000\022+\n\004st"
      "ep\030\014 \001(\0132\033.SC2APIProtocol.RequestStepH\000\022"
      "+\n\004data\030\r \001(\0132\033.SC2APIProtocol.RequestDa"
      "taH\000\022-\n\005query\030\016 \001(\0132\034.SC2APIProtocol.Req"
      "uestQueryH\000\0228\n\013save_replay\030\017 \001(\0132!.SC2AP"
      "IProtocol.RequestSaveReplayH\000\0228\n\013replay_"
      "info\030\020 \001(\0132!.SC2APIProtocol.RequestRepla"
      "yInfoH\000\022>\n\016available_maps\030\021 \001(\0132$.SC2API"
      "Protocol.RequestAvailableMapsH\000\0222\n\010save_"
      "map\030\022 \001(\0132\036.SC2APIProtocol.RequestSaveMa"
      "pH\000\022+\n\004ping\030\023 \001(\0132\033.SC2APIProtocol.Reque"
      "stPingH\000\022-\n\005debug\030\024 \001(\0132\034.SC2APIProtocol"
      ".RequestDebugH\000B\t\n\007request\"\313\t\n\010Response\022"
      "9\n\013create_game\030\001 \001(\0132\".SC2APIProtocol.Re"
      "sponseCreateGameH\000\0225\n\tjoin_game\030\002 \001(\0132 ."
      "SC2APIProtocol.ResponseJoinGameH\000\022;\n\014res"
      "tart_game\030\003 \001(\0132#.SC2APIProtocol.Respons"
      "eRestartGameH\000\022;\n\014start_replay\030\004 \001(\0132#.S"
      "C2APIProtocol.ResponseStartReplayH\000\0227\n\nl"
      "eave_game\030\005 \001(\0132!.SC2APIProtocol.Respons"
      "eLeaveGameH\000\0227\n\nquick_save\030\006 \001(\0132!.SC2AP"
      "IProtocol.ResponseQuickSaveH\000\0227\n\nquick_l"
      "oad\030\007 \001(\0132!.SC2APIProtocol.ResponseQuick"
      "LoadH\000\022,\n\004quit\030\010 \001(\0132\034.SC2APIProtocol.Re"
      "sponseQuitH\000\0225\n\tgame_info\030\t \001(\0132 .SC2API"
      "Protocol.ResponseGameInfoH\000\022:\n\013observati"
      "on\030\n \001(\0132#.SC2APIProtocol.ResponseObserv"
      "ationH\000\0220\n\006action\030\013 \001(\0132\036.SC2APIProtocol"
      ".ResponseActionH\000\022<\n\nobs_action\030\025 \001(\0132&."
      "SC2APIProtocol.ResponseObserverActionH\000\022"
      ",\n\004step\030\014 \001(\0132\034.SC2APIProtocol.ResponseS"
      "tepH\000\022,\n\004data\030\r \001(\0132\034.SC2APIProtocol.Res"
      "ponseDataH\000\022.\n\005query\030\016 \001(\0132\035.SC2APIProto"
      "col.ResponseQueryH\000\0229\n\013save_replay\030\017 \001(\013"
      "2\".SC2APIProtocol.ResponseSaveReplayH\000\0229"
      "\n\013replay_info\030\020 \001(\0132\".SC2APIProtocol.Res"
      "ponseReplayInfoH\000\022\?\n\016available_maps\030\021 \001("
      "\0132%.SC2APIProtocol.ResponseAvailableMaps"
      "H\000\0223\n\010save_map\030\022 \001(\0132\037.SC2APIProtocol.Re"
      "sponseSaveMapH\000\022,\n\004ping\030\023 \001(\0132\034.SC2APIPr"
      "otocol.ResponsePingH\000\022.\n\005debug\030\024 \001(\0132\035.S"
      "C2APIProtocol.ResponseDebugH\000\022\r\n\005error\030b"
      " \003(\t\022&\n\006status\030c \001(\0162\026.SC2APIProtocol.St"
      "atusB\n\n\010response\"\326\001\n\021RequestCreateGame\022-"
      "\n\tlocal_map\030\001 \001(\0132\030.SC2APIProtocol.Local"
      "MapH\000\022\034\n\022battlenet_map_name\030\002 \001(\tH\000\0221\n\014p"
      "layer_setup\030\003 \003(\0132\033.SC2APIProtocol.Playe"
      "rSetup\022\023\n\013disable_fog\030\004 \001(\010\022\023\n\013random_se"
      "ed\030\005 \001(\r\022\020\n\010realtime\030\006 \001(\010B\005\n\003Map\".\n\010Loc"
      "alMap\022\020\n\010map_path\030\001 \001(\t\022\020\n\010map_data\030\007 \001("
      "\014\"\234\002\n\022ResponseCreateGame\0227\n\005error\030\001 \001(\0162"
      "(.SC2APIProtocol.ResponseCreateGame.Erro"
      "r\022\025\n\rerror_details\030\002 \001(\t\"\265\001\n\005Error\022\016\n\nMi"
      "ssingMap\020\001\022\022\n\016InvalidMapPath\020\002\022\022\n\016Invali"
      "dMapData\020\003\022\022\n\016InvalidMapName\020\004\022\024\n\020Invali"
      "dMapHandle\020\005\022\026\n\022MissingPlayerSetup\020\006\022\026\n\022"
      "InvalidPlayerSetup\020\007\022\032\n\026MultiplayerUnsup"
      "ported\020\010\"\214\002\n\017RequestJoinGame\022$\n\004race\030\001 \001"
      "(\0162\024.SC2APIProtocol.RaceH\000\022\034\n\022observed_p"
      "layer_id\030\002 \001(\rH\000\0221\n\007options\030\003 \001(\0132 .SC2A"
      "PIProtocol.InterfaceOptions\022-\n\014server_po"
      "rts\030\004 \001(\0132\027.SC2APIProtocol.PortSet\022-\n\014cl"
      "ient_ports\030\005 \003(\0132\027.SC2APIProtocol.PortSe"
      "t\022\023\n\013shared_port\030\006 \001(\005B\017\n\rparticipation\""
      "/\n\007PortSet\022\021\n\tgame_port\030\001 \001(\005\022\021\n\tbase_po"
      "rt\030\002 \001(\005\"\202\003\n\020ResponseJoinGame\022\021\n\tplayer_"
      "id\030\001 \001(\r\0225\n\005error\030\002 \001(\0162&.SC2APIProtocol"
      ".ResponseJoinGame.Error\022\025\n\rerror_details"
      "\030\003 \001(\t\"\214\002\n\005Error\022\030\n\024MissingParticipation"
      "\020\001\022\033\n\027InvalidObservedPlayerId\020\002\022\022\n\016Missi"
      "ngOptions\020\003\022\020\n\014MissingPorts\020\004\022\014\n\010GameFul"
      "l\020\005\022\017\n\013LaunchError\020\006\022\026\n\022FeatureUnsupport"
      "ed\020\007\022\022\n\016NoSpaceForUser\020\010\022\023\n\017MapDoesNotEx"
      "ist\020\t\022\021\n\rCannotOpenMap\020\n\022\021\n\rChecksumErro"
      "r\020\013\022\020\n\014NetworkError\020\014\022\016\n\nOtherError\020\r\"\024\n"
      "\022RequestRestartGame\"\200\001\n\023ResponseRestartG"
      "ame\0228\n\005error\030\001 \001(\0162).SC2APIProtocol.Resp"
      "onseRestartGame.Error\022\025\n\rerror_details\030\002"
      " \001(\t\"\030\n\005Error\022\017\n\013LaunchError\020\001\"\324\001\n\022Reque"
      "stStartReplay\022\025\n\013replay_path\030\001 \001(\tH\000\022\025\n\013"
      "replay_data\030\005 \001(\014H\000\022\020\n\010map_data\030\006 \001(\014\022\032\n"
      "\022observed_player_id\030\002 \001(\005\0221\n\007options\030\003 \001"
      "(\0132 .SC2APIProtocol.InterfaceOptions\022\023\n\013"
      "disable_fog\030\004 \001(\010\022\020\n\010realtime\030\007 \001(\010B\010\n\006r"
      "eplay\"\207\002\n\023ResponseStartReplay\0228\n\005error\030\001"
      " \001(\0162).SC2APIProtocol.ResponseStartRepla"
      "y.Error\022\025\n\rerror_details\030\002 \001(\t\"\236\001\n\005Error"
      "\022\021\n\rMissingReplay\020\001\022\025\n\021InvalidReplayPath"
      "\020\002\022\025\n\021InvalidReplayData\020\003\022\022\n\016InvalidMapD"
      "ata\020\004\022\033\n\027InvalidObservedPlayerId\020\005\022\022\n\016Mi"
      "ssingOptions\020\006\022\017\n\013LaunchError\020\007\"\022\n\020Reque"
      "stLeaveGame\"\023\n\021ResponseLeaveGame\"\022\n\020Requ"
      "estQuickSave\"\023\n\021ResponseQuickSave\"\022\n\020Req"
      "uestQuickLoad\"\023\n\021ResponseQuickLoad\"\r\n\013Re"
      "questQuit\"\016\n\014ResponseQuit\"\021\n\017RequestGame"
      "Info\"\340\001\n\020ResponseGameInfo\022\020\n\010map_name\030\001 "
      "\001(\t\022\021\n\tmod_names\030\006 \003(\t\022\026\n\016local_map_path"
      "\030\002 \001(\t\022/\n\013player_info\030\003 \003(\0132\032.SC2APIProt"
      "ocol.PlayerInfo\022+\n\tstart_raw\030\004 \001(\0132\030.SC2"
      "APIProtocol.StartRaw\0221\n\007options\030\005 \001(\0132 ."
      "SC2APIProtocol.InterfaceOptions\")\n\022Reque"
      "stObservation\022\023\n\013disable_fog\030\001 \001(\010\"\205\002\n\023R"
      "esponseObservation\022\'\n\007actions\030\001 \003(\0132\026.SC"
      "2APIProtocol.Action\0222\n\raction_errors\030\002 \003"
      "(\0132\033.SC2APIProtocol.ActionError\0220\n\013obser"
      "vation\030\003 \001(\0132\033.SC2APIProtocol.Observatio"
      "n\0223\n\rplayer_result\030\004 \003(\0132\034.SC2APIProtoco"
      "l.PlayerResult\022*\n\004chat\030\005 \003(\0132\034.SC2APIPro"
      "tocol.ChatReceived\"2\n\014ChatReceived\022\021\n\tpl"
      "ayer_id\030\001 \001(\r\022\017\n\007message\030\002 \001(\t\"8\n\rReques"
      "tAction\022\'\n\007actions\030\001 \003(\0132\026.SC2APIProtoco"
      "l.Action\">\n\016ResponseAction\022,\n\006result\030\001 \003"
      "(\0162\034.SC2APIProtocol.ActionResult\"H\n\025Requ"
      "estObserverAction\022/\n\007actions\030\001 \003(\0132\036.SC2"
      "APIProtocol.ObserverAction\"\030\n\026ResponseOb"
      "serverAction\"\034\n\013RequestStep\022\r\n\005count\030\001 \001"
      "(\r\"\016\n\014ResponseStep\"o\n\013RequestData\022\022\n\nabi"
      "lity_id\030\001 \001(\010\022\024\n\014unit_type_id\030\002 \001(\010\022\022\n\nu"
      "pgrade_id\030\003 \001(\010\022\017\n\007buff_id\030\004 \001(\010\022\021\n\teffe"
      "ct_id\030\005 \001(\010\"\360\001\n\014ResponseData\022.\n\tabilitie"
      "s\030\001 \003(\0132\033.SC2APIProtocol.AbilityData\022+\n\005"
      "units\030\002 \003(\0132\034.SC2APIProtocol.UnitTypeDat"
      "a\022-\n\010upgrades\030\003 \003(\0132\033.SC2APIProtocol.Upg"
      "radeData\022\'\n\005buffs\030\004 \003(\0132\030.SC2APIProtocol"
      ".BuffData\022+\n\007effects\030\005 \003(\0132\032.SC2APIProto"
      "col.EffectData\"\023\n\021RequestSaveReplay\"\"\n\022R"
      "esponseSaveReplay\022\014\n\004data\030\001 \001(\014\"b\n\021Reque"
      "stReplayInfo\022\025\n\013replay_path\030\001 \001(\tH\000\022\025\n\013r"
      "eplay_data\030\002 \001(\014H\000\022\025\n\rdownload_data\030\003 \001("
      "\010B\010\n\006replay\"\237\001\n\017PlayerInfoExtra\022/\n\013playe"
      "r_info\030\001 \001(\0132\032.SC2APIProtocol.PlayerInfo"
      "\0223\n\rplayer_result\030\002 \001(\0132\034.SC2APIProtocol"
      ".PlayerResult\022\022\n\nplayer_mmr\030\003 \001(\005\022\022\n\npla"
      "yer_apm\030\004 \001(\005\"\303\003\n\022ResponseReplayInfo\022\020\n\010"
      "map_name\030\001 \001(\t\022\026\n\016local_map_path\030\002 \001(\t\0224"
      "\n\013player_info\030\003 \003(\0132\037.SC2APIProtocol.Pla"
      "yerInfoExtra\022\033\n\023game_duration_loops\030\004 \001("
      "\r\022\035\n\025game_duration_seconds\030\005 \001(\002\022\024\n\014game"
      "_version\030\006 \001(\t\022\024\n\014data_version\030\013 \001(\t\022\022\n\n"
      "data_build\030\007 \001(\r\022\022\n\nbase_build\030\010 \001(\r\0227\n\005"
      "error\030\t \001(\0162(.SC2APIProtocol.ResponseRep"
      "layInfo.Error\022\025\n\rerror_details\030\n \001(\t\"m\n\005"
      "Error\022\021\n\rMissingReplay\020\001\022\025\n\021InvalidRepla"
      "yPath\020\002\022\025\n\021InvalidReplayData\020\003\022\020\n\014Parsin"
      "gError\020\004\022\021\n\rDownloadError\020\005\"\026\n\024RequestAv"
      "ailableMaps\"M\n\025ResponseAvailableMaps\022\027\n\017"
      "local_map_paths\030\001 \003(\t\022\033\n\023battlenet_map_n"
      "ames\030\002 \003(\t\"4\n\016RequestSaveMap\022\020\n\010map_path"
      "\030\001 \001(\t\022\020\n\010map_data\030\002 \001(\014\"d\n\017ResponseSave"
      "Map\0224\n\005error\030\001 \001(\0162%.SC2APIProtocol.Resp"
      "onseSaveMap.Error\"\033\n\005Error\022\022\n\016InvalidMap"
      "Data\020\001\"\r\n\013RequestPing\"b\n\014ResponsePing\022\024\n"
      "\014game_version\030\001 \001(\t\022\024\n\014data_version\030\002 \001("
      "\t\022\022\n\ndata_build\030\003 \001(\r\022\022\n\nbase_build\030\004 \001("
      "\r\";\n\014RequestDebug\022+\n\005debug\030\001 \003(\0132\034.SC2AP"
      "IProtocol.DebugCommand\"\017\n\rResponseDebug\""
      "\213\001\n\013PlayerSetup\022(\n\004type\030\001 \001(\0162\032.SC2APIPr"
      "otocol.PlayerType\022\"\n\004race\030\002 \001(\0162\024.SC2API"
      "Protocol.Race\022.\n\ndifficulty\030\003 \001(\0162\032.SC2A"
      "PIProtocol.Difficulty\"\205\001\n\022SpatialCameraS"
      "etup\022\r\n\005width\030\001 \001(\002\022+\n\nresolution\030\002 \001(\0132"
      "\027.SC2APIProtocol.Size2DI\0223\n\022minimap_reso"
      "lution\030\003 \001(\0132\027.SC2APIProtocol.Size2DI\"\235\001"
      "\n\020InterfaceOptions\022\013\n\003raw\030\001 \001(\010\022\r\n\005score"
      "\030\002 \001(\010\0229\n\rfeature_layer\030\003 \001(\0132\".SC2APIPr"
      "otocol.SpatialCameraSetup\0222\n\006render\030\004 \001("
      "\0132\".SC2APIProtocol.SpatialCameraSetup\"\322\001"
      "\n\nPlayerInfo\022\021\n\tplayer_id\030\001 \001(\r\022(\n\004type\030"
      "\002 \001(\0162\032.SC2APIProtocol.PlayerType\022,\n\016rac"
      "e_requested\030\003 \001(\0162\024.SC2APIProtocol.Race\022"
      ")\n\013race_actual\030\004 \001(\0162\024.SC2APIProtocol.Ra"
      "ce\022.\n\ndifficulty\030\005 \001(\0162\032.SC2APIProtocol."
      "Difficulty\"\357\001\n\014PlayerCommon\022\021\n\tplayer_id"
      "\030\001 \001(\r\022\020\n\010minerals\030\002 \001(\r\022\017\n\007vespene\030\003 \001("
      "\r\022\020\n\010food_cap\030\004 \001(\r\022\021\n\tfood_used\030\005 \001(\r\022\021"
      "\n\tfood_army\030\006 \001(\r\022\024\n\014food_workers\030\007 \001(\r\022"
      "\031\n\021idle_worker_count\030\010 \001(\r\022\022\n\narmy_count"
      "\030\t \001(\r\022\027\n\017warp_gate_count\030\n \001(\r\022\023\n\013larva"
      "_count\030\013 \001(\r\"\266\003\n\013Observation\022\021\n\tgame_loo"
      "p\030\t \001(\r\0223\n\rplayer_common\030\001 \001(\0132\034.SC2APIP"
      "rotocol.PlayerCommon\022%\n\006alerts\030\n \003(\0162\025.S"
      "C2APIProtocol.Alert\0223\n\tabilities\030\003 \003(\0132 "
      ".SC2APIProtocol.AvailableAbility\022$\n\005scor"
      "e\030\004 \001(\0132\025.SC2APIProtocol.Score\0220\n\010raw_da"
      "ta\030\005 \001(\0132\036.SC2APIProtocol.ObservationRaw"
      "\022C\n\022feature_layer_data\030\006 \001(\0132\'.SC2APIPro"
      "tocol.ObservationFeatureLayer\0226\n\013render_"
      "data\030\007 \001(\0132!.SC2APIProtocol.ObservationR"
      "ender\022.\n\007ui_data\030\010 \001(\0132\035.SC2APIProtocol."
      "ObservationUI\"\210\002\n\006Action\022-\n\naction_raw\030\001"
      " \001(\0132\031.SC2APIProtocol.ActionRaw\022;\n\024actio"
      "n_feature_layer\030\002 \001(\0132\035.SC2APIProtocol.A"
      "ctionSpatial\0224\n\raction_render\030\003 \001(\0132\035.SC"
      "2APIProtocol.ActionSpatial\022+\n\taction_ui\030"
      "\004 \001(\0132\030.SC2APIProtocol.ActionUI\022/\n\013actio"
      "n_chat\030\006 \001(\0132\032.SC2APIProtocol.ActionChat"
      "\"v\n\nActionChat\0223\n\007channel\030\001 \001(\0162\".SC2API"
      "Protocol.ActionChat.Channel\022\017\n\007message\030\002"
      " \001(\t\"\"\n\007Channel\022\r\n\tBroadcast\020\001\022\010\n\004Team\020\002"
      "\"a\n\013ActionError\022\020\n\010unit_tag\030\001 \001(\004\022\022\n\nabi"
      "lity_id\030\002 \001(\004\022,\n\006result\030\003 \001(\0162\034.SC2APIPr"
      "otocol.ActionResult\"\314\002\n\016ObserverAction\022M"
      "\n\022player_perspective\030\001 \001(\0132/.SC2APIProto"
      "col.ActionObserverPlayerPerspectiveH\000\022\?\n"
      "\013camera_move\030\002 \001(\0132(.SC2APIProtocol.Acti"
      "onObserverCameraMoveH\000\022P\n\024camera_follow_"
      "player\030\003 \001(\01320.SC2APIProtocol.ActionObse"
      "rverCameraFollowPlayerH\000\022N\n\023camera_follo"
      "w_units\030\004 \001(\0132/.SC2APIProtocol.ActionObs"
      "erverCameraFollowUnitsH\000B\010\n\006action\"4\n\037Ac"
      "tionObserverPlayerPerspective\022\021\n\tplayer_"
      "id\030\001 \001(\r\"X\n\030ActionObserverCameraMove\022*\n\t"
      "world_pos\030\001 \001(\0132\027.SC2APIProtocol.Point2D"
      "\022\020\n\010distance\030\002 \001(\002\"5\n ActionObserverCame"
      "raFollowPlayer\022\021\n\tplayer_id\030\001 \001(\r\"4\n\037Act"
      "ionObserverCameraFollowUnits\022\021\n\tunit_tag"
      "s\030\001 \003(\004\"I\n\014PlayerResult\022\021\n\tplayer_id\030\001 \001"
      "(\r\022&\n\006result\030\002 \001(\0162\026.SC2APIProtocol.Resu"
      "lt*c\n\006Status\022\014\n\010launched\020\001\022\r\n\tinit_game\020"
      "\002\022\013\n\007in_game\020\003\022\r\n\tin_replay\020\004\022\t\n\005ended\020\005"
      "\022\010\n\004quit\020\006\022\013\n\007unknown\020c*\226\001\n\nDifficulty\022\014"
      "\n\010VeryEasy\020\001\022\010\n\004Easy\020\002\022\n\n\006Medium\020\003\022\016\n\nMe"
      "diumHard\020\004\022\010\n\004Hard\020\005\022\n\n\006Harder\020\006\022\014\n\010Very"
      "Hard\020\007\022\017\n\013CheatVision\020\010\022\016\n\nCheatMoney\020\t\022"
      "\017\n\013CheatInsane\020\n*9\n\nPlayerType\022\017\n\013Partic"
      "ipant\020\001\022\014\n\010Computer\020\002\022\014\n\010Observer\020\003*9\n\005A"
      "lert\022\031\n\025NuclearLaunchDetected\020\001\022\025\n\021Nydus"
      "WormDetected\020\002*9\n\006Result\022\013\n\007Victory\020\001\022\n\n"
      "\006Defeat\020\002\022\007\n\003Tie\020\003\022\r\n\tUndecided\020\004"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 10113);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "s2clientprotocol/sc2api.proto", &protobuf_RegisterTypes);
  ::protobuf_s2clientprotocol_2fcommon_2eproto::AddDescriptors();
  ::protobuf_s2clientprotocol_2fdata_2eproto::AddDescriptors();
  ::protobuf_s2clientprotocol_2fdebug_2eproto::AddDescriptors();
  ::protobuf_s2clientprotocol_2ferror_2eproto::AddDescriptors();
  ::protobuf_s2clientprotocol_2fquery_2eproto::AddDescriptors();
  ::protobuf_s2clientprotocol_2fraw_2eproto::AddDescriptors();
  ::protobuf_s2clientprotocol_2fscore_2eproto::AddDescriptors();
  ::protobuf_s2clientprotocol_2fspatial_2eproto::AddDescriptors();
  ::protobuf_s2clientprotocol_2fui_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_s2clientprotocol_2fsc2api_2eproto
namespace SC2APIProtocol {
const ::google::protobuf::EnumDescriptor* ResponseCreateGame_Error_descriptor() {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_enum_descriptors[0];
}
bool ResponseCreateGame_Error_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResponseCreateGame_Error ResponseCreateGame::MissingMap;
const ResponseCreateGame_Error ResponseCreateGame::InvalidMapPath;
const ResponseCreateGame_Error ResponseCreateGame::InvalidMapData;
const ResponseCreateGame_Error ResponseCreateGame::InvalidMapName;
const ResponseCreateGame_Error ResponseCreateGame::InvalidMapHandle;
const ResponseCreateGame_Error ResponseCreateGame::MissingPlayerSetup;
const ResponseCreateGame_Error ResponseCreateGame::InvalidPlayerSetup;
const ResponseCreateGame_Error ResponseCreateGame::MultiplayerUnsupported;
const ResponseCreateGame_Error ResponseCreateGame::Error_MIN;
const ResponseCreateGame_Error ResponseCreateGame::Error_MAX;
const int ResponseCreateGame::Error_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ResponseJoinGame_Error_descriptor() {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_enum_descriptors[1];
}
bool ResponseJoinGame_Error_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResponseJoinGame_Error ResponseJoinGame::MissingParticipation;
const ResponseJoinGame_Error ResponseJoinGame::InvalidObservedPlayerId;
const ResponseJoinGame_Error ResponseJoinGame::MissingOptions;
const ResponseJoinGame_Error ResponseJoinGame::MissingPorts;
const ResponseJoinGame_Error ResponseJoinGame::GameFull;
const ResponseJoinGame_Error ResponseJoinGame::LaunchError;
const ResponseJoinGame_Error ResponseJoinGame::FeatureUnsupported;
const ResponseJoinGame_Error ResponseJoinGame::NoSpaceForUser;
const ResponseJoinGame_Error ResponseJoinGame::MapDoesNotExist;
const ResponseJoinGame_Error ResponseJoinGame::CannotOpenMap;
const ResponseJoinGame_Error ResponseJoinGame::ChecksumError;
const ResponseJoinGame_Error ResponseJoinGame::NetworkError;
const ResponseJoinGame_Error ResponseJoinGame::OtherError;
const ResponseJoinGame_Error ResponseJoinGame::Error_MIN;
const ResponseJoinGame_Error ResponseJoinGame::Error_MAX;
const int ResponseJoinGame::Error_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ResponseRestartGame_Error_descriptor() {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_enum_descriptors[2];
}
bool ResponseRestartGame_Error_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResponseRestartGame_Error ResponseRestartGame::LaunchError;
const ResponseRestartGame_Error ResponseRestartGame::Error_MIN;
const ResponseRestartGame_Error ResponseRestartGame::Error_MAX;
const int ResponseRestartGame::Error_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ResponseStartReplay_Error_descriptor() {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_enum_descriptors[3];
}
bool ResponseStartReplay_Error_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResponseStartReplay_Error ResponseStartReplay::MissingReplay;
const ResponseStartReplay_Error ResponseStartReplay::InvalidReplayPath;
const ResponseStartReplay_Error ResponseStartReplay::InvalidReplayData;
const ResponseStartReplay_Error ResponseStartReplay::InvalidMapData;
const ResponseStartReplay_Error ResponseStartReplay::InvalidObservedPlayerId;
const ResponseStartReplay_Error ResponseStartReplay::MissingOptions;
const ResponseStartReplay_Error ResponseStartReplay::LaunchError;
const ResponseStartReplay_Error ResponseStartReplay::Error_MIN;
const ResponseStartReplay_Error ResponseStartReplay::Error_MAX;
const int ResponseStartReplay::Error_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ResponseReplayInfo_Error_descriptor() {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_enum_descriptors[4];
}
bool ResponseReplayInfo_Error_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResponseReplayInfo_Error ResponseReplayInfo::MissingReplay;
const ResponseReplayInfo_Error ResponseReplayInfo::InvalidReplayPath;
const ResponseReplayInfo_Error ResponseReplayInfo::InvalidReplayData;
const ResponseReplayInfo_Error ResponseReplayInfo::ParsingError;
const ResponseReplayInfo_Error ResponseReplayInfo::DownloadError;
const ResponseReplayInfo_Error ResponseReplayInfo::Error_MIN;
const ResponseReplayInfo_Error ResponseReplayInfo::Error_MAX;
const int ResponseReplayInfo::Error_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ResponseSaveMap_Error_descriptor() {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_enum_descriptors[5];
}
bool ResponseSaveMap_Error_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResponseSaveMap_Error ResponseSaveMap::InvalidMapData;
const ResponseSaveMap_Error ResponseSaveMap::Error_MIN;
const ResponseSaveMap_Error ResponseSaveMap::Error_MAX;
const int ResponseSaveMap::Error_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ActionChat_Channel_descriptor() {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_enum_descriptors[6];
}
bool ActionChat_Channel_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ActionChat_Channel ActionChat::Broadcast;
const ActionChat_Channel ActionChat::Team;
const ActionChat_Channel ActionChat::Channel_MIN;
const ActionChat_Channel ActionChat::Channel_MAX;
const int ActionChat::Channel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Status_descriptor() {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_enum_descriptors[7];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Difficulty_descriptor() {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_enum_descriptors[8];
}
bool Difficulty_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerType_descriptor() {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_enum_descriptors[9];
}
bool PlayerType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Alert_descriptor() {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_enum_descriptors[10];
}
bool Alert_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Result_descriptor() {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_enum_descriptors[11];
}
bool Result_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Request::InitAsDefaultInstance() {
  ::SC2APIProtocol::_Request_default_instance_.create_game_ = const_cast< ::SC2APIProtocol::RequestCreateGame*>(
      ::SC2APIProtocol::RequestCreateGame::internal_default_instance());
  ::SC2APIProtocol::_Request_default_instance_.join_game_ = const_cast< ::SC2APIProtocol::RequestJoinGame*>(
      ::SC2APIProtocol::RequestJoinGame::internal_default_instance());
  ::SC2APIProtocol::_Request_default_instance_.restart_game_ = const_cast< ::SC2APIProtocol::RequestRestartGame*>(
      ::SC2APIProtocol::RequestRestartGame::internal_default_instance());
  ::SC2APIProtocol::_Request_default_instance_.start_replay_ = const_cast< ::SC2APIProtocol::RequestStartReplay*>(
      ::SC2APIProtocol::RequestStartReplay::internal_default_instance());
  ::SC2APIProtocol::_Request_default_instance_.leave_game_ = const_cast< ::SC2APIProtocol::RequestLeaveGame*>(
      ::SC2APIProtocol::RequestLeaveGame::internal_default_instance());
  ::SC2APIProtocol::_Request_default_instance_.quick_save_ = const_cast< ::SC2APIProtocol::RequestQuickSave*>(
      ::SC2APIProtocol::RequestQuickSave::internal_default_instance());
  ::SC2APIProtocol::_Request_default_instance_.quick_load_ = const_cast< ::SC2APIProtocol::RequestQuickLoad*>(
      ::SC2APIProtocol::RequestQuickLoad::internal_default_instance());
  ::SC2APIProtocol::_Request_default_instance_.quit_ = const_cast< ::SC2APIProtocol::RequestQuit*>(
      ::SC2APIProtocol::RequestQuit::internal_default_instance());
  ::SC2APIProtocol::_Request_default_instance_.game_info_ = const_cast< ::SC2APIProtocol::RequestGameInfo*>(
      ::SC2APIProtocol::RequestGameInfo::internal_default_instance());
  ::SC2APIProtocol::_Request_default_instance_.observation_ = const_cast< ::SC2APIProtocol::RequestObservation*>(
      ::SC2APIProtocol::RequestObservation::internal_default_instance());
  ::SC2APIProtocol::_Request_default_instance_.action_ = const_cast< ::SC2APIProtocol::RequestAction*>(
      ::SC2APIProtocol::RequestAction::internal_default_instance());
  ::SC2APIProtocol::_Request_default_instance_.obs_action_ = const_cast< ::SC2APIProtocol::RequestObserverAction*>(
      ::SC2APIProtocol::RequestObserverAction::internal_default_instance());
  ::SC2APIProtocol::_Request_default_instance_.step_ = const_cast< ::SC2APIProtocol::RequestStep*>(
      ::SC2APIProtocol::RequestStep::internal_default_instance());
  ::SC2APIProtocol::_Request_default_instance_.data_ = const_cast< ::SC2APIProtocol::RequestData*>(
      ::SC2APIProtocol::RequestData::internal_default_instance());
  ::SC2APIProtocol::_Request_default_instance_.query_ = const_cast< ::SC2APIProtocol::RequestQuery*>(
      ::SC2APIProtocol::RequestQuery::internal_default_instance());
  ::SC2APIProtocol::_Request_default_instance_.save_replay_ = const_cast< ::SC2APIProtocol::RequestSaveReplay*>(
      ::SC2APIProtocol::RequestSaveReplay::internal_default_instance());
  ::SC2APIProtocol::_Request_default_instance_.replay_info_ = const_cast< ::SC2APIProtocol::RequestReplayInfo*>(
      ::SC2APIProtocol::RequestReplayInfo::internal_default_instance());
  ::SC2APIProtocol::_Request_default_instance_.available_maps_ = const_cast< ::SC2APIProtocol::RequestAvailableMaps*>(
      ::SC2APIProtocol::RequestAvailableMaps::internal_default_instance());
  ::SC2APIProtocol::_Request_default_instance_.save_map_ = const_cast< ::SC2APIProtocol::RequestSaveMap*>(
      ::SC2APIProtocol::RequestSaveMap::internal_default_instance());
  ::SC2APIProtocol::_Request_default_instance_.ping_ = const_cast< ::SC2APIProtocol::RequestPing*>(
      ::SC2APIProtocol::RequestPing::internal_default_instance());
  ::SC2APIProtocol::_Request_default_instance_.debug_ = const_cast< ::SC2APIProtocol::RequestDebug*>(
      ::SC2APIProtocol::RequestDebug::internal_default_instance());
}
void Request::set_allocated_create_game(::SC2APIProtocol::RequestCreateGame* create_game) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (create_game) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      create_game = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_game, submessage_arena);
    }
    set_has_create_game();
    request_.create_game_ = create_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.create_game)
}
void Request::set_allocated_join_game(::SC2APIProtocol::RequestJoinGame* join_game) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (join_game) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      join_game = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, join_game, submessage_arena);
    }
    set_has_join_game();
    request_.join_game_ = join_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.join_game)
}
void Request::set_allocated_restart_game(::SC2APIProtocol::RequestRestartGame* restart_game) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (restart_game) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      restart_game = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, restart_game, submessage_arena);
    }
    set_has_restart_game();
    request_.restart_game_ = restart_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.restart_game)
}
void Request::set_allocated_start_replay(::SC2APIProtocol::RequestStartReplay* start_replay) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (start_replay) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      start_replay = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_replay, submessage_arena);
    }
    set_has_start_replay();
    request_.start_replay_ = start_replay;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.start_replay)
}
void Request::set_allocated_leave_game(::SC2APIProtocol::RequestLeaveGame* leave_game) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (leave_game) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      leave_game = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leave_game, submessage_arena);
    }
    set_has_leave_game();
    request_.leave_game_ = leave_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.leave_game)
}
void Request::set_allocated_quick_save(::SC2APIProtocol::RequestQuickSave* quick_save) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (quick_save) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      quick_save = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quick_save, submessage_arena);
    }
    set_has_quick_save();
    request_.quick_save_ = quick_save;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.quick_save)
}
void Request::set_allocated_quick_load(::SC2APIProtocol::RequestQuickLoad* quick_load) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (quick_load) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      quick_load = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quick_load, submessage_arena);
    }
    set_has_quick_load();
    request_.quick_load_ = quick_load;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.quick_load)
}
void Request::set_allocated_quit(::SC2APIProtocol::RequestQuit* quit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (quit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      quit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quit, submessage_arena);
    }
    set_has_quit();
    request_.quit_ = quit;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.quit)
}
void Request::set_allocated_game_info(::SC2APIProtocol::RequestGameInfo* game_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (game_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      game_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, game_info, submessage_arena);
    }
    set_has_game_info();
    request_.game_info_ = game_info;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.game_info)
}
void Request::set_allocated_observation(::SC2APIProtocol::RequestObservation* observation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (observation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      observation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, observation, submessage_arena);
    }
    set_has_observation();
    request_.observation_ = observation;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.observation)
}
void Request::set_allocated_action(::SC2APIProtocol::RequestAction* action) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (action) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      action = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    set_has_action();
    request_.action_ = action;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.action)
}
void Request::set_allocated_obs_action(::SC2APIProtocol::RequestObserverAction* obs_action) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (obs_action) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      obs_action = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, obs_action, submessage_arena);
    }
    set_has_obs_action();
    request_.obs_action_ = obs_action;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.obs_action)
}
void Request::set_allocated_step(::SC2APIProtocol::RequestStep* step) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (step) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      step = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, step, submessage_arena);
    }
    set_has_step();
    request_.step_ = step;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.step)
}
void Request::set_allocated_data(::SC2APIProtocol::RequestData* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    request_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.data)
}
void Request::set_allocated_query(::SC2APIProtocol::RequestQuery* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (query) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
    request_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.query)
}
void Request::clear_query() {
  if (has_query()) {
    delete request_.query_;
    clear_has_request();
  }
}
void Request::set_allocated_save_replay(::SC2APIProtocol::RequestSaveReplay* save_replay) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (save_replay) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      save_replay = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, save_replay, submessage_arena);
    }
    set_has_save_replay();
    request_.save_replay_ = save_replay;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.save_replay)
}
void Request::set_allocated_replay_info(::SC2APIProtocol::RequestReplayInfo* replay_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (replay_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      replay_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, replay_info, submessage_arena);
    }
    set_has_replay_info();
    request_.replay_info_ = replay_info;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.replay_info)
}
void Request::set_allocated_available_maps(::SC2APIProtocol::RequestAvailableMaps* available_maps) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (available_maps) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      available_maps = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, available_maps, submessage_arena);
    }
    set_has_available_maps();
    request_.available_maps_ = available_maps;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.available_maps)
}
void Request::set_allocated_save_map(::SC2APIProtocol::RequestSaveMap* save_map) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (save_map) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      save_map = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, save_map, submessage_arena);
    }
    set_has_save_map();
    request_.save_map_ = save_map;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.save_map)
}
void Request::set_allocated_ping(::SC2APIProtocol::RequestPing* ping) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (ping) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ping = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    set_has_ping();
    request_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.ping)
}
void Request::set_allocated_debug(::SC2APIProtocol::RequestDebug* debug) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_request();
  if (debug) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      debug = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    set_has_debug();
    request_.debug_ = debug;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.debug)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kCreateGameFieldNumber;
const int Request::kJoinGameFieldNumber;
const int Request::kRestartGameFieldNumber;
const int Request::kStartReplayFieldNumber;
const int Request::kLeaveGameFieldNumber;
const int Request::kQuickSaveFieldNumber;
const int Request::kQuickLoadFieldNumber;
const int Request::kQuitFieldNumber;
const int Request::kGameInfoFieldNumber;
const int Request::kObservationFieldNumber;
const int Request::kActionFieldNumber;
const int Request::kObsActionFieldNumber;
const int Request::kStepFieldNumber;
const int Request::kDataFieldNumber;
const int Request::kQueryFieldNumber;
const int Request::kSaveReplayFieldNumber;
const int Request::kReplayInfoFieldNumber;
const int Request::kAvailableMapsFieldNumber;
const int Request::kSaveMapFieldNumber;
const int Request::kPingFieldNumber;
const int Request::kDebugFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kCreateGame: {
      mutable_create_game()->::SC2APIProtocol::RequestCreateGame::MergeFrom(from.create_game());
      break;
    }
    case kJoinGame: {
      mutable_join_game()->::SC2APIProtocol::RequestJoinGame::MergeFrom(from.join_game());
      break;
    }
    case kRestartGame: {
      mutable_restart_game()->::SC2APIProtocol::RequestRestartGame::MergeFrom(from.restart_game());
      break;
    }
    case kStartReplay: {
      mutable_start_replay()->::SC2APIProtocol::RequestStartReplay::MergeFrom(from.start_replay());
      break;
    }
    case kLeaveGame: {
      mutable_leave_game()->::SC2APIProtocol::RequestLeaveGame::MergeFrom(from.leave_game());
      break;
    }
    case kQuickSave: {
      mutable_quick_save()->::SC2APIProtocol::RequestQuickSave::MergeFrom(from.quick_save());
      break;
    }
    case kQuickLoad: {
      mutable_quick_load()->::SC2APIProtocol::RequestQuickLoad::MergeFrom(from.quick_load());
      break;
    }
    case kQuit: {
      mutable_quit()->::SC2APIProtocol::RequestQuit::MergeFrom(from.quit());
      break;
    }
    case kGameInfo: {
      mutable_game_info()->::SC2APIProtocol::RequestGameInfo::MergeFrom(from.game_info());
      break;
    }
    case kObservation: {
      mutable_observation()->::SC2APIProtocol::RequestObservation::MergeFrom(from.observation());
      break;
    }
    case kAction: {
      mutable_action()->::SC2APIProtocol::RequestAction::MergeFrom(from.action());
      break;
    }
    case kObsAction: {
      mutable_obs_action()->::SC2APIProtocol::RequestObserverAction::MergeFrom(from.obs_action());
      break;
    }
    case kStep: {
      mutable_step()->::SC2APIProtocol::RequestStep::MergeFrom(from.step());
      break;
    }
    case kData: {
      mutable_data()->::SC2APIProtocol::RequestData::MergeFrom(from.data());
      break;
    }
    case kQuery: {
      mutable_query()->::SC2APIProtocol::RequestQuery::MergeFrom(from.query());
      break;
    }
    case kSaveReplay: {
      mutable_save_replay()->::SC2APIProtocol::RequestSaveReplay::MergeFrom(from.save_replay());
      break;
    }
    case kReplayInfo: {
      mutable_replay_info()->::SC2APIProtocol::RequestReplayInfo::MergeFrom(from.replay_info());
      break;
    }
    case kAvailableMaps: {
      mutable_available_maps()->::SC2APIProtocol::RequestAvailableMaps::MergeFrom(from.available_maps());
      break;
    }
    case kSaveMap: {
      mutable_save_map()->::SC2APIProtocol::RequestSaveMap::MergeFrom(from.save_map());
      break;
    }
    case kPing: {
      mutable_ping()->::SC2APIProtocol::RequestPing::MergeFrom(from.ping());
      break;
    }
    case kDebug: {
      mutable_debug()->::SC2APIProtocol::RequestDebug::MergeFrom(from.debug());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Request)
}

void Request::SharedCtor() {
  clear_has_request();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (has_request()) {
    clear_request();
  }
}

void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Request& Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_Request.base);
  return *internal_default_instance();
}


void Request::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.Request)
  switch (request_case()) {
    case kCreateGame: {
      delete request_.create_game_;
      break;
    }
    case kJoinGame: {
      delete request_.join_game_;
      break;
    }
    case kRestartGame: {
      delete request_.restart_game_;
      break;
    }
    case kStartReplay: {
      delete request_.start_replay_;
      break;
    }
    case kLeaveGame: {
      delete request_.leave_game_;
      break;
    }
    case kQuickSave: {
      delete request_.quick_save_;
      break;
    }
    case kQuickLoad: {
      delete request_.quick_load_;
      break;
    }
    case kQuit: {
      delete request_.quit_;
      break;
    }
    case kGameInfo: {
      delete request_.game_info_;
      break;
    }
    case kObservation: {
      delete request_.observation_;
      break;
    }
    case kAction: {
      delete request_.action_;
      break;
    }
    case kObsAction: {
      delete request_.obs_action_;
      break;
    }
    case kStep: {
      delete request_.step_;
      break;
    }
    case kData: {
      delete request_.data_;
      break;
    }
    case kQuery: {
      delete request_.query_;
      break;
    }
    case kSaveReplay: {
      delete request_.save_replay_;
      break;
    }
    case kReplayInfo: {
      delete request_.replay_info_;
      break;
    }
    case kAvailableMaps: {
      delete request_.available_maps_;
      break;
    }
    case kSaveMap: {
      delete request_.save_map_;
      break;
    }
    case kPing: {
      delete request_.ping_;
      break;
    }
    case kDebug: {
      delete request_.debug_;
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.RequestCreateGame create_game = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.RequestJoinGame join_game = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_join_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.RequestRestartGame restart_game = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_restart_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.RequestStartReplay start_replay = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_replay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.RequestLeaveGame leave_game = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leave_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.RequestQuickSave quick_save = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quick_save()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.RequestQuickLoad quick_load = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quick_load()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.RequestQuit quit = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.RequestGameInfo game_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_game_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.RequestObservation observation = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_observation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.RequestAction action = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.RequestStep step = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_step()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.RequestData data = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.RequestQuery query = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.RequestSaveReplay save_replay = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_save_replay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.RequestReplayInfo replay_info = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_replay_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.RequestAvailableMaps available_maps = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_available_maps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.RequestSaveMap save_map = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_save_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.RequestPing ping = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ping()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.RequestDebug debug = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.RequestObserverAction obs_action = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_obs_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (request_case()) {
    case kCreateGame:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_create_game(), output);
      break;
    case kJoinGame:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_join_game(), output);
      break;
    case kRestartGame:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_restart_game(), output);
      break;
    case kStartReplay:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_start_replay(), output);
      break;
    case kLeaveGame:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->_internal_leave_game(), output);
      break;
    case kQuickSave:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, this->_internal_quick_save(), output);
      break;
    case kQuickLoad:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, this->_internal_quick_load(), output);
      break;
    case kQuit:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, this->_internal_quit(), output);
      break;
    case kGameInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, this->_internal_game_info(), output);
      break;
    case kObservation:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, this->_internal_observation(), output);
      break;
    case kAction:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, this->_internal_action(), output);
      break;
    case kStep:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, this->_internal_step(), output);
      break;
    case kData:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, this->_internal_data(), output);
      break;
    case kQuery:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        14, this->_internal_query(), output);
      break;
    case kSaveReplay:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        15, this->_internal_save_replay(), output);
      break;
    case kReplayInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        16, this->_internal_replay_info(), output);
      break;
    case kAvailableMaps:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        17, this->_internal_available_maps(), output);
      break;
    case kSaveMap:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        18, this->_internal_save_map(), output);
      break;
    case kPing:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        19, this->_internal_ping(), output);
      break;
    case kDebug:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        20, this->_internal_debug(), output);
      break;
    case kObsAction:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        21, this->_internal_obs_action(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (request_case()) {
    case kCreateGame:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, this->_internal_create_game(), deterministic, target);
      break;
    case kJoinGame:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_join_game(), deterministic, target);
      break;
    case kRestartGame:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_restart_game(), deterministic, target);
      break;
    case kStartReplay:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_start_replay(), deterministic, target);
      break;
    case kLeaveGame:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, this->_internal_leave_game(), deterministic, target);
      break;
    case kQuickSave:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, this->_internal_quick_save(), deterministic, target);
      break;
    case kQuickLoad:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, this->_internal_quick_load(), deterministic, target);
      break;
    case kQuit:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          8, this->_internal_quit(), deterministic, target);
      break;
    case kGameInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          9, this->_internal_game_info(), deterministic, target);
      break;
    case kObservation:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          10, this->_internal_observation(), deterministic, target);
      break;
    case kAction:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          11, this->_internal_action(), deterministic, target);
      break;
    case kStep:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          12, this->_internal_step(), deterministic, target);
      break;
    case kData:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          13, this->_internal_data(), deterministic, target);
      break;
    case kQuery:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          14, this->_internal_query(), deterministic, target);
      break;
    case kSaveReplay:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          15, this->_internal_save_replay(), deterministic, target);
      break;
    case kReplayInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          16, this->_internal_replay_info(), deterministic, target);
      break;
    case kAvailableMaps:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          17, this->_internal_available_maps(), deterministic, target);
      break;
    case kSaveMap:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          18, this->_internal_save_map(), deterministic, target);
      break;
    case kPing:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          19, this->_internal_ping(), deterministic, target);
      break;
    case kDebug:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          20, this->_internal_debug(), deterministic, target);
      break;
    case kObsAction:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          21, this->_internal_obs_action(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (request_case()) {
    // optional .SC2APIProtocol.RequestCreateGame create_game = 1;
    case kCreateGame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.create_game_);
      break;
    }
    // optional .SC2APIProtocol.RequestJoinGame join_game = 2;
    case kJoinGame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.join_game_);
      break;
    }
    // optional .SC2APIProtocol.RequestRestartGame restart_game = 3;
    case kRestartGame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.restart_game_);
      break;
    }
    // optional .SC2APIProtocol.RequestStartReplay start_replay = 4;
    case kStartReplay: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.start_replay_);
      break;
    }
    // optional .SC2APIProtocol.RequestLeaveGame leave_game = 5;
    case kLeaveGame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.leave_game_);
      break;
    }
    // optional .SC2APIProtocol.RequestQuickSave quick_save = 6;
    case kQuickSave: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.quick_save_);
      break;
    }
    // optional .SC2APIProtocol.RequestQuickLoad quick_load = 7;
    case kQuickLoad: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.quick_load_);
      break;
    }
    // optional .SC2APIProtocol.RequestQuit quit = 8;
    case kQuit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.quit_);
      break;
    }
    // optional .SC2APIProtocol.RequestGameInfo game_info = 9;
    case kGameInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.game_info_);
      break;
    }
    // optional .SC2APIProtocol.RequestObservation observation = 10;
    case kObservation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.observation_);
      break;
    }
    // optional .SC2APIProtocol.RequestAction action = 11;
    case kAction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.action_);
      break;
    }
    // optional .SC2APIProtocol.RequestObserverAction obs_action = 21;
    case kObsAction: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.obs_action_);
      break;
    }
    // optional .SC2APIProtocol.RequestStep step = 12;
    case kStep: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.step_);
      break;
    }
    // optional .SC2APIProtocol.RequestData data = 13;
    case kData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.data_);
      break;
    }
    // optional .SC2APIProtocol.RequestQuery query = 14;
    case kQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.query_);
      break;
    }
    // optional .SC2APIProtocol.RequestSaveReplay save_replay = 15;
    case kSaveReplay: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.save_replay_);
      break;
    }
    // optional .SC2APIProtocol.RequestReplayInfo replay_info = 16;
    case kReplayInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.replay_info_);
      break;
    }
    // optional .SC2APIProtocol.RequestAvailableMaps available_maps = 17;
    case kAvailableMaps: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.available_maps_);
      break;
    }
    // optional .SC2APIProtocol.RequestSaveMap save_map = 18;
    case kSaveMap: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.save_map_);
      break;
    }
    // optional .SC2APIProtocol.RequestPing ping = 19;
    case kPing: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.ping_);
      break;
    }
    // optional .SC2APIProtocol.RequestDebug debug = 20;
    case kDebug: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *request_.debug_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kCreateGame: {
      mutable_create_game()->::SC2APIProtocol::RequestCreateGame::MergeFrom(from.create_game());
      break;
    }
    case kJoinGame: {
      mutable_join_game()->::SC2APIProtocol::RequestJoinGame::MergeFrom(from.join_game());
      break;
    }
    case kRestartGame: {
      mutable_restart_game()->::SC2APIProtocol::RequestRestartGame::MergeFrom(from.restart_game());
      break;
    }
    case kStartReplay: {
      mutable_start_replay()->::SC2APIProtocol::RequestStartReplay::MergeFrom(from.start_replay());
      break;
    }
    case kLeaveGame: {
      mutable_leave_game()->::SC2APIProtocol::RequestLeaveGame::MergeFrom(from.leave_game());
      break;
    }
    case kQuickSave: {
      mutable_quick_save()->::SC2APIProtocol::RequestQuickSave::MergeFrom(from.quick_save());
      break;
    }
    case kQuickLoad: {
      mutable_quick_load()->::SC2APIProtocol::RequestQuickLoad::MergeFrom(from.quick_load());
      break;
    }
    case kQuit: {
      mutable_quit()->::SC2APIProtocol::RequestQuit::MergeFrom(from.quit());
      break;
    }
    case kGameInfo: {
      mutable_game_info()->::SC2APIProtocol::RequestGameInfo::MergeFrom(from.game_info());
      break;
    }
    case kObservation: {
      mutable_observation()->::SC2APIProtocol::RequestObservation::MergeFrom(from.observation());
      break;
    }
    case kAction: {
      mutable_action()->::SC2APIProtocol::RequestAction::MergeFrom(from.action());
      break;
    }
    case kObsAction: {
      mutable_obs_action()->::SC2APIProtocol::RequestObserverAction::MergeFrom(from.obs_action());
      break;
    }
    case kStep: {
      mutable_step()->::SC2APIProtocol::RequestStep::MergeFrom(from.step());
      break;
    }
    case kData: {
      mutable_data()->::SC2APIProtocol::RequestData::MergeFrom(from.data());
      break;
    }
    case kQuery: {
      mutable_query()->::SC2APIProtocol::RequestQuery::MergeFrom(from.query());
      break;
    }
    case kSaveReplay: {
      mutable_save_replay()->::SC2APIProtocol::RequestSaveReplay::MergeFrom(from.save_replay());
      break;
    }
    case kReplayInfo: {
      mutable_replay_info()->::SC2APIProtocol::RequestReplayInfo::MergeFrom(from.replay_info());
      break;
    }
    case kAvailableMaps: {
      mutable_available_maps()->::SC2APIProtocol::RequestAvailableMaps::MergeFrom(from.available_maps());
      break;
    }
    case kSaveMap: {
      mutable_save_map()->::SC2APIProtocol::RequestSaveMap::MergeFrom(from.save_map());
      break;
    }
    case kPing: {
      mutable_ping()->::SC2APIProtocol::RequestPing::MergeFrom(from.ping());
      break;
    }
    case kDebug: {
      mutable_debug()->::SC2APIProtocol::RequestDebug::MergeFrom(from.debug());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  using std::swap;
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Response::InitAsDefaultInstance() {
  ::SC2APIProtocol::_Response_default_instance_.create_game_ = const_cast< ::SC2APIProtocol::ResponseCreateGame*>(
      ::SC2APIProtocol::ResponseCreateGame::internal_default_instance());
  ::SC2APIProtocol::_Response_default_instance_.join_game_ = const_cast< ::SC2APIProtocol::ResponseJoinGame*>(
      ::SC2APIProtocol::ResponseJoinGame::internal_default_instance());
  ::SC2APIProtocol::_Response_default_instance_.restart_game_ = const_cast< ::SC2APIProtocol::ResponseRestartGame*>(
      ::SC2APIProtocol::ResponseRestartGame::internal_default_instance());
  ::SC2APIProtocol::_Response_default_instance_.start_replay_ = const_cast< ::SC2APIProtocol::ResponseStartReplay*>(
      ::SC2APIProtocol::ResponseStartReplay::internal_default_instance());
  ::SC2APIProtocol::_Response_default_instance_.leave_game_ = const_cast< ::SC2APIProtocol::ResponseLeaveGame*>(
      ::SC2APIProtocol::ResponseLeaveGame::internal_default_instance());
  ::SC2APIProtocol::_Response_default_instance_.quick_save_ = const_cast< ::SC2APIProtocol::ResponseQuickSave*>(
      ::SC2APIProtocol::ResponseQuickSave::internal_default_instance());
  ::SC2APIProtocol::_Response_default_instance_.quick_load_ = const_cast< ::SC2APIProtocol::ResponseQuickLoad*>(
      ::SC2APIProtocol::ResponseQuickLoad::internal_default_instance());
  ::SC2APIProtocol::_Response_default_instance_.quit_ = const_cast< ::SC2APIProtocol::ResponseQuit*>(
      ::SC2APIProtocol::ResponseQuit::internal_default_instance());
  ::SC2APIProtocol::_Response_default_instance_.game_info_ = const_cast< ::SC2APIProtocol::ResponseGameInfo*>(
      ::SC2APIProtocol::ResponseGameInfo::internal_default_instance());
  ::SC2APIProtocol::_Response_default_instance_.observation_ = const_cast< ::SC2APIProtocol::ResponseObservation*>(
      ::SC2APIProtocol::ResponseObservation::internal_default_instance());
  ::SC2APIProtocol::_Response_default_instance_.action_ = const_cast< ::SC2APIProtocol::ResponseAction*>(
      ::SC2APIProtocol::ResponseAction::internal_default_instance());
  ::SC2APIProtocol::_Response_default_instance_.obs_action_ = const_cast< ::SC2APIProtocol::ResponseObserverAction*>(
      ::SC2APIProtocol::ResponseObserverAction::internal_default_instance());
  ::SC2APIProtocol::_Response_default_instance_.step_ = const_cast< ::SC2APIProtocol::ResponseStep*>(
      ::SC2APIProtocol::ResponseStep::internal_default_instance());
  ::SC2APIProtocol::_Response_default_instance_.data_ = const_cast< ::SC2APIProtocol::ResponseData*>(
      ::SC2APIProtocol::ResponseData::internal_default_instance());
  ::SC2APIProtocol::_Response_default_instance_.query_ = const_cast< ::SC2APIProtocol::ResponseQuery*>(
      ::SC2APIProtocol::ResponseQuery::internal_default_instance());
  ::SC2APIProtocol::_Response_default_instance_.save_replay_ = const_cast< ::SC2APIProtocol::ResponseSaveReplay*>(
      ::SC2APIProtocol::ResponseSaveReplay::internal_default_instance());
  ::SC2APIProtocol::_Response_default_instance_.replay_info_ = const_cast< ::SC2APIProtocol::ResponseReplayInfo*>(
      ::SC2APIProtocol::ResponseReplayInfo::internal_default_instance());
  ::SC2APIProtocol::_Response_default_instance_.available_maps_ = const_cast< ::SC2APIProtocol::ResponseAvailableMaps*>(
      ::SC2APIProtocol::ResponseAvailableMaps::internal_default_instance());
  ::SC2APIProtocol::_Response_default_instance_.save_map_ = const_cast< ::SC2APIProtocol::ResponseSaveMap*>(
      ::SC2APIProtocol::ResponseSaveMap::internal_default_instance());
  ::SC2APIProtocol::_Response_default_instance_.ping_ = const_cast< ::SC2APIProtocol::ResponsePing*>(
      ::SC2APIProtocol::ResponsePing::internal_default_instance());
  ::SC2APIProtocol::_Response_default_instance_.debug_ = const_cast< ::SC2APIProtocol::ResponseDebug*>(
      ::SC2APIProtocol::ResponseDebug::internal_default_instance());
}
void Response::set_allocated_create_game(::SC2APIProtocol::ResponseCreateGame* create_game) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (create_game) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      create_game = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, create_game, submessage_arena);
    }
    set_has_create_game();
    response_.create_game_ = create_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.create_game)
}
void Response::set_allocated_join_game(::SC2APIProtocol::ResponseJoinGame* join_game) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (join_game) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      join_game = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, join_game, submessage_arena);
    }
    set_has_join_game();
    response_.join_game_ = join_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.join_game)
}
void Response::set_allocated_restart_game(::SC2APIProtocol::ResponseRestartGame* restart_game) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (restart_game) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      restart_game = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, restart_game, submessage_arena);
    }
    set_has_restart_game();
    response_.restart_game_ = restart_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.restart_game)
}
void Response::set_allocated_start_replay(::SC2APIProtocol::ResponseStartReplay* start_replay) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (start_replay) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      start_replay = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_replay, submessage_arena);
    }
    set_has_start_replay();
    response_.start_replay_ = start_replay;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.start_replay)
}
void Response::set_allocated_leave_game(::SC2APIProtocol::ResponseLeaveGame* leave_game) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (leave_game) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      leave_game = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leave_game, submessage_arena);
    }
    set_has_leave_game();
    response_.leave_game_ = leave_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.leave_game)
}
void Response::set_allocated_quick_save(::SC2APIProtocol::ResponseQuickSave* quick_save) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (quick_save) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      quick_save = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quick_save, submessage_arena);
    }
    set_has_quick_save();
    response_.quick_save_ = quick_save;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.quick_save)
}
void Response::set_allocated_quick_load(::SC2APIProtocol::ResponseQuickLoad* quick_load) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (quick_load) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      quick_load = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quick_load, submessage_arena);
    }
    set_has_quick_load();
    response_.quick_load_ = quick_load;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.quick_load)
}
void Response::set_allocated_quit(::SC2APIProtocol::ResponseQuit* quit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (quit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      quit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, quit, submessage_arena);
    }
    set_has_quit();
    response_.quit_ = quit;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.quit)
}
void Response::set_allocated_game_info(::SC2APIProtocol::ResponseGameInfo* game_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (game_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      game_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, game_info, submessage_arena);
    }
    set_has_game_info();
    response_.game_info_ = game_info;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.game_info)
}
void Response::set_allocated_observation(::SC2APIProtocol::ResponseObservation* observation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (observation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      observation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, observation, submessage_arena);
    }
    set_has_observation();
    response_.observation_ = observation;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.observation)
}
void Response::set_allocated_action(::SC2APIProtocol::ResponseAction* action) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (action) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      action = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    set_has_action();
    response_.action_ = action;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.action)
}
void Response::set_allocated_obs_action(::SC2APIProtocol::ResponseObserverAction* obs_action) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (obs_action) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      obs_action = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, obs_action, submessage_arena);
    }
    set_has_obs_action();
    response_.obs_action_ = obs_action;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.obs_action)
}
void Response::set_allocated_step(::SC2APIProtocol::ResponseStep* step) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (step) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      step = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, step, submessage_arena);
    }
    set_has_step();
    response_.step_ = step;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.step)
}
void Response::set_allocated_data(::SC2APIProtocol::ResponseData* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    response_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.data)
}
void Response::set_allocated_query(::SC2APIProtocol::ResponseQuery* query) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (query) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      query = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
    response_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.query)
}
void Response::clear_query() {
  if (has_query()) {
    delete response_.query_;
    clear_has_response();
  }
}
void Response::set_allocated_save_replay(::SC2APIProtocol::ResponseSaveReplay* save_replay) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (save_replay) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      save_replay = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, save_replay, submessage_arena);
    }
    set_has_save_replay();
    response_.save_replay_ = save_replay;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.save_replay)
}
void Response::set_allocated_replay_info(::SC2APIProtocol::ResponseReplayInfo* replay_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (replay_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      replay_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, replay_info, submessage_arena);
    }
    set_has_replay_info();
    response_.replay_info_ = replay_info;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.replay_info)
}
void Response::set_allocated_available_maps(::SC2APIProtocol::ResponseAvailableMaps* available_maps) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (available_maps) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      available_maps = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, available_maps, submessage_arena);
    }
    set_has_available_maps();
    response_.available_maps_ = available_maps;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.available_maps)
}
void Response::set_allocated_save_map(::SC2APIProtocol::ResponseSaveMap* save_map) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (save_map) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      save_map = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, save_map, submessage_arena);
    }
    set_has_save_map();
    response_.save_map_ = save_map;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.save_map)
}
void Response::set_allocated_ping(::SC2APIProtocol::ResponsePing* ping) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (ping) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ping = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    set_has_ping();
    response_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.ping)
}
void Response::set_allocated_debug(::SC2APIProtocol::ResponseDebug* debug) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_response();
  if (debug) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      debug = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    set_has_debug();
    response_.debug_ = debug;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.debug)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kCreateGameFieldNumber;
const int Response::kJoinGameFieldNumber;
const int Response::kRestartGameFieldNumber;
const int Response::kStartReplayFieldNumber;
const int Response::kLeaveGameFieldNumber;
const int Response::kQuickSaveFieldNumber;
const int Response::kQuickLoadFieldNumber;
const int Response::kQuitFieldNumber;
const int Response::kGameInfoFieldNumber;
const int Response::kObservationFieldNumber;
const int Response::kActionFieldNumber;
const int Response::kObsActionFieldNumber;
const int Response::kStepFieldNumber;
const int Response::kDataFieldNumber;
const int Response::kQueryFieldNumber;
const int Response::kSaveReplayFieldNumber;
const int Response::kReplayInfoFieldNumber;
const int Response::kAvailableMapsFieldNumber;
const int Response::kSaveMapFieldNumber;
const int Response::kPingFieldNumber;
const int Response::kDebugFieldNumber;
const int Response::kErrorFieldNumber;
const int Response::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.Response)
}
Response::Response(const Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      error_(from.error_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  clear_has_response();
  switch (from.response_case()) {
    case kCreateGame: {
      mutable_create_game()->::SC2APIProtocol::ResponseCreateGame::MergeFrom(from.create_game());
      break;
    }
    case kJoinGame: {
      mutable_join_game()->::SC2APIProtocol::ResponseJoinGame::MergeFrom(from.join_game());
      break;
    }
    case kRestartGame: {
      mutable_restart_game()->::SC2APIProtocol::ResponseRestartGame::MergeFrom(from.restart_game());
      break;
    }
    case kStartReplay: {
      mutable_start_replay()->::SC2APIProtocol::ResponseStartReplay::MergeFrom(from.start_replay());
      break;
    }
    case kLeaveGame: {
      mutable_leave_game()->::SC2APIProtocol::ResponseLeaveGame::MergeFrom(from.leave_game());
      break;
    }
    case kQuickSave: {
      mutable_quick_save()->::SC2APIProtocol::ResponseQuickSave::MergeFrom(from.quick_save());
      break;
    }
    case kQuickLoad: {
      mutable_quick_load()->::SC2APIProtocol::ResponseQuickLoad::MergeFrom(from.quick_load());
      break;
    }
    case kQuit: {
      mutable_quit()->::SC2APIProtocol::ResponseQuit::MergeFrom(from.quit());
      break;
    }
    case kGameInfo: {
      mutable_game_info()->::SC2APIProtocol::ResponseGameInfo::MergeFrom(from.game_info());
      break;
    }
    case kObservation: {
      mutable_observation()->::SC2APIProtocol::ResponseObservation::MergeFrom(from.observation());
      break;
    }
    case kAction: {
      mutable_action()->::SC2APIProtocol::ResponseAction::MergeFrom(from.action());
      break;
    }
    case kObsAction: {
      mutable_obs_action()->::SC2APIProtocol::ResponseObserverAction::MergeFrom(from.obs_action());
      break;
    }
    case kStep: {
      mutable_step()->::SC2APIProtocol::ResponseStep::MergeFrom(from.step());
      break;
    }
    case kData: {
      mutable_data()->::SC2APIProtocol::ResponseData::MergeFrom(from.data());
      break;
    }
    case kQuery: {
      mutable_query()->::SC2APIProtocol::ResponseQuery::MergeFrom(from.query());
      break;
    }
    case kSaveReplay: {
      mutable_save_replay()->::SC2APIProtocol::ResponseSaveReplay::MergeFrom(from.save_replay());
      break;
    }
    case kReplayInfo: {
      mutable_replay_info()->::SC2APIProtocol::ResponseReplayInfo::MergeFrom(from.replay_info());
      break;
    }
    case kAvailableMaps: {
      mutable_available_maps()->::SC2APIProtocol::ResponseAvailableMaps::MergeFrom(from.available_maps());
      break;
    }
    case kSaveMap: {
      mutable_save_map()->::SC2APIProtocol::ResponseSaveMap::MergeFrom(from.save_map());
      break;
    }
    case kPing: {
      mutable_ping()->::SC2APIProtocol::ResponsePing::MergeFrom(from.ping());
      break;
    }
    case kDebug: {
      mutable_debug()->::SC2APIProtocol::ResponseDebug::MergeFrom(from.debug());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Response)
}

void Response::SharedCtor() {
  status_ = 1;
  clear_has_response();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (has_response()) {
    clear_response();
  }
}

void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Response& Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_Response.base);
  return *internal_default_instance();
}


void Response::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.Response)
  switch (response_case()) {
    case kCreateGame: {
      delete response_.create_game_;
      break;
    }
    case kJoinGame: {
      delete response_.join_game_;
      break;
    }
    case kRestartGame: {
      delete response_.restart_game_;
      break;
    }
    case kStartReplay: {
      delete response_.start_replay_;
      break;
    }
    case kLeaveGame: {
      delete response_.leave_game_;
      break;
    }
    case kQuickSave: {
      delete response_.quick_save_;
      break;
    }
    case kQuickLoad: {
      delete response_.quick_load_;
      break;
    }
    case kQuit: {
      delete response_.quit_;
      break;
    }
    case kGameInfo: {
      delete response_.game_info_;
      break;
    }
    case kObservation: {
      delete response_.observation_;
      break;
    }
    case kAction: {
      delete response_.action_;
      break;
    }
    case kObsAction: {
      delete response_.obs_action_;
      break;
    }
    case kStep: {
      delete response_.step_;
      break;
    }
    case kData: {
      delete response_.data_;
      break;
    }
    case kQuery: {
      delete response_.query_;
      break;
    }
    case kSaveReplay: {
      delete response_.save_replay_;
      break;
    }
    case kReplayInfo: {
      delete response_.replay_info_;
      break;
    }
    case kAvailableMaps: {
      delete response_.available_maps_;
      break;
    }
    case kSaveMap: {
      delete response_.save_map_;
      break;
    }
    case kPing: {
      delete response_.ping_;
      break;
    }
    case kDebug: {
      delete response_.debug_;
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.Clear();
  status_ = 1;
  clear_response();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ResponseCreateGame create_game = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ResponseJoinGame join_game = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_join_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ResponseRestartGame restart_game = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_restart_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ResponseStartReplay start_replay = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_replay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ResponseLeaveGame leave_game = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_leave_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ResponseQuickSave quick_save = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quick_save()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ResponseQuickLoad quick_load = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quick_load()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ResponseQuit quit = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_quit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ResponseGameInfo game_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_game_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ResponseObservation observation = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_observation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ResponseAction action = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ResponseStep step = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_step()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ResponseData data = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ResponseQuery query = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ResponseSaveReplay save_replay = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_save_replay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ResponseReplayInfo replay_info = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_replay_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ResponseAvailableMaps available_maps = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_available_maps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ResponseSaveMap save_map = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_save_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ResponsePing ping = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ping()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ResponseDebug debug = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ResponseObserverAction obs_action = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_obs_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string error = 98;
      case 98: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 786 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error(this->error_size() - 1).data(),
            static_cast<int>(this->error(this->error_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.Response.error");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.Status status = 99;
      case 99: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 792 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Status_IsValid(value)) {
            set_status(static_cast< ::SC2APIProtocol::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                99, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (response_case()) {
    case kCreateGame:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_create_game(), output);
      break;
    case kJoinGame:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_join_game(), output);
      break;
    case kRestartGame:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_restart_game(), output);
      break;
    case kStartReplay:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_start_replay(), output);
      break;
    case kLeaveGame:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, this->_internal_leave_game(), output);
      break;
    case kQuickSave:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, this->_internal_quick_save(), output);
      break;
    case kQuickLoad:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, this->_internal_quick_load(), output);
      break;
    case kQuit:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, this->_internal_quit(), output);
      break;
    case kGameInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, this->_internal_game_info(), output);
      break;
    case kObservation:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, this->_internal_observation(), output);
      break;
    case kAction:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, this->_internal_action(), output);
      break;
    case kStep:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, this->_internal_step(), output);
      break;
    case kData:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, this->_internal_data(), output);
      break;
    case kQuery:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        14, this->_internal_query(), output);
      break;
    case kSaveReplay:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        15, this->_internal_save_replay(), output);
      break;
    case kReplayInfo:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        16, this->_internal_replay_info(), output);
      break;
    case kAvailableMaps:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        17, this->_internal_available_maps(), output);
      break;
    case kSaveMap:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        18, this->_internal_save_map(), output);
      break;
    case kPing:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        19, this->_internal_ping(), output);
      break;
    case kDebug:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        20, this->_internal_debug(), output);
      break;
    case kObsAction:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        21, this->_internal_obs_action(), output);
      break;
    default: ;
  }
  // repeated string error = 98;
  for (int i = 0, n = this->error_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error(i).data(), static_cast<int>(this->error(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.Response.error");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      98, this->error(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.Status status = 99;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      99, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (response_case()) {
    case kCreateGame:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, this->_internal_create_game(), deterministic, target);
      break;
    case kJoinGame:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_join_game(), deterministic, target);
      break;
    case kRestartGame:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_restart_game(), deterministic, target);
      break;
    case kStartReplay:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_start_replay(), deterministic, target);
      break;
    case kLeaveGame:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, this->_internal_leave_game(), deterministic, target);
      break;
    case kQuickSave:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, this->_internal_quick_save(), deterministic, target);
      break;
    case kQuickLoad:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, this->_internal_quick_load(), deterministic, target);
      break;
    case kQuit:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          8, this->_internal_quit(), deterministic, target);
      break;
    case kGameInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          9, this->_internal_game_info(), deterministic, target);
      break;
    case kObservation:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          10, this->_internal_observation(), deterministic, target);
      break;
    case kAction:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          11, this->_internal_action(), deterministic, target);
      break;
    case kStep:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          12, this->_internal_step(), deterministic, target);
      break;
    case kData:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          13, this->_internal_data(), deterministic, target);
      break;
    case kQuery:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          14, this->_internal_query(), deterministic, target);
      break;
    case kSaveReplay:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          15, this->_internal_save_replay(), deterministic, target);
      break;
    case kReplayInfo:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          16, this->_internal_replay_info(), deterministic, target);
      break;
    case kAvailableMaps:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          17, this->_internal_available_maps(), deterministic, target);
      break;
    case kSaveMap:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          18, this->_internal_save_map(), deterministic, target);
      break;
    case kPing:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          19, this->_internal_ping(), deterministic, target);
      break;
    case kDebug:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          20, this->_internal_debug(), deterministic, target);
      break;
    case kObsAction:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          21, this->_internal_obs_action(), deterministic, target);
      break;
    default: ;
  }
  // repeated string error = 98;
  for (int i = 0, n = this->error_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error(i).data(), static_cast<int>(this->error(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.Response.error");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(98, this->error(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.Status status = 99;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      99, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string error = 98;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->error_size());
  for (int i = 0, n = this->error_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->error(i));
  }

  // optional .SC2APIProtocol.Status status = 99;
  if (has_status()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  switch (response_case()) {
    // optional .SC2APIProtocol.ResponseCreateGame create_game = 1;
    case kCreateGame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.create_game_);
      break;
    }
    // optional .SC2APIProtocol.ResponseJoinGame join_game = 2;
    case kJoinGame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.join_game_);
      break;
    }
    // optional .SC2APIProtocol.ResponseRestartGame restart_game = 3;
    case kRestartGame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.restart_game_);
      break;
    }
    // optional .SC2APIProtocol.ResponseStartReplay start_replay = 4;
    case kStartReplay: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.start_replay_);
      break;
    }
    // optional .SC2APIProtocol.ResponseLeaveGame leave_game = 5;
    case kLeaveGame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.leave_game_);
      break;
    }
    // optional .SC2APIProtocol.ResponseQuickSave quick_save = 6;
    case kQuickSave: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.quick_save_);
      break;
    }
    // optional .SC2APIProtocol.ResponseQuickLoad quick_load = 7;
    case kQuickLoad: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.quick_load_);
      break;
    }
    // optional .SC2APIProtocol.ResponseQuit quit = 8;
    case kQuit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.quit_);
      break;
    }
    // optional .SC2APIProtocol.ResponseGameInfo game_info = 9;
    case kGameInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.game_info_);
      break;
    }
    // optional .SC2APIProtocol.ResponseObservation observation = 10;
    case kObservation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.observation_);
      break;
    }
    // optional .SC2APIProtocol.ResponseAction action = 11;
    case kAction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.action_);
      break;
    }
    // optional .SC2APIProtocol.ResponseObserverAction obs_action = 21;
    case kObsAction: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.obs_action_);
      break;
    }
    // optional .SC2APIProtocol.ResponseStep step = 12;
    case kStep: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.step_);
      break;
    }
    // optional .SC2APIProtocol.ResponseData data = 13;
    case kData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.data_);
      break;
    }
    // optional .SC2APIProtocol.ResponseQuery query = 14;
    case kQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.query_);
      break;
    }
    // optional .SC2APIProtocol.ResponseSaveReplay save_replay = 15;
    case kSaveReplay: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.save_replay_);
      break;
    }
    // optional .SC2APIProtocol.ResponseReplayInfo replay_info = 16;
    case kReplayInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.replay_info_);
      break;
    }
    // optional .SC2APIProtocol.ResponseAvailableMaps available_maps = 17;
    case kAvailableMaps: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.available_maps_);
      break;
    }
    // optional .SC2APIProtocol.ResponseSaveMap save_map = 18;
    case kSaveMap: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.save_map_);
      break;
    }
    // optional .SC2APIProtocol.ResponsePing ping = 19;
    case kPing: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.ping_);
      break;
    }
    // optional .SC2APIProtocol.ResponseDebug debug = 20;
    case kDebug: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_.debug_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  error_.MergeFrom(from.error_);
  if (from.has_status()) {
    set_status(from.status());
  }
  switch (from.response_case()) {
    case kCreateGame: {
      mutable_create_game()->::SC2APIProtocol::ResponseCreateGame::MergeFrom(from.create_game());
      break;
    }
    case kJoinGame: {
      mutable_join_game()->::SC2APIProtocol::ResponseJoinGame::MergeFrom(from.join_game());
      break;
    }
    case kRestartGame: {
      mutable_restart_game()->::SC2APIProtocol::ResponseRestartGame::MergeFrom(from.restart_game());
      break;
    }
    case kStartReplay: {
      mutable_start_replay()->::SC2APIProtocol::ResponseStartReplay::MergeFrom(from.start_replay());
      break;
    }
    case kLeaveGame: {
      mutable_leave_game()->::SC2APIProtocol::ResponseLeaveGame::MergeFrom(from.leave_game());
      break;
    }
    case kQuickSave: {
      mutable_quick_save()->::SC2APIProtocol::ResponseQuickSave::MergeFrom(from.quick_save());
      break;
    }
    case kQuickLoad: {
      mutable_quick_load()->::SC2APIProtocol::ResponseQuickLoad::MergeFrom(from.quick_load());
      break;
    }
    case kQuit: {
      mutable_quit()->::SC2APIProtocol::ResponseQuit::MergeFrom(from.quit());
      break;
    }
    case kGameInfo: {
      mutable_game_info()->::SC2APIProtocol::ResponseGameInfo::MergeFrom(from.game_info());
      break;
    }
    case kObservation: {
      mutable_observation()->::SC2APIProtocol::ResponseObservation::MergeFrom(from.observation());
      break;
    }
    case kAction: {
      mutable_action()->::SC2APIProtocol::ResponseAction::MergeFrom(from.action());
      break;
    }
    case kObsAction: {
      mutable_obs_action()->::SC2APIProtocol::ResponseObserverAction::MergeFrom(from.obs_action());
      break;
    }
    case kStep: {
      mutable_step()->::SC2APIProtocol::ResponseStep::MergeFrom(from.step());
      break;
    }
    case kData: {
      mutable_data()->::SC2APIProtocol::ResponseData::MergeFrom(from.data());
      break;
    }
    case kQuery: {
      mutable_query()->::SC2APIProtocol::ResponseQuery::MergeFrom(from.query());
      break;
    }
    case kSaveReplay: {
      mutable_save_replay()->::SC2APIProtocol::ResponseSaveReplay::MergeFrom(from.save_replay());
      break;
    }
    case kReplayInfo: {
      mutable_replay_info()->::SC2APIProtocol::ResponseReplayInfo::MergeFrom(from.replay_info());
      break;
    }
    case kAvailableMaps: {
      mutable_available_maps()->::SC2APIProtocol::ResponseAvailableMaps::MergeFrom(from.available_maps());
      break;
    }
    case kSaveMap: {
      mutable_save_map()->::SC2APIProtocol::ResponseSaveMap::MergeFrom(from.save_map());
      break;
    }
    case kPing: {
      mutable_ping()->::SC2APIProtocol::ResponsePing::MergeFrom(from.ping());
      break;
    }
    case kDebug: {
      mutable_debug()->::SC2APIProtocol::ResponseDebug::MergeFrom(from.debug());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  using std::swap;
  error_.InternalSwap(CastToBase(&other->error_));
  swap(status_, other->status_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestCreateGame::InitAsDefaultInstance() {
  ::SC2APIProtocol::_RequestCreateGame_default_instance_.local_map_ = const_cast< ::SC2APIProtocol::LocalMap*>(
      ::SC2APIProtocol::LocalMap::internal_default_instance());
  ::SC2APIProtocol::_RequestCreateGame_default_instance_.battlenet_map_name_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RequestCreateGame::set_allocated_local_map(::SC2APIProtocol::LocalMap* local_map) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_Map();
  if (local_map) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      local_map = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, local_map, submessage_arena);
    }
    set_has_local_map();
    Map_.local_map_ = local_map;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RequestCreateGame.local_map)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestCreateGame::kLocalMapFieldNumber;
const int RequestCreateGame::kBattlenetMapNameFieldNumber;
const int RequestCreateGame::kPlayerSetupFieldNumber;
const int RequestCreateGame::kDisableFogFieldNumber;
const int RequestCreateGame::kRandomSeedFieldNumber;
const int RequestCreateGame::kRealtimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestCreateGame::RequestCreateGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestCreateGame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestCreateGame)
}
RequestCreateGame::RequestCreateGame(const RequestCreateGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      player_setup_(from.player_setup_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&random_seed_, &from.random_seed_,
    static_cast<size_t>(reinterpret_cast<char*>(&realtime_) -
    reinterpret_cast<char*>(&random_seed_)) + sizeof(realtime_));
  clear_has_Map();
  switch (from.Map_case()) {
    case kLocalMap: {
      mutable_local_map()->::SC2APIProtocol::LocalMap::MergeFrom(from.local_map());
      break;
    }
    case kBattlenetMapName: {
      set_battlenet_map_name(from.battlenet_map_name());
      break;
    }
    case MAP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestCreateGame)
}

void RequestCreateGame::SharedCtor() {
  ::memset(&random_seed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&realtime_) -
      reinterpret_cast<char*>(&random_seed_)) + sizeof(realtime_));
  clear_has_Map();
}

RequestCreateGame::~RequestCreateGame() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestCreateGame)
  SharedDtor();
}

void RequestCreateGame::SharedDtor() {
  if (has_Map()) {
    clear_Map();
  }
}

void RequestCreateGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestCreateGame::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestCreateGame& RequestCreateGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestCreateGame.base);
  return *internal_default_instance();
}


void RequestCreateGame::clear_Map() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.RequestCreateGame)
  switch (Map_case()) {
    case kLocalMap: {
      delete Map_.local_map_;
      break;
    }
    case kBattlenetMapName: {
      Map_.battlenet_map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case MAP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MAP_NOT_SET;
}


void RequestCreateGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestCreateGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_setup_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&random_seed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&realtime_) -
        reinterpret_cast<char*>(&random_seed_)) + sizeof(realtime_));
  }
  clear_Map();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestCreateGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestCreateGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.LocalMap local_map = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string battlenet_map_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battlenet_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->battlenet_map_name().data(), static_cast<int>(this->battlenet_map_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.RequestCreateGame.battlenet_map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SC2APIProtocol.PlayerSetup player_setup = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_player_setup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disable_fog = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_disable_fog();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_fog_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 random_seed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_random_seed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &random_seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool realtime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_realtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &realtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestCreateGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestCreateGame)
  return false;
#undef DO_
}

void RequestCreateGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestCreateGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (Map_case()) {
    case kLocalMap:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_local_map(), output);
      break;
    case kBattlenetMapName:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->battlenet_map_name().data(), static_cast<int>(this->battlenet_map_name().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "SC2APIProtocol.RequestCreateGame.battlenet_map_name");
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        2, this->battlenet_map_name(), output);
      break;
    default: ;
  }
  // repeated .SC2APIProtocol.PlayerSetup player_setup = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_setup_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->player_setup(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool disable_fog = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->disable_fog(), output);
  }

  // optional uint32 random_seed = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->random_seed(), output);
  }

  // optional bool realtime = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->realtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestCreateGame)
}

::google::protobuf::uint8* RequestCreateGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestCreateGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (Map_case()) {
    case kLocalMap:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, this->_internal_local_map(), deterministic, target);
      break;
    case kBattlenetMapName:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->battlenet_map_name().data(), static_cast<int>(this->battlenet_map_name().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "SC2APIProtocol.RequestCreateGame.battlenet_map_name");
      target =
        ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
          2, this->battlenet_map_name(), target);
      break;
    default: ;
  }
  // repeated .SC2APIProtocol.PlayerSetup player_setup = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_setup_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->player_setup(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool disable_fog = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->disable_fog(), target);
  }

  // optional uint32 random_seed = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->random_seed(), target);
  }

  // optional bool realtime = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->realtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestCreateGame)
  return target;
}

size_t RequestCreateGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestCreateGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SC2APIProtocol.PlayerSetup player_setup = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->player_setup_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_setup(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 random_seed = 5;
    if (has_random_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->random_seed());
    }

    // optional bool disable_fog = 4;
    if (has_disable_fog()) {
      total_size += 1 + 1;
    }

    // optional bool realtime = 6;
    if (has_realtime()) {
      total_size += 1 + 1;
    }

  }
  switch (Map_case()) {
    // optional .SC2APIProtocol.LocalMap local_map = 1;
    case kLocalMap: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *Map_.local_map_);
      break;
    }
    // optional string battlenet_map_name = 2;
    case kBattlenetMapName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battlenet_map_name());
      break;
    }
    case MAP_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestCreateGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestCreateGame)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestCreateGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestCreateGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestCreateGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestCreateGame)
    MergeFrom(*source);
  }
}

void RequestCreateGame::MergeFrom(const RequestCreateGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestCreateGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_setup_.MergeFrom(from.player_setup_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      random_seed_ = from.random_seed_;
    }
    if (cached_has_bits & 0x00000002u) {
      disable_fog_ = from.disable_fog_;
    }
    if (cached_has_bits & 0x00000004u) {
      realtime_ = from.realtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.Map_case()) {
    case kLocalMap: {
      mutable_local_map()->::SC2APIProtocol::LocalMap::MergeFrom(from.local_map());
      break;
    }
    case kBattlenetMapName: {
      set_battlenet_map_name(from.battlenet_map_name());
      break;
    }
    case MAP_NOT_SET: {
      break;
    }
  }
}

void RequestCreateGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestCreateGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCreateGame::CopyFrom(const RequestCreateGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestCreateGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCreateGame::IsInitialized() const {
  return true;
}

void RequestCreateGame::Swap(RequestCreateGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestCreateGame::InternalSwap(RequestCreateGame* other) {
  using std::swap;
  CastToBase(&player_setup_)->InternalSwap(CastToBase(&other->player_setup_));
  swap(random_seed_, other->random_seed_);
  swap(disable_fog_, other->disable_fog_);
  swap(realtime_, other->realtime_);
  swap(Map_, other->Map_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestCreateGame::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LocalMap::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalMap::kMapPathFieldNumber;
const int LocalMap::kMapDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalMap::LocalMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_LocalMap.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.LocalMap)
}
LocalMap::LocalMap(const LocalMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_path()) {
    map_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_path_);
  }
  map_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_data()) {
    map_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_data_);
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.LocalMap)
}

void LocalMap::SharedCtor() {
  map_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LocalMap::~LocalMap() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.LocalMap)
  SharedDtor();
}

void LocalMap::SharedDtor() {
  map_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LocalMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LocalMap::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocalMap& LocalMap::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_LocalMap.base);
  return *internal_default_instance();
}


void LocalMap::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.LocalMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      map_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      map_data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocalMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.LocalMap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string map_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_path().data(), static_cast<int>(this->map_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.LocalMap.map_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes map_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.LocalMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.LocalMap)
  return false;
#undef DO_
}

void LocalMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.LocalMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string map_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_path().data(), static_cast<int>(this->map_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.LocalMap.map_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->map_path(), output);
  }

  // optional bytes map_data = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->map_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.LocalMap)
}

::google::protobuf::uint8* LocalMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.LocalMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string map_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_path().data(), static_cast<int>(this->map_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.LocalMap.map_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->map_path(), target);
  }

  // optional bytes map_data = 7;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->map_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.LocalMap)
  return target;
}

size_t LocalMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.LocalMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string map_path = 1;
    if (has_map_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_path());
    }

    // optional bytes map_data = 7;
    if (has_map_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_data());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.LocalMap)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.LocalMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.LocalMap)
    MergeFrom(*source);
  }
}

void LocalMap::MergeFrom(const LocalMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.LocalMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_map_path();
      map_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_path_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_map_data();
      map_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_data_);
    }
  }
}

void LocalMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.LocalMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalMap::CopyFrom(const LocalMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.LocalMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalMap::IsInitialized() const {
  return true;
}

void LocalMap::Swap(LocalMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalMap::InternalSwap(LocalMap* other) {
  using std::swap;
  map_path_.Swap(&other->map_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  map_data_.Swap(&other->map_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LocalMap::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseCreateGame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseCreateGame::kErrorFieldNumber;
const int ResponseCreateGame::kErrorDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseCreateGame::ResponseCreateGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseCreateGame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseCreateGame)
}
ResponseCreateGame::ResponseCreateGame(const ResponseCreateGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_details()) {
    error_details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_details_);
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseCreateGame)
}

void ResponseCreateGame::SharedCtor() {
  error_details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = 1;
}

ResponseCreateGame::~ResponseCreateGame() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseCreateGame)
  SharedDtor();
}

void ResponseCreateGame::SharedDtor() {
  error_details_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseCreateGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseCreateGame::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseCreateGame& ResponseCreateGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseCreateGame.base);
  return *internal_default_instance();
}


void ResponseCreateGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseCreateGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      error_details_.ClearNonDefaultToEmptyNoArena();
    }
    error_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseCreateGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseCreateGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ResponseCreateGame.Error error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::ResponseCreateGame_Error_IsValid(value)) {
            set_error(static_cast< ::SC2APIProtocol::ResponseCreateGame_Error >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_details = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_details()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_details().data(), static_cast<int>(this->error_details().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseCreateGame.error_details");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseCreateGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseCreateGame)
  return false;
#undef DO_
}

void ResponseCreateGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseCreateGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.ResponseCreateGame.Error error = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }

  // optional string error_details = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_details().data(), static_cast<int>(this->error_details().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseCreateGame.error_details");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_details(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseCreateGame)
}

::google::protobuf::uint8* ResponseCreateGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseCreateGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.ResponseCreateGame.Error error = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error(), target);
  }

  // optional string error_details = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_details().data(), static_cast<int>(this->error_details().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseCreateGame.error_details");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_details(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseCreateGame)
  return target;
}

size_t ResponseCreateGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseCreateGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string error_details = 2;
    if (has_error_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_details());
    }

    // optional .SC2APIProtocol.ResponseCreateGame.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseCreateGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseCreateGame)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseCreateGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseCreateGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseCreateGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseCreateGame)
    MergeFrom(*source);
  }
}

void ResponseCreateGame::MergeFrom(const ResponseCreateGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseCreateGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_details();
      error_details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_details_);
    }
    if (cached_has_bits & 0x00000002u) {
      error_ = from.error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponseCreateGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseCreateGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseCreateGame::CopyFrom(const ResponseCreateGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseCreateGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCreateGame::IsInitialized() const {
  return true;
}

void ResponseCreateGame::Swap(ResponseCreateGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseCreateGame::InternalSwap(ResponseCreateGame* other) {
  using std::swap;
  error_details_.Swap(&other->error_details_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseCreateGame::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestJoinGame::InitAsDefaultInstance() {
  ::SC2APIProtocol::_RequestJoinGame_default_instance_.race_ = 0;
  ::SC2APIProtocol::_RequestJoinGame_default_instance_.observed_player_id_ = 0u;
  ::SC2APIProtocol::_RequestJoinGame_default_instance_._instance.get_mutable()->options_ = const_cast< ::SC2APIProtocol::InterfaceOptions*>(
      ::SC2APIProtocol::InterfaceOptions::internal_default_instance());
  ::SC2APIProtocol::_RequestJoinGame_default_instance_._instance.get_mutable()->server_ports_ = const_cast< ::SC2APIProtocol::PortSet*>(
      ::SC2APIProtocol::PortSet::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestJoinGame::kRaceFieldNumber;
const int RequestJoinGame::kObservedPlayerIdFieldNumber;
const int RequestJoinGame::kOptionsFieldNumber;
const int RequestJoinGame::kServerPortsFieldNumber;
const int RequestJoinGame::kClientPortsFieldNumber;
const int RequestJoinGame::kSharedPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestJoinGame::RequestJoinGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestJoinGame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestJoinGame)
}
RequestJoinGame::RequestJoinGame(const RequestJoinGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      client_ports_(from.client_ports_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_options()) {
    options_ = new ::SC2APIProtocol::InterfaceOptions(*from.options_);
  } else {
    options_ = NULL;
  }
  if (from.has_server_ports()) {
    server_ports_ = new ::SC2APIProtocol::PortSet(*from.server_ports_);
  } else {
    server_ports_ = NULL;
  }
  shared_port_ = from.shared_port_;
  clear_has_participation();
  switch (from.participation_case()) {
    case kRace: {
      set_race(from.race());
      break;
    }
    case kObservedPlayerId: {
      set_observed_player_id(from.observed_player_id());
      break;
    }
    case PARTICIPATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestJoinGame)
}

void RequestJoinGame::SharedCtor() {
  ::memset(&options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shared_port_) -
      reinterpret_cast<char*>(&options_)) + sizeof(shared_port_));
  clear_has_participation();
}

RequestJoinGame::~RequestJoinGame() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestJoinGame)
  SharedDtor();
}

void RequestJoinGame::SharedDtor() {
  if (this != internal_default_instance()) delete options_;
  if (this != internal_default_instance()) delete server_ports_;
  if (has_participation()) {
    clear_participation();
  }
}

void RequestJoinGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestJoinGame::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestJoinGame& RequestJoinGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestJoinGame.base);
  return *internal_default_instance();
}


void RequestJoinGame::clear_participation() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.RequestJoinGame)
  switch (participation_case()) {
    case kRace: {
      // No need to clear
      break;
    }
    case kObservedPlayerId: {
      // No need to clear
      break;
    }
    case PARTICIPATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARTICIPATION_NOT_SET;
}


void RequestJoinGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestJoinGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_ports_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(options_ != NULL);
      options_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(server_ports_ != NULL);
      server_ports_->Clear();
    }
  }
  shared_port_ = 0;
  clear_participation();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestJoinGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestJoinGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.Race race = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Race_IsValid(value)) {
            set_race(static_cast< ::SC2APIProtocol::Race >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 observed_player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_participation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &participation_.observed_player_id_)));
          set_has_observed_player_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.InterfaceOptions options = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.PortSet server_ports = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server_ports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SC2APIProtocol.PortSet client_ports = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_client_ports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 shared_port = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_shared_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shared_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestJoinGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestJoinGame)
  return false;
#undef DO_
}

void RequestJoinGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestJoinGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (participation_case()) {
    case kRace:
      ::google::protobuf::internal::WireFormatLite::WriteEnum(
        1, this->race(), output);
      break;
    case kObservedPlayerId:
      ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->observed_player_id(), output);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.InterfaceOptions options = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_options(), output);
  }

  // optional .SC2APIProtocol.PortSet server_ports = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_server_ports(), output);
  }

  // repeated .SC2APIProtocol.PortSet client_ports = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->client_ports_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->client_ports(static_cast<int>(i)),
      output);
  }

  // optional int32 shared_port = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->shared_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestJoinGame)
}

::google::protobuf::uint8* RequestJoinGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestJoinGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (participation_case()) {
    case kRace:
      target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
        1, this->race(), target);
      break;
    case kObservedPlayerId:
      target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->observed_player_id(), target);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.InterfaceOptions options = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_options(), deterministic, target);
  }

  // optional .SC2APIProtocol.PortSet server_ports = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_server_ports(), deterministic, target);
  }

  // repeated .SC2APIProtocol.PortSet client_ports = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->client_ports_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->client_ports(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 shared_port = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->shared_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestJoinGame)
  return target;
}

size_t RequestJoinGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestJoinGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SC2APIProtocol.PortSet client_ports = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->client_ports_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->client_ports(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .SC2APIProtocol.InterfaceOptions options = 3;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional .SC2APIProtocol.PortSet server_ports = 4;
    if (has_server_ports()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_ports_);
    }

    // optional int32 shared_port = 6;
    if (has_shared_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shared_port());
    }

  }
  switch (participation_case()) {
    // optional .SC2APIProtocol.Race race = 1;
    case kRace: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->race());
      break;
    }
    // optional uint32 observed_player_id = 2;
    case kObservedPlayerId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->observed_player_id());
      break;
    }
    case PARTICIPATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestJoinGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestJoinGame)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestJoinGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestJoinGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestJoinGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestJoinGame)
    MergeFrom(*source);
  }
}

void RequestJoinGame::MergeFrom(const RequestJoinGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestJoinGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  client_ports_.MergeFrom(from.client_ports_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_options()->::SC2APIProtocol::InterfaceOptions::MergeFrom(from.options());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_server_ports()->::SC2APIProtocol::PortSet::MergeFrom(from.server_ports());
    }
    if (cached_has_bits & 0x00000004u) {
      shared_port_ = from.shared_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.participation_case()) {
    case kRace: {
      set_race(from.race());
      break;
    }
    case kObservedPlayerId: {
      set_observed_player_id(from.observed_player_id());
      break;
    }
    case PARTICIPATION_NOT_SET: {
      break;
    }
  }
}

void RequestJoinGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestJoinGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestJoinGame::CopyFrom(const RequestJoinGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestJoinGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestJoinGame::IsInitialized() const {
  return true;
}

void RequestJoinGame::Swap(RequestJoinGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestJoinGame::InternalSwap(RequestJoinGame* other) {
  using std::swap;
  CastToBase(&client_ports_)->InternalSwap(CastToBase(&other->client_ports_));
  swap(options_, other->options_);
  swap(server_ports_, other->server_ports_);
  swap(shared_port_, other->shared_port_);
  swap(participation_, other->participation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestJoinGame::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PortSet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PortSet::kGamePortFieldNumber;
const int PortSet::kBasePortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PortSet::PortSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_PortSet.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.PortSet)
}
PortSet::PortSet(const PortSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_port_, &from.game_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&base_port_) -
    reinterpret_cast<char*>(&game_port_)) + sizeof(base_port_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.PortSet)
}

void PortSet::SharedCtor() {
  ::memset(&game_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&base_port_) -
      reinterpret_cast<char*>(&game_port_)) + sizeof(base_port_));
}

PortSet::~PortSet() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.PortSet)
  SharedDtor();
}

void PortSet::SharedDtor() {
}

void PortSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PortSet::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PortSet& PortSet::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_PortSet.base);
  return *internal_default_instance();
}


void PortSet::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.PortSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&game_port_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&base_port_) -
        reinterpret_cast<char*>(&game_port_)) + sizeof(base_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PortSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.PortSet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 game_port = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_game_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 base_port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_base_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.PortSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.PortSet)
  return false;
#undef DO_
}

void PortSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.PortSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 game_port = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_port(), output);
  }

  // optional int32 base_port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->base_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.PortSet)
}

::google::protobuf::uint8* PortSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.PortSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 game_port = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_port(), target);
  }

  // optional int32 base_port = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->base_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.PortSet)
  return target;
}

size_t PortSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.PortSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 game_port = 1;
    if (has_game_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_port());
    }

    // optional int32 base_port = 2;
    if (has_base_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PortSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.PortSet)
  GOOGLE_DCHECK_NE(&from, this);
  const PortSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PortSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.PortSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.PortSet)
    MergeFrom(*source);
  }
}

void PortSet::MergeFrom(const PortSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.PortSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      game_port_ = from.game_port_;
    }
    if (cached_has_bits & 0x00000002u) {
      base_port_ = from.base_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PortSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.PortSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortSet::CopyFrom(const PortSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.PortSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortSet::IsInitialized() const {
  return true;
}

void PortSet::Swap(PortSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PortSet::InternalSwap(PortSet* other) {
  using std::swap;
  swap(game_port_, other->game_port_);
  swap(base_port_, other->base_port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PortSet::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseJoinGame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseJoinGame::kPlayerIdFieldNumber;
const int ResponseJoinGame::kErrorFieldNumber;
const int ResponseJoinGame::kErrorDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseJoinGame::ResponseJoinGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseJoinGame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseJoinGame)
}
ResponseJoinGame::ResponseJoinGame(const ResponseJoinGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_details()) {
    error_details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_details_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseJoinGame)
}

void ResponseJoinGame::SharedCtor() {
  error_details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_id_ = 0u;
  error_ = 1;
}

ResponseJoinGame::~ResponseJoinGame() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseJoinGame)
  SharedDtor();
}

void ResponseJoinGame::SharedDtor() {
  error_details_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseJoinGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseJoinGame::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseJoinGame& ResponseJoinGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseJoinGame.base);
  return *internal_default_instance();
}


void ResponseJoinGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseJoinGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_details_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    player_id_ = 0u;
    error_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseJoinGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseJoinGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ResponseJoinGame.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::ResponseJoinGame_Error_IsValid(value)) {
            set_error(static_cast< ::SC2APIProtocol::ResponseJoinGame_Error >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_details = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_details()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_details().data(), static_cast<int>(this->error_details().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseJoinGame.error_details");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseJoinGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseJoinGame)
  return false;
#undef DO_
}

void ResponseJoinGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseJoinGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional .SC2APIProtocol.ResponseJoinGame.Error error = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error(), output);
  }

  // optional string error_details = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_details().data(), static_cast<int>(this->error_details().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseJoinGame.error_details");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_details(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseJoinGame)
}

::google::protobuf::uint8* ResponseJoinGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseJoinGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional .SC2APIProtocol.ResponseJoinGame.Error error = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error(), target);
  }

  // optional string error_details = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_details().data(), static_cast<int>(this->error_details().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseJoinGame.error_details");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_details(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseJoinGame)
  return target;
}

size_t ResponseJoinGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseJoinGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string error_details = 3;
    if (has_error_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_details());
    }

    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional .SC2APIProtocol.ResponseJoinGame.Error error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseJoinGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseJoinGame)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseJoinGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseJoinGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseJoinGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseJoinGame)
    MergeFrom(*source);
  }
}

void ResponseJoinGame::MergeFrom(const ResponseJoinGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseJoinGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_details();
      error_details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_details_);
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      error_ = from.error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponseJoinGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseJoinGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseJoinGame::CopyFrom(const ResponseJoinGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseJoinGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseJoinGame::IsInitialized() const {
  return true;
}

void ResponseJoinGame::Swap(ResponseJoinGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseJoinGame::InternalSwap(ResponseJoinGame* other) {
  using std::swap;
  error_details_.Swap(&other->error_details_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(error_, other->error_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseJoinGame::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestRestartGame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestRestartGame::RequestRestartGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestRestartGame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestRestartGame)
}
RequestRestartGame::RequestRestartGame(const RequestRestartGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestRestartGame)
}

void RequestRestartGame::SharedCtor() {
}

RequestRestartGame::~RequestRestartGame() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestRestartGame)
  SharedDtor();
}

void RequestRestartGame::SharedDtor() {
}

void RequestRestartGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestRestartGame::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestRestartGame& RequestRestartGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestRestartGame.base);
  return *internal_default_instance();
}


void RequestRestartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestRestartGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestRestartGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestRestartGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestRestartGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestRestartGame)
  return false;
#undef DO_
}

void RequestRestartGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestRestartGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestRestartGame)
}

::google::protobuf::uint8* RequestRestartGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestRestartGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestRestartGame)
  return target;
}

size_t RequestRestartGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestRestartGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestRestartGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestRestartGame)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestRestartGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestRestartGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestRestartGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestRestartGame)
    MergeFrom(*source);
  }
}

void RequestRestartGame::MergeFrom(const RequestRestartGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestRestartGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RequestRestartGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestRestartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRestartGame::CopyFrom(const RequestRestartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestRestartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRestartGame::IsInitialized() const {
  return true;
}

void RequestRestartGame::Swap(RequestRestartGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestRestartGame::InternalSwap(RequestRestartGame* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestRestartGame::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseRestartGame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseRestartGame::kErrorFieldNumber;
const int ResponseRestartGame::kErrorDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseRestartGame::ResponseRestartGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseRestartGame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseRestartGame)
}
ResponseRestartGame::ResponseRestartGame(const ResponseRestartGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_details()) {
    error_details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_details_);
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseRestartGame)
}

void ResponseRestartGame::SharedCtor() {
  error_details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = 1;
}

ResponseRestartGame::~ResponseRestartGame() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseRestartGame)
  SharedDtor();
}

void ResponseRestartGame::SharedDtor() {
  error_details_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseRestartGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseRestartGame::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseRestartGame& ResponseRestartGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseRestartGame.base);
  return *internal_default_instance();
}


void ResponseRestartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseRestartGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      error_details_.ClearNonDefaultToEmptyNoArena();
    }
    error_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseRestartGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseRestartGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ResponseRestartGame.Error error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::ResponseRestartGame_Error_IsValid(value)) {
            set_error(static_cast< ::SC2APIProtocol::ResponseRestartGame_Error >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_details = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_details()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_details().data(), static_cast<int>(this->error_details().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseRestartGame.error_details");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseRestartGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseRestartGame)
  return false;
#undef DO_
}

void ResponseRestartGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseRestartGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.ResponseRestartGame.Error error = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }

  // optional string error_details = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_details().data(), static_cast<int>(this->error_details().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseRestartGame.error_details");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_details(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseRestartGame)
}

::google::protobuf::uint8* ResponseRestartGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseRestartGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.ResponseRestartGame.Error error = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error(), target);
  }

  // optional string error_details = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_details().data(), static_cast<int>(this->error_details().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseRestartGame.error_details");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_details(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseRestartGame)
  return target;
}

size_t ResponseRestartGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseRestartGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string error_details = 2;
    if (has_error_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_details());
    }

    // optional .SC2APIProtocol.ResponseRestartGame.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseRestartGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseRestartGame)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseRestartGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseRestartGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseRestartGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseRestartGame)
    MergeFrom(*source);
  }
}

void ResponseRestartGame::MergeFrom(const ResponseRestartGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseRestartGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_details();
      error_details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_details_);
    }
    if (cached_has_bits & 0x00000002u) {
      error_ = from.error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponseRestartGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseRestartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseRestartGame::CopyFrom(const ResponseRestartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseRestartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRestartGame::IsInitialized() const {
  return true;
}

void ResponseRestartGame::Swap(ResponseRestartGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseRestartGame::InternalSwap(ResponseRestartGame* other) {
  using std::swap;
  error_details_.Swap(&other->error_details_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseRestartGame::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestStartReplay::InitAsDefaultInstance() {
  ::SC2APIProtocol::_RequestStartReplay_default_instance_.replay_path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::SC2APIProtocol::_RequestStartReplay_default_instance_.replay_data_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::SC2APIProtocol::_RequestStartReplay_default_instance_._instance.get_mutable()->options_ = const_cast< ::SC2APIProtocol::InterfaceOptions*>(
      ::SC2APIProtocol::InterfaceOptions::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestStartReplay::kReplayPathFieldNumber;
const int RequestStartReplay::kReplayDataFieldNumber;
const int RequestStartReplay::kMapDataFieldNumber;
const int RequestStartReplay::kObservedPlayerIdFieldNumber;
const int RequestStartReplay::kOptionsFieldNumber;
const int RequestStartReplay::kDisableFogFieldNumber;
const int RequestStartReplay::kRealtimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestStartReplay::RequestStartReplay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestStartReplay.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestStartReplay)
}
RequestStartReplay::RequestStartReplay(const RequestStartReplay& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_data()) {
    map_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_data_);
  }
  if (from.has_options()) {
    options_ = new ::SC2APIProtocol::InterfaceOptions(*from.options_);
  } else {
    options_ = NULL;
  }
  ::memcpy(&observed_player_id_, &from.observed_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&realtime_) -
    reinterpret_cast<char*>(&observed_player_id_)) + sizeof(realtime_));
  clear_has_replay();
  switch (from.replay_case()) {
    case kReplayPath: {
      set_replay_path(from.replay_path());
      break;
    }
    case kReplayData: {
      set_replay_data(from.replay_data());
      break;
    }
    case REPLAY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestStartReplay)
}

void RequestStartReplay::SharedCtor() {
  map_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&realtime_) -
      reinterpret_cast<char*>(&options_)) + sizeof(realtime_));
  clear_has_replay();
}

RequestStartReplay::~RequestStartReplay() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestStartReplay)
  SharedDtor();
}

void RequestStartReplay::SharedDtor() {
  map_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
  if (has_replay()) {
    clear_replay();
  }
}

void RequestStartReplay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestStartReplay::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestStartReplay& RequestStartReplay::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestStartReplay.base);
  return *internal_default_instance();
}


void RequestStartReplay::clear_replay() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.RequestStartReplay)
  switch (replay_case()) {
    case kReplayPath: {
      replay_.replay_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kReplayData: {
      replay_.replay_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case REPLAY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REPLAY_NOT_SET;
}


void RequestStartReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestStartReplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      map_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(options_ != NULL);
      options_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&observed_player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&realtime_) -
        reinterpret_cast<char*>(&observed_player_id_)) + sizeof(realtime_));
  }
  clear_replay();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestStartReplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestStartReplay)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string replay_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replay_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->replay_path().data(), static_cast<int>(this->replay_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.RequestStartReplay.replay_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 observed_player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_observed_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &observed_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.InterfaceOptions options = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disable_fog = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_disable_fog();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_fog_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes replay_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_replay_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes map_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool realtime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_realtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &realtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestStartReplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestStartReplay)
  return false;
#undef DO_
}

void RequestStartReplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestStartReplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string replay_path = 1;
  if (has_replay_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replay_path().data(), static_cast<int>(this->replay_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.RequestStartReplay.replay_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->replay_path(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 observed_player_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->observed_player_id(), output);
  }

  // optional .SC2APIProtocol.InterfaceOptions options = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_options(), output);
  }

  // optional bool disable_fog = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->disable_fog(), output);
  }

  // optional bytes replay_data = 5;
  if (has_replay_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->replay_data(), output);
  }

  // optional bytes map_data = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->map_data(), output);
  }

  // optional bool realtime = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->realtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestStartReplay)
}

::google::protobuf::uint8* RequestStartReplay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestStartReplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string replay_path = 1;
  if (has_replay_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replay_path().data(), static_cast<int>(this->replay_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.RequestStartReplay.replay_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->replay_path(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 observed_player_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->observed_player_id(), target);
  }

  // optional .SC2APIProtocol.InterfaceOptions options = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_options(), deterministic, target);
  }

  // optional bool disable_fog = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->disable_fog(), target);
  }

  // optional bytes replay_data = 5;
  if (has_replay_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->replay_data(), target);
  }

  // optional bytes map_data = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->map_data(), target);
  }

  // optional bool realtime = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->realtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestStartReplay)
  return target;
}

size_t RequestStartReplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestStartReplay)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bytes map_data = 6;
    if (has_map_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_data());
    }

    // optional .SC2APIProtocol.InterfaceOptions options = 3;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional int32 observed_player_id = 2;
    if (has_observed_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->observed_player_id());
    }

    // optional bool disable_fog = 4;
    if (has_disable_fog()) {
      total_size += 1 + 1;
    }

    // optional bool realtime = 7;
    if (has_realtime()) {
      total_size += 1 + 1;
    }

  }
  switch (replay_case()) {
    // optional string replay_path = 1;
    case kReplayPath: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->replay_path());
      break;
    }
    // optional bytes replay_data = 5;
    case kReplayData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->replay_data());
      break;
    }
    case REPLAY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestStartReplay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestStartReplay)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestStartReplay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestStartReplay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestStartReplay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestStartReplay)
    MergeFrom(*source);
  }
}

void RequestStartReplay::MergeFrom(const RequestStartReplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestStartReplay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_map_data();
      map_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_options()->::SC2APIProtocol::InterfaceOptions::MergeFrom(from.options());
    }
    if (cached_has_bits & 0x00000004u) {
      observed_player_id_ = from.observed_player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      disable_fog_ = from.disable_fog_;
    }
    if (cached_has_bits & 0x00000010u) {
      realtime_ = from.realtime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.replay_case()) {
    case kReplayPath: {
      set_replay_path(from.replay_path());
      break;
    }
    case kReplayData: {
      set_replay_data(from.replay_data());
      break;
    }
    case REPLAY_NOT_SET: {
      break;
    }
  }
}

void RequestStartReplay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestStartReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestStartReplay::CopyFrom(const RequestStartReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestStartReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStartReplay::IsInitialized() const {
  return true;
}

void RequestStartReplay::Swap(RequestStartReplay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestStartReplay::InternalSwap(RequestStartReplay* other) {
  using std::swap;
  map_data_.Swap(&other->map_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(options_, other->options_);
  swap(observed_player_id_, other->observed_player_id_);
  swap(disable_fog_, other->disable_fog_);
  swap(realtime_, other->realtime_);
  swap(replay_, other->replay_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestStartReplay::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseStartReplay::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseStartReplay::kErrorFieldNumber;
const int ResponseStartReplay::kErrorDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseStartReplay::ResponseStartReplay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseStartReplay.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseStartReplay)
}
ResponseStartReplay::ResponseStartReplay(const ResponseStartReplay& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_details()) {
    error_details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_details_);
  }
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseStartReplay)
}

void ResponseStartReplay::SharedCtor() {
  error_details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = 1;
}

ResponseStartReplay::~ResponseStartReplay() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseStartReplay)
  SharedDtor();
}

void ResponseStartReplay::SharedDtor() {
  error_details_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseStartReplay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseStartReplay::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseStartReplay& ResponseStartReplay::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseStartReplay.base);
  return *internal_default_instance();
}


void ResponseStartReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseStartReplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      error_details_.ClearNonDefaultToEmptyNoArena();
    }
    error_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseStartReplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseStartReplay)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ResponseStartReplay.Error error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::ResponseStartReplay_Error_IsValid(value)) {
            set_error(static_cast< ::SC2APIProtocol::ResponseStartReplay_Error >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_details = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_details()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_details().data(), static_cast<int>(this->error_details().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseStartReplay.error_details");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseStartReplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseStartReplay)
  return false;
#undef DO_
}

void ResponseStartReplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseStartReplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.ResponseStartReplay.Error error = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }

  // optional string error_details = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_details().data(), static_cast<int>(this->error_details().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseStartReplay.error_details");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_details(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseStartReplay)
}

::google::protobuf::uint8* ResponseStartReplay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseStartReplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.ResponseStartReplay.Error error = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error(), target);
  }

  // optional string error_details = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_details().data(), static_cast<int>(this->error_details().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseStartReplay.error_details");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_details(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseStartReplay)
  return target;
}

size_t ResponseStartReplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseStartReplay)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string error_details = 2;
    if (has_error_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_details());
    }

    // optional .SC2APIProtocol.ResponseStartReplay.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseStartReplay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseStartReplay)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseStartReplay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseStartReplay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseStartReplay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseStartReplay)
    MergeFrom(*source);
  }
}

void ResponseStartReplay::MergeFrom(const ResponseStartReplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseStartReplay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_details();
      error_details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_details_);
    }
    if (cached_has_bits & 0x00000002u) {
      error_ = from.error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponseStartReplay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseStartReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseStartReplay::CopyFrom(const ResponseStartReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseStartReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseStartReplay::IsInitialized() const {
  return true;
}

void ResponseStartReplay::Swap(ResponseStartReplay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseStartReplay::InternalSwap(ResponseStartReplay* other) {
  using std::swap;
  error_details_.Swap(&other->error_details_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseStartReplay::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestLeaveGame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestLeaveGame::RequestLeaveGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestLeaveGame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestLeaveGame)
}
RequestLeaveGame::RequestLeaveGame(const RequestLeaveGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestLeaveGame)
}

void RequestLeaveGame::SharedCtor() {
}

RequestLeaveGame::~RequestLeaveGame() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestLeaveGame)
  SharedDtor();
}

void RequestLeaveGame::SharedDtor() {
}

void RequestLeaveGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestLeaveGame::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestLeaveGame& RequestLeaveGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestLeaveGame.base);
  return *internal_default_instance();
}


void RequestLeaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestLeaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestLeaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestLeaveGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestLeaveGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestLeaveGame)
  return false;
#undef DO_
}

void RequestLeaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestLeaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestLeaveGame)
}

::google::protobuf::uint8* RequestLeaveGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestLeaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestLeaveGame)
  return target;
}

size_t RequestLeaveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestLeaveGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestLeaveGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestLeaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestLeaveGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestLeaveGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestLeaveGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestLeaveGame)
    MergeFrom(*source);
  }
}

void RequestLeaveGame::MergeFrom(const RequestLeaveGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestLeaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RequestLeaveGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestLeaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestLeaveGame::CopyFrom(const RequestLeaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestLeaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLeaveGame::IsInitialized() const {
  return true;
}

void RequestLeaveGame::Swap(RequestLeaveGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestLeaveGame::InternalSwap(RequestLeaveGame* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestLeaveGame::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseLeaveGame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseLeaveGame::ResponseLeaveGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseLeaveGame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseLeaveGame)
}
ResponseLeaveGame::ResponseLeaveGame(const ResponseLeaveGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseLeaveGame)
}

void ResponseLeaveGame::SharedCtor() {
}

ResponseLeaveGame::~ResponseLeaveGame() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseLeaveGame)
  SharedDtor();
}

void ResponseLeaveGame::SharedDtor() {
}

void ResponseLeaveGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseLeaveGame::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseLeaveGame& ResponseLeaveGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseLeaveGame.base);
  return *internal_default_instance();
}


void ResponseLeaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseLeaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseLeaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseLeaveGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseLeaveGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseLeaveGame)
  return false;
#undef DO_
}

void ResponseLeaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseLeaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseLeaveGame)
}

::google::protobuf::uint8* ResponseLeaveGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseLeaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseLeaveGame)
  return target;
}

size_t ResponseLeaveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseLeaveGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseLeaveGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseLeaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseLeaveGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseLeaveGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseLeaveGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseLeaveGame)
    MergeFrom(*source);
  }
}

void ResponseLeaveGame::MergeFrom(const ResponseLeaveGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseLeaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResponseLeaveGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseLeaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseLeaveGame::CopyFrom(const ResponseLeaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseLeaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLeaveGame::IsInitialized() const {
  return true;
}

void ResponseLeaveGame::Swap(ResponseLeaveGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseLeaveGame::InternalSwap(ResponseLeaveGame* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseLeaveGame::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestQuickSave::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestQuickSave::RequestQuickSave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestQuickSave.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestQuickSave)
}
RequestQuickSave::RequestQuickSave(const RequestQuickSave& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestQuickSave)
}

void RequestQuickSave::SharedCtor() {
}

RequestQuickSave::~RequestQuickSave() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestQuickSave)
  SharedDtor();
}

void RequestQuickSave::SharedDtor() {
}

void RequestQuickSave::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestQuickSave::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestQuickSave& RequestQuickSave::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestQuickSave.base);
  return *internal_default_instance();
}


void RequestQuickSave::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestQuickSave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestQuickSave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestQuickSave)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestQuickSave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestQuickSave)
  return false;
#undef DO_
}

void RequestQuickSave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestQuickSave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestQuickSave)
}

::google::protobuf::uint8* RequestQuickSave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestQuickSave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestQuickSave)
  return target;
}

size_t RequestQuickSave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestQuickSave)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestQuickSave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestQuickSave)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestQuickSave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestQuickSave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestQuickSave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestQuickSave)
    MergeFrom(*source);
  }
}

void RequestQuickSave::MergeFrom(const RequestQuickSave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestQuickSave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RequestQuickSave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestQuickSave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestQuickSave::CopyFrom(const RequestQuickSave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestQuickSave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQuickSave::IsInitialized() const {
  return true;
}

void RequestQuickSave::Swap(RequestQuickSave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestQuickSave::InternalSwap(RequestQuickSave* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestQuickSave::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseQuickSave::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseQuickSave::ResponseQuickSave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseQuickSave.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseQuickSave)
}
ResponseQuickSave::ResponseQuickSave(const ResponseQuickSave& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseQuickSave)
}

void ResponseQuickSave::SharedCtor() {
}

ResponseQuickSave::~ResponseQuickSave() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseQuickSave)
  SharedDtor();
}

void ResponseQuickSave::SharedDtor() {
}

void ResponseQuickSave::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseQuickSave::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseQuickSave& ResponseQuickSave::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseQuickSave.base);
  return *internal_default_instance();
}


void ResponseQuickSave::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseQuickSave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseQuickSave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseQuickSave)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseQuickSave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseQuickSave)
  return false;
#undef DO_
}

void ResponseQuickSave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseQuickSave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseQuickSave)
}

::google::protobuf::uint8* ResponseQuickSave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseQuickSave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseQuickSave)
  return target;
}

size_t ResponseQuickSave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseQuickSave)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseQuickSave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseQuickSave)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseQuickSave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseQuickSave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseQuickSave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseQuickSave)
    MergeFrom(*source);
  }
}

void ResponseQuickSave::MergeFrom(const ResponseQuickSave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseQuickSave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResponseQuickSave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseQuickSave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseQuickSave::CopyFrom(const ResponseQuickSave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseQuickSave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQuickSave::IsInitialized() const {
  return true;
}

void ResponseQuickSave::Swap(ResponseQuickSave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseQuickSave::InternalSwap(ResponseQuickSave* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseQuickSave::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestQuickLoad::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestQuickLoad::RequestQuickLoad()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestQuickLoad.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestQuickLoad)
}
RequestQuickLoad::RequestQuickLoad(const RequestQuickLoad& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestQuickLoad)
}

void RequestQuickLoad::SharedCtor() {
}

RequestQuickLoad::~RequestQuickLoad() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestQuickLoad)
  SharedDtor();
}

void RequestQuickLoad::SharedDtor() {
}

void RequestQuickLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestQuickLoad::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestQuickLoad& RequestQuickLoad::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestQuickLoad.base);
  return *internal_default_instance();
}


void RequestQuickLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestQuickLoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestQuickLoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestQuickLoad)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestQuickLoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestQuickLoad)
  return false;
#undef DO_
}

void RequestQuickLoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestQuickLoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestQuickLoad)
}

::google::protobuf::uint8* RequestQuickLoad::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestQuickLoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestQuickLoad)
  return target;
}

size_t RequestQuickLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestQuickLoad)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestQuickLoad::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestQuickLoad)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestQuickLoad* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestQuickLoad>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestQuickLoad)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestQuickLoad)
    MergeFrom(*source);
  }
}

void RequestQuickLoad::MergeFrom(const RequestQuickLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestQuickLoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RequestQuickLoad::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestQuickLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestQuickLoad::CopyFrom(const RequestQuickLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestQuickLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQuickLoad::IsInitialized() const {
  return true;
}

void RequestQuickLoad::Swap(RequestQuickLoad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestQuickLoad::InternalSwap(RequestQuickLoad* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestQuickLoad::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseQuickLoad::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseQuickLoad::ResponseQuickLoad()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseQuickLoad.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseQuickLoad)
}
ResponseQuickLoad::ResponseQuickLoad(const ResponseQuickLoad& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseQuickLoad)
}

void ResponseQuickLoad::SharedCtor() {
}

ResponseQuickLoad::~ResponseQuickLoad() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseQuickLoad)
  SharedDtor();
}

void ResponseQuickLoad::SharedDtor() {
}

void ResponseQuickLoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseQuickLoad::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseQuickLoad& ResponseQuickLoad::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseQuickLoad.base);
  return *internal_default_instance();
}


void ResponseQuickLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseQuickLoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseQuickLoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseQuickLoad)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseQuickLoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseQuickLoad)
  return false;
#undef DO_
}

void ResponseQuickLoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseQuickLoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseQuickLoad)
}

::google::protobuf::uint8* ResponseQuickLoad::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseQuickLoad)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseQuickLoad)
  return target;
}

size_t ResponseQuickLoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseQuickLoad)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseQuickLoad::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseQuickLoad)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseQuickLoad* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseQuickLoad>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseQuickLoad)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseQuickLoad)
    MergeFrom(*source);
  }
}

void ResponseQuickLoad::MergeFrom(const ResponseQuickLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseQuickLoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResponseQuickLoad::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseQuickLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseQuickLoad::CopyFrom(const ResponseQuickLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseQuickLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQuickLoad::IsInitialized() const {
  return true;
}

void ResponseQuickLoad::Swap(ResponseQuickLoad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseQuickLoad::InternalSwap(ResponseQuickLoad* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseQuickLoad::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestQuit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestQuit::RequestQuit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestQuit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestQuit)
}
RequestQuit::RequestQuit(const RequestQuit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestQuit)
}

void RequestQuit::SharedCtor() {
}

RequestQuit::~RequestQuit() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestQuit)
  SharedDtor();
}

void RequestQuit::SharedDtor() {
}

void RequestQuit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestQuit::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestQuit& RequestQuit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestQuit.base);
  return *internal_default_instance();
}


void RequestQuit::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestQuit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestQuit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestQuit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestQuit)
  return false;
#undef DO_
}

void RequestQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestQuit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestQuit)
}

::google::protobuf::uint8* RequestQuit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestQuit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestQuit)
  return target;
}

size_t RequestQuit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestQuit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestQuit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestQuit)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestQuit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestQuit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestQuit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestQuit)
    MergeFrom(*source);
  }
}

void RequestQuit::MergeFrom(const RequestQuit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestQuit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RequestQuit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestQuit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestQuit::CopyFrom(const RequestQuit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestQuit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQuit::IsInitialized() const {
  return true;
}

void RequestQuit::Swap(RequestQuit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestQuit::InternalSwap(RequestQuit* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestQuit::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseQuit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseQuit::ResponseQuit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseQuit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseQuit)
}
ResponseQuit::ResponseQuit(const ResponseQuit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseQuit)
}

void ResponseQuit::SharedCtor() {
}

ResponseQuit::~ResponseQuit() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseQuit)
  SharedDtor();
}

void ResponseQuit::SharedDtor() {
}

void ResponseQuit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseQuit::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseQuit& ResponseQuit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseQuit.base);
  return *internal_default_instance();
}


void ResponseQuit::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseQuit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseQuit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseQuit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseQuit)
  return false;
#undef DO_
}

void ResponseQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseQuit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseQuit)
}

::google::protobuf::uint8* ResponseQuit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseQuit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseQuit)
  return target;
}

size_t ResponseQuit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseQuit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseQuit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseQuit)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseQuit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseQuit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseQuit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseQuit)
    MergeFrom(*source);
  }
}

void ResponseQuit::MergeFrom(const ResponseQuit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseQuit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResponseQuit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseQuit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseQuit::CopyFrom(const ResponseQuit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseQuit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQuit::IsInitialized() const {
  return true;
}

void ResponseQuit::Swap(ResponseQuit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseQuit::InternalSwap(ResponseQuit* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseQuit::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestGameInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestGameInfo::RequestGameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestGameInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestGameInfo)
}
RequestGameInfo::RequestGameInfo(const RequestGameInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestGameInfo)
}

void RequestGameInfo::SharedCtor() {
}

RequestGameInfo::~RequestGameInfo() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestGameInfo)
  SharedDtor();
}

void RequestGameInfo::SharedDtor() {
}

void RequestGameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestGameInfo::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestGameInfo& RequestGameInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestGameInfo.base);
  return *internal_default_instance();
}


void RequestGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestGameInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestGameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestGameInfo)
  return false;
#undef DO_
}

void RequestGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestGameInfo)
}

::google::protobuf::uint8* RequestGameInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestGameInfo)
  return target;
}

size_t RequestGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestGameInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestGameInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestGameInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestGameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestGameInfo)
    MergeFrom(*source);
  }
}

void RequestGameInfo::MergeFrom(const RequestGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RequestGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestGameInfo::CopyFrom(const RequestGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGameInfo::IsInitialized() const {
  return true;
}

void RequestGameInfo::Swap(RequestGameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestGameInfo::InternalSwap(RequestGameInfo* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestGameInfo::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseGameInfo::InitAsDefaultInstance() {
  ::SC2APIProtocol::_ResponseGameInfo_default_instance_._instance.get_mutable()->start_raw_ = const_cast< ::SC2APIProtocol::StartRaw*>(
      ::SC2APIProtocol::StartRaw::internal_default_instance());
  ::SC2APIProtocol::_ResponseGameInfo_default_instance_._instance.get_mutable()->options_ = const_cast< ::SC2APIProtocol::InterfaceOptions*>(
      ::SC2APIProtocol::InterfaceOptions::internal_default_instance());
}
void ResponseGameInfo::clear_start_raw() {
  if (start_raw_ != NULL) start_raw_->Clear();
  clear_has_start_raw();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseGameInfo::kMapNameFieldNumber;
const int ResponseGameInfo::kModNamesFieldNumber;
const int ResponseGameInfo::kLocalMapPathFieldNumber;
const int ResponseGameInfo::kPlayerInfoFieldNumber;
const int ResponseGameInfo::kStartRawFieldNumber;
const int ResponseGameInfo::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseGameInfo::ResponseGameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseGameInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseGameInfo)
}
ResponseGameInfo::ResponseGameInfo(const ResponseGameInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      player_info_(from.player_info_),
      mod_names_(from.mod_names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_name()) {
    map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  local_map_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_local_map_path()) {
    local_map_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_map_path_);
  }
  if (from.has_start_raw()) {
    start_raw_ = new ::SC2APIProtocol::StartRaw(*from.start_raw_);
  } else {
    start_raw_ = NULL;
  }
  if (from.has_options()) {
    options_ = new ::SC2APIProtocol::InterfaceOptions(*from.options_);
  } else {
    options_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseGameInfo)
}

void ResponseGameInfo::SharedCtor() {
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_map_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_raw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&options_) -
      reinterpret_cast<char*>(&start_raw_)) + sizeof(options_));
}

ResponseGameInfo::~ResponseGameInfo() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseGameInfo)
  SharedDtor();
}

void ResponseGameInfo::SharedDtor() {
  map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_map_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_raw_;
  if (this != internal_default_instance()) delete options_;
}

void ResponseGameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseGameInfo::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseGameInfo& ResponseGameInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseGameInfo.base);
  return *internal_default_instance();
}


void ResponseGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_info_.Clear();
  mod_names_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      map_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      local_map_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(start_raw_ != NULL);
      start_raw_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(options_ != NULL);
      options_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseGameInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string map_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), static_cast<int>(this->map_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseGameInfo.map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string local_map_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_map_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->local_map_path().data(), static_cast<int>(this->local_map_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseGameInfo.local_map_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SC2APIProtocol.PlayerInfo player_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_player_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.StartRaw start_raw = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start_raw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.InterfaceOptions options = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string mod_names = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mod_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mod_names(this->mod_names_size() - 1).data(),
            static_cast<int>(this->mod_names(this->mod_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseGameInfo.mod_names");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseGameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseGameInfo)
  return false;
#undef DO_
}

void ResponseGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string map_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), static_cast<int>(this->map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseGameInfo.map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->map_name(), output);
  }

  // optional string local_map_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_map_path().data(), static_cast<int>(this->local_map_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseGameInfo.local_map_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->local_map_path(), output);
  }

  // repeated .SC2APIProtocol.PlayerInfo player_info = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->player_info(static_cast<int>(i)),
      output);
  }

  // optional .SC2APIProtocol.StartRaw start_raw = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_start_raw(), output);
  }

  // optional .SC2APIProtocol.InterfaceOptions options = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_options(), output);
  }

  // repeated string mod_names = 6;
  for (int i = 0, n = this->mod_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mod_names(i).data(), static_cast<int>(this->mod_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseGameInfo.mod_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->mod_names(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseGameInfo)
}

::google::protobuf::uint8* ResponseGameInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseGameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string map_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), static_cast<int>(this->map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseGameInfo.map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->map_name(), target);
  }

  // optional string local_map_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_map_path().data(), static_cast<int>(this->local_map_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseGameInfo.local_map_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->local_map_path(), target);
  }

  // repeated .SC2APIProtocol.PlayerInfo player_info = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->player_info(static_cast<int>(i)), deterministic, target);
  }

  // optional .SC2APIProtocol.StartRaw start_raw = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_start_raw(), deterministic, target);
  }

  // optional .SC2APIProtocol.InterfaceOptions options = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_options(), deterministic, target);
  }

  // repeated string mod_names = 6;
  for (int i = 0, n = this->mod_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mod_names(i).data(), static_cast<int>(this->mod_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseGameInfo.mod_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->mod_names(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseGameInfo)
  return target;
}

size_t ResponseGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseGameInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SC2APIProtocol.PlayerInfo player_info = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->player_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_info(static_cast<int>(i)));
    }
  }

  // repeated string mod_names = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->mod_names_size());
  for (int i = 0, n = this->mod_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mod_names(i));
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string map_name = 1;
    if (has_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

    // optional string local_map_path = 2;
    if (has_local_map_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_map_path());
    }

    // optional .SC2APIProtocol.StartRaw start_raw = 4;
    if (has_start_raw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *start_raw_);
    }

    // optional .SC2APIProtocol.InterfaceOptions options = 5;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *options_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseGameInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseGameInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseGameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseGameInfo)
    MergeFrom(*source);
  }
}

void ResponseGameInfo::MergeFrom(const ResponseGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseGameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_info_.MergeFrom(from.player_info_);
  mod_names_.MergeFrom(from.mod_names_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_map_name();
      map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_local_map_path();
      local_map_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_map_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_start_raw()->::SC2APIProtocol::StartRaw::MergeFrom(from.start_raw());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_options()->::SC2APIProtocol::InterfaceOptions::MergeFrom(from.options());
    }
  }
}

void ResponseGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseGameInfo::CopyFrom(const ResponseGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGameInfo::IsInitialized() const {
  return true;
}

void ResponseGameInfo::Swap(ResponseGameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseGameInfo::InternalSwap(ResponseGameInfo* other) {
  using std::swap;
  CastToBase(&player_info_)->InternalSwap(CastToBase(&other->player_info_));
  mod_names_.InternalSwap(CastToBase(&other->mod_names_));
  map_name_.Swap(&other->map_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  local_map_path_.Swap(&other->local_map_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_raw_, other->start_raw_);
  swap(options_, other->options_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseGameInfo::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestObservation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestObservation::kDisableFogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestObservation::RequestObservation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestObservation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestObservation)
}
RequestObservation::RequestObservation(const RequestObservation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  disable_fog_ = from.disable_fog_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestObservation)
}

void RequestObservation::SharedCtor() {
  disable_fog_ = false;
}

RequestObservation::~RequestObservation() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestObservation)
  SharedDtor();
}

void RequestObservation::SharedDtor() {
}

void RequestObservation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestObservation::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestObservation& RequestObservation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestObservation.base);
  return *internal_default_instance();
}


void RequestObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  disable_fog_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestObservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestObservation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool disable_fog = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_disable_fog();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_fog_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestObservation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestObservation)
  return false;
#undef DO_
}

void RequestObservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool disable_fog = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->disable_fog(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestObservation)
}

::google::protobuf::uint8* RequestObservation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool disable_fog = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->disable_fog(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestObservation)
  return target;
}

size_t RequestObservation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestObservation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool disable_fog = 1;
  if (has_disable_fog()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestObservation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestObservation)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestObservation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestObservation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestObservation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestObservation)
    MergeFrom(*source);
  }
}

void RequestObservation::MergeFrom(const RequestObservation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestObservation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_disable_fog()) {
    set_disable_fog(from.disable_fog());
  }
}

void RequestObservation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestObservation::CopyFrom(const RequestObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestObservation::IsInitialized() const {
  return true;
}

void RequestObservation::Swap(RequestObservation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestObservation::InternalSwap(RequestObservation* other) {
  using std::swap;
  swap(disable_fog_, other->disable_fog_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestObservation::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseObservation::InitAsDefaultInstance() {
  ::SC2APIProtocol::_ResponseObservation_default_instance_._instance.get_mutable()->observation_ = const_cast< ::SC2APIProtocol::Observation*>(
      ::SC2APIProtocol::Observation::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseObservation::kActionsFieldNumber;
const int ResponseObservation::kActionErrorsFieldNumber;
const int ResponseObservation::kObservationFieldNumber;
const int ResponseObservation::kPlayerResultFieldNumber;
const int ResponseObservation::kChatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseObservation::ResponseObservation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseObservation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseObservation)
}
ResponseObservation::ResponseObservation(const ResponseObservation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      actions_(from.actions_),
      action_errors_(from.action_errors_),
      player_result_(from.player_result_),
      chat_(from.chat_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_observation()) {
    observation_ = new ::SC2APIProtocol::Observation(*from.observation_);
  } else {
    observation_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseObservation)
}

void ResponseObservation::SharedCtor() {
  observation_ = NULL;
}

ResponseObservation::~ResponseObservation() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseObservation)
  SharedDtor();
}

void ResponseObservation::SharedDtor() {
  if (this != internal_default_instance()) delete observation_;
}

void ResponseObservation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseObservation::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseObservation& ResponseObservation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseObservation.base);
  return *internal_default_instance();
}


void ResponseObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  action_errors_.Clear();
  player_result_.Clear();
  chat_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(observation_ != NULL);
    observation_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseObservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseObservation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC2APIProtocol.Action actions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SC2APIProtocol.ActionError action_errors = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_action_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.Observation observation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_observation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SC2APIProtocol.PlayerResult player_result = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_player_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SC2APIProtocol.ChatReceived chat = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseObservation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseObservation)
  return false;
#undef DO_
}

void ResponseObservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.Action actions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->actions(static_cast<int>(i)),
      output);
  }

  // repeated .SC2APIProtocol.ActionError action_errors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->action_errors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->action_errors(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.Observation observation = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_observation(), output);
  }

  // repeated .SC2APIProtocol.PlayerResult player_result = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_result_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->player_result(static_cast<int>(i)),
      output);
  }

  // repeated .SC2APIProtocol.ChatReceived chat = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chat_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->chat(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseObservation)
}

::google::protobuf::uint8* ResponseObservation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.Action actions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->actions(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SC2APIProtocol.ActionError action_errors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->action_errors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->action_errors(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.Observation observation = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_observation(), deterministic, target);
  }

  // repeated .SC2APIProtocol.PlayerResult player_result = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_result_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->player_result(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SC2APIProtocol.ChatReceived chat = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chat_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->chat(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseObservation)
  return target;
}

size_t ResponseObservation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseObservation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SC2APIProtocol.Action actions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->actions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->actions(static_cast<int>(i)));
    }
  }

  // repeated .SC2APIProtocol.ActionError action_errors = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->action_errors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->action_errors(static_cast<int>(i)));
    }
  }

  // repeated .SC2APIProtocol.PlayerResult player_result = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->player_result_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_result(static_cast<int>(i)));
    }
  }

  // repeated .SC2APIProtocol.ChatReceived chat = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->chat_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chat(static_cast<int>(i)));
    }
  }

  // optional .SC2APIProtocol.Observation observation = 3;
  if (has_observation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *observation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseObservation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseObservation)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseObservation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseObservation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseObservation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseObservation)
    MergeFrom(*source);
  }
}

void ResponseObservation::MergeFrom(const ResponseObservation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseObservation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
  action_errors_.MergeFrom(from.action_errors_);
  player_result_.MergeFrom(from.player_result_);
  chat_.MergeFrom(from.chat_);
  if (from.has_observation()) {
    mutable_observation()->::SC2APIProtocol::Observation::MergeFrom(from.observation());
  }
}

void ResponseObservation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseObservation::CopyFrom(const ResponseObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseObservation::IsInitialized() const {
  return true;
}

void ResponseObservation::Swap(ResponseObservation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseObservation::InternalSwap(ResponseObservation* other) {
  using std::swap;
  CastToBase(&actions_)->InternalSwap(CastToBase(&other->actions_));
  CastToBase(&action_errors_)->InternalSwap(CastToBase(&other->action_errors_));
  CastToBase(&player_result_)->InternalSwap(CastToBase(&other->player_result_));
  CastToBase(&chat_)->InternalSwap(CastToBase(&other->chat_));
  swap(observation_, other->observation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseObservation::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChatReceived::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatReceived::kPlayerIdFieldNumber;
const int ChatReceived::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatReceived::ChatReceived()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ChatReceived.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ChatReceived)
}
ChatReceived::ChatReceived(const ChatReceived& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ChatReceived)
}

void ChatReceived::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_id_ = 0u;
}

ChatReceived::~ChatReceived() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ChatReceived)
  SharedDtor();
}

void ChatReceived::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChatReceived::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChatReceived::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChatReceived& ChatReceived::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ChatReceived.base);
  return *internal_default_instance();
}


void ChatReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ChatReceived)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChatReceived::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ChatReceived)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ChatReceived.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ChatReceived)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ChatReceived)
  return false;
#undef DO_
}

void ChatReceived::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ChatReceived)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ChatReceived.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ChatReceived)
}

::google::protobuf::uint8* ChatReceived::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ChatReceived)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ChatReceived.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ChatReceived)
  return target;
}

size_t ChatReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ChatReceived)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatReceived::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ChatReceived)
  GOOGLE_DCHECK_NE(&from, this);
  const ChatReceived* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatReceived>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ChatReceived)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ChatReceived)
    MergeFrom(*source);
  }
}

void ChatReceived::MergeFrom(const ChatReceived& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ChatReceived)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChatReceived::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ChatReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatReceived::CopyFrom(const ChatReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ChatReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatReceived::IsInitialized() const {
  return true;
}

void ChatReceived::Swap(ChatReceived* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatReceived::InternalSwap(ChatReceived* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChatReceived::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestAction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestAction::kActionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestAction::RequestAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestAction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestAction)
}
RequestAction::RequestAction(const RequestAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestAction)
}

void RequestAction::SharedCtor() {
}

RequestAction::~RequestAction() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestAction)
  SharedDtor();
}

void RequestAction::SharedDtor() {
}

void RequestAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestAction::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestAction& RequestAction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestAction.base);
  return *internal_default_instance();
}


void RequestAction::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestAction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC2APIProtocol.Action actions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestAction)
  return false;
#undef DO_
}

void RequestAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.Action actions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->actions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestAction)
}

::google::protobuf::uint8* RequestAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.Action actions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->actions(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestAction)
  return target;
}

size_t RequestAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SC2APIProtocol.Action actions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->actions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->actions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestAction)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestAction)
    MergeFrom(*source);
  }
}

void RequestAction::MergeFrom(const RequestAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
}

void RequestAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAction::CopyFrom(const RequestAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAction::IsInitialized() const {
  return true;
}

void RequestAction::Swap(RequestAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestAction::InternalSwap(RequestAction* other) {
  using std::swap;
  CastToBase(&actions_)->InternalSwap(CastToBase(&other->actions_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestAction::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseAction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseAction::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseAction::ResponseAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseAction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseAction)
}
ResponseAction::ResponseAction(const ResponseAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      result_(from.result_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseAction)
}

void ResponseAction::SharedCtor() {
}

ResponseAction::~ResponseAction() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseAction)
  SharedDtor();
}

void ResponseAction::SharedDtor() {
}

void ResponseAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseAction::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseAction& ResponseAction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseAction.base);
  return *internal_default_instance();
}


void ResponseAction::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseAction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC2APIProtocol.ActionResult result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::ActionResult_IsValid(value)) {
            add_result(static_cast< ::SC2APIProtocol::ActionResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::SC2APIProtocol::ActionResult_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_result())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseAction)
  return false;
#undef DO_
}

void ResponseAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.ActionResult result = 1;
  for (int i = 0, n = this->result_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseAction)
}

::google::protobuf::uint8* ResponseAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.ActionResult result = 1;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    1, this->result_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseAction)
  return target;
}

size_t ResponseAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SC2APIProtocol.ActionResult result = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->result_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->result(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseAction)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseAction)
    MergeFrom(*source);
  }
}

void ResponseAction::MergeFrom(const ResponseAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
}

void ResponseAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseAction::CopyFrom(const ResponseAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseAction::IsInitialized() const {
  return true;
}

void ResponseAction::Swap(ResponseAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseAction::InternalSwap(ResponseAction* other) {
  using std::swap;
  result_.InternalSwap(&other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseAction::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestObserverAction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestObserverAction::kActionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestObserverAction::RequestObserverAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestObserverAction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestObserverAction)
}
RequestObserverAction::RequestObserverAction(const RequestObserverAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestObserverAction)
}

void RequestObserverAction::SharedCtor() {
}

RequestObserverAction::~RequestObserverAction() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestObserverAction)
  SharedDtor();
}

void RequestObserverAction::SharedDtor() {
}

void RequestObserverAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestObserverAction::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestObserverAction& RequestObserverAction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestObserverAction.base);
  return *internal_default_instance();
}


void RequestObserverAction::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestObserverAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestObserverAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestObserverAction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC2APIProtocol.ObserverAction actions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestObserverAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestObserverAction)
  return false;
#undef DO_
}

void RequestObserverAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestObserverAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.ObserverAction actions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->actions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestObserverAction)
}

::google::protobuf::uint8* RequestObserverAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestObserverAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.ObserverAction actions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->actions(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestObserverAction)
  return target;
}

size_t RequestObserverAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestObserverAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SC2APIProtocol.ObserverAction actions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->actions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->actions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestObserverAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestObserverAction)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestObserverAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestObserverAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestObserverAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestObserverAction)
    MergeFrom(*source);
  }
}

void RequestObserverAction::MergeFrom(const RequestObserverAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestObserverAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
}

void RequestObserverAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestObserverAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestObserverAction::CopyFrom(const RequestObserverAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestObserverAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestObserverAction::IsInitialized() const {
  return true;
}

void RequestObserverAction::Swap(RequestObserverAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestObserverAction::InternalSwap(RequestObserverAction* other) {
  using std::swap;
  CastToBase(&actions_)->InternalSwap(CastToBase(&other->actions_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestObserverAction::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseObserverAction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseObserverAction::ResponseObserverAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseObserverAction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseObserverAction)
}
ResponseObserverAction::ResponseObserverAction(const ResponseObserverAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseObserverAction)
}

void ResponseObserverAction::SharedCtor() {
}

ResponseObserverAction::~ResponseObserverAction() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseObserverAction)
  SharedDtor();
}

void ResponseObserverAction::SharedDtor() {
}

void ResponseObserverAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseObserverAction::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseObserverAction& ResponseObserverAction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseObserverAction.base);
  return *internal_default_instance();
}


void ResponseObserverAction::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseObserverAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseObserverAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseObserverAction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseObserverAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseObserverAction)
  return false;
#undef DO_
}

void ResponseObserverAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseObserverAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseObserverAction)
}

::google::protobuf::uint8* ResponseObserverAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseObserverAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseObserverAction)
  return target;
}

size_t ResponseObserverAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseObserverAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseObserverAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseObserverAction)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseObserverAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseObserverAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseObserverAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseObserverAction)
    MergeFrom(*source);
  }
}

void ResponseObserverAction::MergeFrom(const ResponseObserverAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseObserverAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResponseObserverAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseObserverAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseObserverAction::CopyFrom(const ResponseObserverAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseObserverAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseObserverAction::IsInitialized() const {
  return true;
}

void ResponseObserverAction::Swap(ResponseObserverAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseObserverAction::InternalSwap(ResponseObserverAction* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseObserverAction::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestStep::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestStep::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestStep::RequestStep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestStep.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestStep)
}
RequestStep::RequestStep(const RequestStep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestStep)
}

void RequestStep::SharedCtor() {
  count_ = 0u;
}

RequestStep::~RequestStep() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestStep)
  SharedDtor();
}

void RequestStep::SharedDtor() {
}

void RequestStep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestStep::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestStep& RequestStep::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestStep.base);
  return *internal_default_instance();
}


void RequestStep::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestStep)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestStep)
  return false;
#undef DO_
}

void RequestStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestStep)
}

::google::protobuf::uint8* RequestStep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestStep)
  return target;
}

size_t RequestStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestStep)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 count = 1;
  if (has_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestStep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestStep)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestStep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestStep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestStep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestStep)
    MergeFrom(*source);
  }
}

void RequestStep::MergeFrom(const RequestStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_count()) {
    set_count(from.count());
  }
}

void RequestStep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestStep::CopyFrom(const RequestStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStep::IsInitialized() const {
  return true;
}

void RequestStep::Swap(RequestStep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestStep::InternalSwap(RequestStep* other) {
  using std::swap;
  swap(count_, other->count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestStep::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseStep::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseStep::ResponseStep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseStep.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseStep)
}
ResponseStep::ResponseStep(const ResponseStep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseStep)
}

void ResponseStep::SharedCtor() {
}

ResponseStep::~ResponseStep() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseStep)
  SharedDtor();
}

void ResponseStep::SharedDtor() {
}

void ResponseStep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseStep::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseStep& ResponseStep::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseStep.base);
  return *internal_default_instance();
}


void ResponseStep::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseStep)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseStep)
  return false;
#undef DO_
}

void ResponseStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseStep)
}

::google::protobuf::uint8* ResponseStep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseStep)
  return target;
}

size_t ResponseStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseStep)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseStep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseStep)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseStep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseStep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseStep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseStep)
    MergeFrom(*source);
  }
}

void ResponseStep::MergeFrom(const ResponseStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResponseStep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseStep::CopyFrom(const ResponseStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseStep::IsInitialized() const {
  return true;
}

void ResponseStep::Swap(ResponseStep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseStep::InternalSwap(ResponseStep* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseStep::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestData::kAbilityIdFieldNumber;
const int RequestData::kUnitTypeIdFieldNumber;
const int RequestData::kUpgradeIdFieldNumber;
const int RequestData::kBuffIdFieldNumber;
const int RequestData::kEffectIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestData::RequestData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestData)
}
RequestData::RequestData(const RequestData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ability_id_, &from.ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&effect_id_) -
    reinterpret_cast<char*>(&ability_id_)) + sizeof(effect_id_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestData)
}

void RequestData::SharedCtor() {
  ::memset(&ability_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effect_id_) -
      reinterpret_cast<char*>(&ability_id_)) + sizeof(effect_id_));
}

RequestData::~RequestData() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestData)
  SharedDtor();
}

void RequestData::SharedDtor() {
}

void RequestData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestData::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestData& RequestData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestData.base);
  return *internal_default_instance();
}


void RequestData::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&effect_id_) -
        reinterpret_cast<char*>(&ability_id_)) + sizeof(effect_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ability_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ability_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool unit_type_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_unit_type_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unit_type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool upgrade_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_upgrade_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upgrade_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool buff_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_buff_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &buff_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool effect_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_effect_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &effect_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestData)
  return false;
#undef DO_
}

void RequestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ability_id(), output);
  }

  // optional bool unit_type_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->unit_type_id(), output);
  }

  // optional bool upgrade_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->upgrade_id(), output);
  }

  // optional bool buff_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->buff_id(), output);
  }

  // optional bool effect_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->effect_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestData)
}

::google::protobuf::uint8* RequestData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ability_id(), target);
  }

  // optional bool unit_type_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->unit_type_id(), target);
  }

  // optional bool upgrade_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->upgrade_id(), target);
  }

  // optional bool buff_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->buff_id(), target);
  }

  // optional bool effect_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->effect_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestData)
  return target;
}

size_t RequestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional bool ability_id = 1;
    if (has_ability_id()) {
      total_size += 1 + 1;
    }

    // optional bool unit_type_id = 2;
    if (has_unit_type_id()) {
      total_size += 1 + 1;
    }

    // optional bool upgrade_id = 3;
    if (has_upgrade_id()) {
      total_size += 1 + 1;
    }

    // optional bool buff_id = 4;
    if (has_buff_id()) {
      total_size += 1 + 1;
    }

    // optional bool effect_id = 5;
    if (has_effect_id()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestData)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestData)
    MergeFrom(*source);
  }
}

void RequestData::MergeFrom(const RequestData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      unit_type_id_ = from.unit_type_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      upgrade_id_ = from.upgrade_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      buff_id_ = from.buff_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      effect_id_ = from.effect_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RequestData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestData::CopyFrom(const RequestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestData::IsInitialized() const {
  return true;
}

void RequestData::Swap(RequestData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestData::InternalSwap(RequestData* other) {
  using std::swap;
  swap(ability_id_, other->ability_id_);
  swap(unit_type_id_, other->unit_type_id_);
  swap(upgrade_id_, other->upgrade_id_);
  swap(buff_id_, other->buff_id_);
  swap(effect_id_, other->effect_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestData::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseData::InitAsDefaultInstance() {
}
void ResponseData::clear_abilities() {
  abilities_.Clear();
}
void ResponseData::clear_units() {
  units_.Clear();
}
void ResponseData::clear_upgrades() {
  upgrades_.Clear();
}
void ResponseData::clear_buffs() {
  buffs_.Clear();
}
void ResponseData::clear_effects() {
  effects_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseData::kAbilitiesFieldNumber;
const int ResponseData::kUnitsFieldNumber;
const int ResponseData::kUpgradesFieldNumber;
const int ResponseData::kBuffsFieldNumber;
const int ResponseData::kEffectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseData::ResponseData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseData)
}
ResponseData::ResponseData(const ResponseData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      abilities_(from.abilities_),
      units_(from.units_),
      upgrades_(from.upgrades_),
      buffs_(from.buffs_),
      effects_(from.effects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseData)
}

void ResponseData::SharedCtor() {
}

ResponseData::~ResponseData() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseData)
  SharedDtor();
}

void ResponseData::SharedDtor() {
}

void ResponseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseData::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseData& ResponseData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseData.base);
  return *internal_default_instance();
}


void ResponseData::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  abilities_.Clear();
  units_.Clear();
  upgrades_.Clear();
  buffs_.Clear();
  effects_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC2APIProtocol.AbilityData abilities = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_abilities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SC2APIProtocol.UnitTypeData units = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_units()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SC2APIProtocol.UpgradeData upgrades = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_upgrades()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SC2APIProtocol.BuffData buffs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_buffs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SC2APIProtocol.EffectData effects = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_effects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseData)
  return false;
#undef DO_
}

void ResponseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.AbilityData abilities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->abilities_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->abilities(static_cast<int>(i)),
      output);
  }

  // repeated .SC2APIProtocol.UnitTypeData units = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->units_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->units(static_cast<int>(i)),
      output);
  }

  // repeated .SC2APIProtocol.UpgradeData upgrades = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->upgrades_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->upgrades(static_cast<int>(i)),
      output);
  }

  // repeated .SC2APIProtocol.BuffData buffs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buffs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->buffs(static_cast<int>(i)),
      output);
  }

  // repeated .SC2APIProtocol.EffectData effects = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effects_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->effects(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseData)
}

::google::protobuf::uint8* ResponseData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.AbilityData abilities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->abilities_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->abilities(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SC2APIProtocol.UnitTypeData units = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->units_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->units(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SC2APIProtocol.UpgradeData upgrades = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->upgrades_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->upgrades(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SC2APIProtocol.BuffData buffs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buffs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->buffs(static_cast<int>(i)), deterministic, target);
  }

  // repeated .SC2APIProtocol.EffectData effects = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->effects_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->effects(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseData)
  return target;
}

size_t ResponseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SC2APIProtocol.AbilityData abilities = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->abilities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->abilities(static_cast<int>(i)));
    }
  }

  // repeated .SC2APIProtocol.UnitTypeData units = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->units_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->units(static_cast<int>(i)));
    }
  }

  // repeated .SC2APIProtocol.UpgradeData upgrades = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->upgrades_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->upgrades(static_cast<int>(i)));
    }
  }

  // repeated .SC2APIProtocol.BuffData buffs = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->buffs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->buffs(static_cast<int>(i)));
    }
  }

  // repeated .SC2APIProtocol.EffectData effects = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->effects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->effects(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseData)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseData)
    MergeFrom(*source);
  }
}

void ResponseData::MergeFrom(const ResponseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  abilities_.MergeFrom(from.abilities_);
  units_.MergeFrom(from.units_);
  upgrades_.MergeFrom(from.upgrades_);
  buffs_.MergeFrom(from.buffs_);
  effects_.MergeFrom(from.effects_);
}

void ResponseData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseData::CopyFrom(const ResponseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseData::IsInitialized() const {
  return true;
}

void ResponseData::Swap(ResponseData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseData::InternalSwap(ResponseData* other) {
  using std::swap;
  CastToBase(&abilities_)->InternalSwap(CastToBase(&other->abilities_));
  CastToBase(&units_)->InternalSwap(CastToBase(&other->units_));
  CastToBase(&upgrades_)->InternalSwap(CastToBase(&other->upgrades_));
  CastToBase(&buffs_)->InternalSwap(CastToBase(&other->buffs_));
  CastToBase(&effects_)->InternalSwap(CastToBase(&other->effects_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseData::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestSaveReplay::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestSaveReplay::RequestSaveReplay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestSaveReplay.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestSaveReplay)
}
RequestSaveReplay::RequestSaveReplay(const RequestSaveReplay& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestSaveReplay)
}

void RequestSaveReplay::SharedCtor() {
}

RequestSaveReplay::~RequestSaveReplay() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestSaveReplay)
  SharedDtor();
}

void RequestSaveReplay::SharedDtor() {
}

void RequestSaveReplay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestSaveReplay::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestSaveReplay& RequestSaveReplay::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestSaveReplay.base);
  return *internal_default_instance();
}


void RequestSaveReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestSaveReplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestSaveReplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestSaveReplay)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestSaveReplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestSaveReplay)
  return false;
#undef DO_
}

void RequestSaveReplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestSaveReplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestSaveReplay)
}

::google::protobuf::uint8* RequestSaveReplay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestSaveReplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestSaveReplay)
  return target;
}

size_t RequestSaveReplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestSaveReplay)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestSaveReplay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestSaveReplay)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestSaveReplay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestSaveReplay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestSaveReplay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestSaveReplay)
    MergeFrom(*source);
  }
}

void RequestSaveReplay::MergeFrom(const RequestSaveReplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestSaveReplay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RequestSaveReplay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestSaveReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSaveReplay::CopyFrom(const RequestSaveReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestSaveReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSaveReplay::IsInitialized() const {
  return true;
}

void RequestSaveReplay::Swap(RequestSaveReplay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestSaveReplay::InternalSwap(RequestSaveReplay* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestSaveReplay::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseSaveReplay::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseSaveReplay::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseSaveReplay::ResponseSaveReplay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseSaveReplay.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseSaveReplay)
}
ResponseSaveReplay::ResponseSaveReplay(const ResponseSaveReplay& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseSaveReplay)
}

void ResponseSaveReplay::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ResponseSaveReplay::~ResponseSaveReplay() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseSaveReplay)
  SharedDtor();
}

void ResponseSaveReplay::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseSaveReplay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseSaveReplay::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseSaveReplay& ResponseSaveReplay::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseSaveReplay.base);
  return *internal_default_instance();
}


void ResponseSaveReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseSaveReplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseSaveReplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseSaveReplay)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseSaveReplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseSaveReplay)
  return false;
#undef DO_
}

void ResponseSaveReplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseSaveReplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseSaveReplay)
}

::google::protobuf::uint8* ResponseSaveReplay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseSaveReplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseSaveReplay)
  return target;
}

size_t ResponseSaveReplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseSaveReplay)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bytes data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseSaveReplay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseSaveReplay)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseSaveReplay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseSaveReplay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseSaveReplay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseSaveReplay)
    MergeFrom(*source);
  }
}

void ResponseSaveReplay::MergeFrom(const ResponseSaveReplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseSaveReplay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    set_has_data();
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ResponseSaveReplay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseSaveReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSaveReplay::CopyFrom(const ResponseSaveReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseSaveReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSaveReplay::IsInitialized() const {
  return true;
}

void ResponseSaveReplay::Swap(ResponseSaveReplay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseSaveReplay::InternalSwap(ResponseSaveReplay* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseSaveReplay::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestReplayInfo::InitAsDefaultInstance() {
  ::SC2APIProtocol::_RequestReplayInfo_default_instance_.replay_path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::SC2APIProtocol::_RequestReplayInfo_default_instance_.replay_data_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestReplayInfo::kReplayPathFieldNumber;
const int RequestReplayInfo::kReplayDataFieldNumber;
const int RequestReplayInfo::kDownloadDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestReplayInfo::RequestReplayInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestReplayInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestReplayInfo)
}
RequestReplayInfo::RequestReplayInfo(const RequestReplayInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  download_data_ = from.download_data_;
  clear_has_replay();
  switch (from.replay_case()) {
    case kReplayPath: {
      set_replay_path(from.replay_path());
      break;
    }
    case kReplayData: {
      set_replay_data(from.replay_data());
      break;
    }
    case REPLAY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestReplayInfo)
}

void RequestReplayInfo::SharedCtor() {
  download_data_ = false;
  clear_has_replay();
}

RequestReplayInfo::~RequestReplayInfo() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestReplayInfo)
  SharedDtor();
}

void RequestReplayInfo::SharedDtor() {
  if (has_replay()) {
    clear_replay();
  }
}

void RequestReplayInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestReplayInfo::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestReplayInfo& RequestReplayInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestReplayInfo.base);
  return *internal_default_instance();
}


void RequestReplayInfo::clear_replay() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.RequestReplayInfo)
  switch (replay_case()) {
    case kReplayPath: {
      replay_.replay_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kReplayData: {
      replay_.replay_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case REPLAY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REPLAY_NOT_SET;
}


void RequestReplayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestReplayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  download_data_ = false;
  clear_replay();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestReplayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestReplayInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string replay_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replay_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->replay_path().data(), static_cast<int>(this->replay_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.RequestReplayInfo.replay_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes replay_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_replay_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool download_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_download_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &download_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestReplayInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestReplayInfo)
  return false;
#undef DO_
}

void RequestReplayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestReplayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (replay_case()) {
    case kReplayPath:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->replay_path().data(), static_cast<int>(this->replay_path().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "SC2APIProtocol.RequestReplayInfo.replay_path");
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        1, this->replay_path(), output);
      break;
    case kReplayData:
      ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
        2, this->replay_data(), output);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional bool download_data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->download_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestReplayInfo)
}

::google::protobuf::uint8* RequestReplayInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestReplayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (replay_case()) {
    case kReplayPath:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->replay_path().data(), static_cast<int>(this->replay_path().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "SC2APIProtocol.RequestReplayInfo.replay_path");
      target =
        ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
          1, this->replay_path(), target);
      break;
    case kReplayData:
      target =
        ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
          2, this->replay_data(), target);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional bool download_data = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->download_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestReplayInfo)
  return target;
}

size_t RequestReplayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestReplayInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool download_data = 3;
  if (has_download_data()) {
    total_size += 1 + 1;
  }

  switch (replay_case()) {
    // optional string replay_path = 1;
    case kReplayPath: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->replay_path());
      break;
    }
    // optional bytes replay_data = 2;
    case kReplayData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->replay_data());
      break;
    }
    case REPLAY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestReplayInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestReplayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestReplayInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestReplayInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestReplayInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestReplayInfo)
    MergeFrom(*source);
  }
}

void RequestReplayInfo::MergeFrom(const RequestReplayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestReplayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_download_data()) {
    set_download_data(from.download_data());
  }
  switch (from.replay_case()) {
    case kReplayPath: {
      set_replay_path(from.replay_path());
      break;
    }
    case kReplayData: {
      set_replay_data(from.replay_data());
      break;
    }
    case REPLAY_NOT_SET: {
      break;
    }
  }
}

void RequestReplayInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestReplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestReplayInfo::CopyFrom(const RequestReplayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestReplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestReplayInfo::IsInitialized() const {
  return true;
}

void RequestReplayInfo::Swap(RequestReplayInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestReplayInfo::InternalSwap(RequestReplayInfo* other) {
  using std::swap;
  swap(download_data_, other->download_data_);
  swap(replay_, other->replay_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestReplayInfo::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerInfoExtra::InitAsDefaultInstance() {
  ::SC2APIProtocol::_PlayerInfoExtra_default_instance_._instance.get_mutable()->player_info_ = const_cast< ::SC2APIProtocol::PlayerInfo*>(
      ::SC2APIProtocol::PlayerInfo::internal_default_instance());
  ::SC2APIProtocol::_PlayerInfoExtra_default_instance_._instance.get_mutable()->player_result_ = const_cast< ::SC2APIProtocol::PlayerResult*>(
      ::SC2APIProtocol::PlayerResult::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfoExtra::kPlayerInfoFieldNumber;
const int PlayerInfoExtra::kPlayerResultFieldNumber;
const int PlayerInfoExtra::kPlayerMmrFieldNumber;
const int PlayerInfoExtra::kPlayerApmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfoExtra::PlayerInfoExtra()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_PlayerInfoExtra.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.PlayerInfoExtra)
}
PlayerInfoExtra::PlayerInfoExtra(const PlayerInfoExtra& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player_info()) {
    player_info_ = new ::SC2APIProtocol::PlayerInfo(*from.player_info_);
  } else {
    player_info_ = NULL;
  }
  if (from.has_player_result()) {
    player_result_ = new ::SC2APIProtocol::PlayerResult(*from.player_result_);
  } else {
    player_result_ = NULL;
  }
  ::memcpy(&player_mmr_, &from.player_mmr_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_apm_) -
    reinterpret_cast<char*>(&player_mmr_)) + sizeof(player_apm_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.PlayerInfoExtra)
}

void PlayerInfoExtra::SharedCtor() {
  ::memset(&player_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_apm_) -
      reinterpret_cast<char*>(&player_info_)) + sizeof(player_apm_));
}

PlayerInfoExtra::~PlayerInfoExtra() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.PlayerInfoExtra)
  SharedDtor();
}

void PlayerInfoExtra::SharedDtor() {
  if (this != internal_default_instance()) delete player_info_;
  if (this != internal_default_instance()) delete player_result_;
}

void PlayerInfoExtra::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayerInfoExtra::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerInfoExtra& PlayerInfoExtra::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_PlayerInfoExtra.base);
  return *internal_default_instance();
}


void PlayerInfoExtra::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.PlayerInfoExtra)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(player_info_ != NULL);
      player_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(player_result_ != NULL);
      player_result_->Clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&player_mmr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_apm_) -
        reinterpret_cast<char*>(&player_mmr_)) + sizeof(player_apm_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerInfoExtra::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.PlayerInfoExtra)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.PlayerInfo player_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.PlayerResult player_result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_mmr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_player_mmr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_mmr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_apm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_player_apm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_apm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.PlayerInfoExtra)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.PlayerInfoExtra)
  return false;
#undef DO_
}

void PlayerInfoExtra::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.PlayerInfoExtra)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.PlayerInfo player_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_player_info(), output);
  }

  // optional .SC2APIProtocol.PlayerResult player_result = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_player_result(), output);
  }

  // optional int32 player_mmr = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_mmr(), output);
  }

  // optional int32 player_apm = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->player_apm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.PlayerInfoExtra)
}

::google::protobuf::uint8* PlayerInfoExtra::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.PlayerInfoExtra)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.PlayerInfo player_info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_player_info(), deterministic, target);
  }

  // optional .SC2APIProtocol.PlayerResult player_result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_player_result(), deterministic, target);
  }

  // optional int32 player_mmr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_mmr(), target);
  }

  // optional int32 player_apm = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->player_apm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.PlayerInfoExtra)
  return target;
}

size_t PlayerInfoExtra::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.PlayerInfoExtra)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .SC2APIProtocol.PlayerInfo player_info = 1;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *player_info_);
    }

    // optional .SC2APIProtocol.PlayerResult player_result = 2;
    if (has_player_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *player_result_);
    }

    // optional int32 player_mmr = 3;
    if (has_player_mmr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_mmr());
    }

    // optional int32 player_apm = 4;
    if (has_player_apm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_apm());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInfoExtra::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.PlayerInfoExtra)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInfoExtra* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInfoExtra>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.PlayerInfoExtra)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.PlayerInfoExtra)
    MergeFrom(*source);
  }
}

void PlayerInfoExtra::MergeFrom(const PlayerInfoExtra& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.PlayerInfoExtra)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_player_info()->::SC2APIProtocol::PlayerInfo::MergeFrom(from.player_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_player_result()->::SC2APIProtocol::PlayerResult::MergeFrom(from.player_result());
    }
    if (cached_has_bits & 0x00000004u) {
      player_mmr_ = from.player_mmr_;
    }
    if (cached_has_bits & 0x00000008u) {
      player_apm_ = from.player_apm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerInfoExtra::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.PlayerInfoExtra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfoExtra::CopyFrom(const PlayerInfoExtra& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.PlayerInfoExtra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoExtra::IsInitialized() const {
  return true;
}

void PlayerInfoExtra::Swap(PlayerInfoExtra* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfoExtra::InternalSwap(PlayerInfoExtra* other) {
  using std::swap;
  swap(player_info_, other->player_info_);
  swap(player_result_, other->player_result_);
  swap(player_mmr_, other->player_mmr_);
  swap(player_apm_, other->player_apm_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayerInfoExtra::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseReplayInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseReplayInfo::kMapNameFieldNumber;
const int ResponseReplayInfo::kLocalMapPathFieldNumber;
const int ResponseReplayInfo::kPlayerInfoFieldNumber;
const int ResponseReplayInfo::kGameDurationLoopsFieldNumber;
const int ResponseReplayInfo::kGameDurationSecondsFieldNumber;
const int ResponseReplayInfo::kGameVersionFieldNumber;
const int ResponseReplayInfo::kDataVersionFieldNumber;
const int ResponseReplayInfo::kDataBuildFieldNumber;
const int ResponseReplayInfo::kBaseBuildFieldNumber;
const int ResponseReplayInfo::kErrorFieldNumber;
const int ResponseReplayInfo::kErrorDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseReplayInfo::ResponseReplayInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseReplayInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseReplayInfo)
}
ResponseReplayInfo::ResponseReplayInfo(const ResponseReplayInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      player_info_(from.player_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_name()) {
    map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  local_map_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_local_map_path()) {
    local_map_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_map_path_);
  }
  game_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_version()) {
    game_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_version_);
  }
  error_details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_details()) {
    error_details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_details_);
  }
  data_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_version()) {
    data_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_version_);
  }
  ::memcpy(&game_duration_loops_, &from.game_duration_loops_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&game_duration_loops_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseReplayInfo)
}

void ResponseReplayInfo::SharedCtor() {
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_map_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&game_duration_loops_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&base_build_) -
      reinterpret_cast<char*>(&game_duration_loops_)) + sizeof(base_build_));
  error_ = 1;
}

ResponseReplayInfo::~ResponseReplayInfo() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseReplayInfo)
  SharedDtor();
}

void ResponseReplayInfo::SharedDtor() {
  map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_map_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_details_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponseReplayInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseReplayInfo::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseReplayInfo& ResponseReplayInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseReplayInfo.base);
  return *internal_default_instance();
}


void ResponseReplayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseReplayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      map_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      local_map_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      game_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      error_details_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      data_version_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&game_duration_loops_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_build_) -
        reinterpret_cast<char*>(&game_duration_loops_)) + sizeof(data_build_));
  }
  if (cached_has_bits & 768u) {
    base_build_ = 0u;
    error_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseReplayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseReplayInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string map_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), static_cast<int>(this->map_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseReplayInfo.map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string local_map_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_map_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->local_map_path().data(), static_cast<int>(this->local_map_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseReplayInfo.local_map_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SC2APIProtocol.PlayerInfoExtra player_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_player_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_duration_loops = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_game_duration_loops();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_duration_loops_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float game_duration_seconds = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_game_duration_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &game_duration_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_version().data(), static_cast<int>(this->game_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseReplayInfo.game_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_build = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_data_build();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_build_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 base_build = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_base_build();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_build_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ResponseReplayInfo.Error error = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::ResponseReplayInfo_Error_IsValid(value)) {
            set_error(static_cast< ::SC2APIProtocol::ResponseReplayInfo_Error >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_details = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_details()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_details().data(), static_cast<int>(this->error_details().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseReplayInfo.error_details");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data_version = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_version().data(), static_cast<int>(this->data_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseReplayInfo.data_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseReplayInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseReplayInfo)
  return false;
#undef DO_
}

void ResponseReplayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseReplayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string map_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), static_cast<int>(this->map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->map_name(), output);
  }

  // optional string local_map_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_map_path().data(), static_cast<int>(this->local_map_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.local_map_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->local_map_path(), output);
  }

  // repeated .SC2APIProtocol.PlayerInfoExtra player_info = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->player_info(static_cast<int>(i)),
      output);
  }

  // optional uint32 game_duration_loops = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_duration_loops(), output);
  }

  // optional float game_duration_seconds = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->game_duration_seconds(), output);
  }

  // optional string game_version = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_version().data(), static_cast<int>(this->game_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.game_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->game_version(), output);
  }

  // optional uint32 data_build = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->data_build(), output);
  }

  // optional uint32 base_build = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->base_build(), output);
  }

  // optional .SC2APIProtocol.ResponseReplayInfo.Error error = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->error(), output);
  }

  // optional string error_details = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_details().data(), static_cast<int>(this->error_details().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.error_details");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->error_details(), output);
  }

  // optional string data_version = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_version().data(), static_cast<int>(this->data_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.data_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->data_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseReplayInfo)
}

::google::protobuf::uint8* ResponseReplayInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseReplayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string map_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), static_cast<int>(this->map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->map_name(), target);
  }

  // optional string local_map_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_map_path().data(), static_cast<int>(this->local_map_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.local_map_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->local_map_path(), target);
  }

  // repeated .SC2APIProtocol.PlayerInfoExtra player_info = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->player_info(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 game_duration_loops = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_duration_loops(), target);
  }

  // optional float game_duration_seconds = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->game_duration_seconds(), target);
  }

  // optional string game_version = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_version().data(), static_cast<int>(this->game_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.game_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->game_version(), target);
  }

  // optional uint32 data_build = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->data_build(), target);
  }

  // optional uint32 base_build = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->base_build(), target);
  }

  // optional .SC2APIProtocol.ResponseReplayInfo.Error error = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->error(), target);
  }

  // optional string error_details = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_details().data(), static_cast<int>(this->error_details().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.error_details");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->error_details(), target);
  }

  // optional string data_version = 11;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_version().data(), static_cast<int>(this->data_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.data_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->data_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseReplayInfo)
  return target;
}

size_t ResponseReplayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseReplayInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SC2APIProtocol.PlayerInfoExtra player_info = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->player_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_info(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string map_name = 1;
    if (has_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

    // optional string local_map_path = 2;
    if (has_local_map_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_map_path());
    }

    // optional string game_version = 6;
    if (has_game_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_version());
    }

    // optional string error_details = 10;
    if (has_error_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_details());
    }

    // optional string data_version = 11;
    if (has_data_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_version());
    }

    // optional uint32 game_duration_loops = 4;
    if (has_game_duration_loops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_duration_loops());
    }

    // optional float game_duration_seconds = 5;
    if (has_game_duration_seconds()) {
      total_size += 1 + 4;
    }

    // optional uint32 data_build = 7;
    if (has_data_build()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_build());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 base_build = 8;
    if (has_base_build()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_build());
    }

    // optional .SC2APIProtocol.ResponseReplayInfo.Error error = 9;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseReplayInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseReplayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseReplayInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseReplayInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseReplayInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseReplayInfo)
    MergeFrom(*source);
  }
}

void ResponseReplayInfo::MergeFrom(const ResponseReplayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseReplayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_info_.MergeFrom(from.player_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_map_name();
      map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_local_map_path();
      local_map_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_map_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_game_version();
      game_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_version_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_error_details();
      error_details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_details_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_data_version();
      data_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_version_);
    }
    if (cached_has_bits & 0x00000020u) {
      game_duration_loops_ = from.game_duration_loops_;
    }
    if (cached_has_bits & 0x00000040u) {
      game_duration_seconds_ = from.game_duration_seconds_;
    }
    if (cached_has_bits & 0x00000080u) {
      data_build_ = from.data_build_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      base_build_ = from.base_build_;
    }
    if (cached_has_bits & 0x00000200u) {
      error_ = from.error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponseReplayInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseReplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseReplayInfo::CopyFrom(const ResponseReplayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseReplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseReplayInfo::IsInitialized() const {
  return true;
}

void ResponseReplayInfo::Swap(ResponseReplayInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseReplayInfo::InternalSwap(ResponseReplayInfo* other) {
  using std::swap;
  CastToBase(&player_info_)->InternalSwap(CastToBase(&other->player_info_));
  map_name_.Swap(&other->map_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  local_map_path_.Swap(&other->local_map_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  game_version_.Swap(&other->game_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  error_details_.Swap(&other->error_details_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_version_.Swap(&other->data_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(game_duration_loops_, other->game_duration_loops_);
  swap(game_duration_seconds_, other->game_duration_seconds_);
  swap(data_build_, other->data_build_);
  swap(base_build_, other->base_build_);
  swap(error_, other->error_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseReplayInfo::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestAvailableMaps::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestAvailableMaps::RequestAvailableMaps()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestAvailableMaps.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestAvailableMaps)
}
RequestAvailableMaps::RequestAvailableMaps(const RequestAvailableMaps& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestAvailableMaps)
}

void RequestAvailableMaps::SharedCtor() {
}

RequestAvailableMaps::~RequestAvailableMaps() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestAvailableMaps)
  SharedDtor();
}

void RequestAvailableMaps::SharedDtor() {
}

void RequestAvailableMaps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestAvailableMaps::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestAvailableMaps& RequestAvailableMaps::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestAvailableMaps.base);
  return *internal_default_instance();
}


void RequestAvailableMaps::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestAvailableMaps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestAvailableMaps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestAvailableMaps)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestAvailableMaps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestAvailableMaps)
  return false;
#undef DO_
}

void RequestAvailableMaps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestAvailableMaps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestAvailableMaps)
}

::google::protobuf::uint8* RequestAvailableMaps::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestAvailableMaps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestAvailableMaps)
  return target;
}

size_t RequestAvailableMaps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestAvailableMaps)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestAvailableMaps::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestAvailableMaps)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestAvailableMaps* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestAvailableMaps>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestAvailableMaps)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestAvailableMaps)
    MergeFrom(*source);
  }
}

void RequestAvailableMaps::MergeFrom(const RequestAvailableMaps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestAvailableMaps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RequestAvailableMaps::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestAvailableMaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAvailableMaps::CopyFrom(const RequestAvailableMaps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestAvailableMaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAvailableMaps::IsInitialized() const {
  return true;
}

void RequestAvailableMaps::Swap(RequestAvailableMaps* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestAvailableMaps::InternalSwap(RequestAvailableMaps* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestAvailableMaps::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseAvailableMaps::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseAvailableMaps::kLocalMapPathsFieldNumber;
const int ResponseAvailableMaps::kBattlenetMapNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseAvailableMaps::ResponseAvailableMaps()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseAvailableMaps.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseAvailableMaps)
}
ResponseAvailableMaps::ResponseAvailableMaps(const ResponseAvailableMaps& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      local_map_paths_(from.local_map_paths_),
      battlenet_map_names_(from.battlenet_map_names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseAvailableMaps)
}

void ResponseAvailableMaps::SharedCtor() {
}

ResponseAvailableMaps::~ResponseAvailableMaps() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseAvailableMaps)
  SharedDtor();
}

void ResponseAvailableMaps::SharedDtor() {
}

void ResponseAvailableMaps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseAvailableMaps::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseAvailableMaps& ResponseAvailableMaps::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseAvailableMaps.base);
  return *internal_default_instance();
}


void ResponseAvailableMaps::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseAvailableMaps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  local_map_paths_.Clear();
  battlenet_map_names_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseAvailableMaps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseAvailableMaps)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string local_map_paths = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_local_map_paths()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->local_map_paths(this->local_map_paths_size() - 1).data(),
            static_cast<int>(this->local_map_paths(this->local_map_paths_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseAvailableMaps.local_map_paths");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string battlenet_map_names = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_battlenet_map_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->battlenet_map_names(this->battlenet_map_names_size() - 1).data(),
            static_cast<int>(this->battlenet_map_names(this->battlenet_map_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseAvailableMaps.battlenet_map_names");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseAvailableMaps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseAvailableMaps)
  return false;
#undef DO_
}

void ResponseAvailableMaps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseAvailableMaps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string local_map_paths = 1;
  for (int i = 0, n = this->local_map_paths_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_map_paths(i).data(), static_cast<int>(this->local_map_paths(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseAvailableMaps.local_map_paths");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->local_map_paths(i), output);
  }

  // repeated string battlenet_map_names = 2;
  for (int i = 0, n = this->battlenet_map_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battlenet_map_names(i).data(), static_cast<int>(this->battlenet_map_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseAvailableMaps.battlenet_map_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->battlenet_map_names(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseAvailableMaps)
}

::google::protobuf::uint8* ResponseAvailableMaps::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseAvailableMaps)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string local_map_paths = 1;
  for (int i = 0, n = this->local_map_paths_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_map_paths(i).data(), static_cast<int>(this->local_map_paths(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseAvailableMaps.local_map_paths");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->local_map_paths(i), target);
  }

  // repeated string battlenet_map_names = 2;
  for (int i = 0, n = this->battlenet_map_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battlenet_map_names(i).data(), static_cast<int>(this->battlenet_map_names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseAvailableMaps.battlenet_map_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->battlenet_map_names(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseAvailableMaps)
  return target;
}

size_t ResponseAvailableMaps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseAvailableMaps)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string local_map_paths = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->local_map_paths_size());
  for (int i = 0, n = this->local_map_paths_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->local_map_paths(i));
  }

  // repeated string battlenet_map_names = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->battlenet_map_names_size());
  for (int i = 0, n = this->battlenet_map_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->battlenet_map_names(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseAvailableMaps::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseAvailableMaps)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseAvailableMaps* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseAvailableMaps>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseAvailableMaps)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseAvailableMaps)
    MergeFrom(*source);
  }
}

void ResponseAvailableMaps::MergeFrom(const ResponseAvailableMaps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseAvailableMaps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  local_map_paths_.MergeFrom(from.local_map_paths_);
  battlenet_map_names_.MergeFrom(from.battlenet_map_names_);
}

void ResponseAvailableMaps::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseAvailableMaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseAvailableMaps::CopyFrom(const ResponseAvailableMaps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseAvailableMaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseAvailableMaps::IsInitialized() const {
  return true;
}

void ResponseAvailableMaps::Swap(ResponseAvailableMaps* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseAvailableMaps::InternalSwap(ResponseAvailableMaps* other) {
  using std::swap;
  local_map_paths_.InternalSwap(CastToBase(&other->local_map_paths_));
  battlenet_map_names_.InternalSwap(CastToBase(&other->battlenet_map_names_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseAvailableMaps::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestSaveMap::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestSaveMap::kMapPathFieldNumber;
const int RequestSaveMap::kMapDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestSaveMap::RequestSaveMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestSaveMap.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestSaveMap)
}
RequestSaveMap::RequestSaveMap(const RequestSaveMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_path()) {
    map_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_path_);
  }
  map_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_data()) {
    map_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_data_);
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestSaveMap)
}

void RequestSaveMap::SharedCtor() {
  map_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RequestSaveMap::~RequestSaveMap() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestSaveMap)
  SharedDtor();
}

void RequestSaveMap::SharedDtor() {
  map_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestSaveMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestSaveMap::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestSaveMap& RequestSaveMap::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestSaveMap.base);
  return *internal_default_instance();
}


void RequestSaveMap::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestSaveMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      map_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      map_data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestSaveMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestSaveMap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string map_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_path().data(), static_cast<int>(this->map_path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.RequestSaveMap.map_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes map_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestSaveMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestSaveMap)
  return false;
#undef DO_
}

void RequestSaveMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestSaveMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string map_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_path().data(), static_cast<int>(this->map_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.RequestSaveMap.map_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->map_path(), output);
  }

  // optional bytes map_data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->map_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestSaveMap)
}

::google::protobuf::uint8* RequestSaveMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestSaveMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string map_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_path().data(), static_cast<int>(this->map_path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.RequestSaveMap.map_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->map_path(), target);
  }

  // optional bytes map_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->map_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestSaveMap)
  return target;
}

size_t RequestSaveMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestSaveMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string map_path = 1;
    if (has_map_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_path());
    }

    // optional bytes map_data = 2;
    if (has_map_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_data());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestSaveMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestSaveMap)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestSaveMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestSaveMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestSaveMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestSaveMap)
    MergeFrom(*source);
  }
}

void RequestSaveMap::MergeFrom(const RequestSaveMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestSaveMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_map_path();
      map_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_path_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_map_data();
      map_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_data_);
    }
  }
}

void RequestSaveMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestSaveMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSaveMap::CopyFrom(const RequestSaveMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestSaveMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSaveMap::IsInitialized() const {
  return true;
}

void RequestSaveMap::Swap(RequestSaveMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestSaveMap::InternalSwap(RequestSaveMap* other) {
  using std::swap;
  map_path_.Swap(&other->map_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  map_data_.Swap(&other->map_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestSaveMap::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseSaveMap::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseSaveMap::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseSaveMap::ResponseSaveMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseSaveMap.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseSaveMap)
}
ResponseSaveMap::ResponseSaveMap(const ResponseSaveMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_ = from.error_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseSaveMap)
}

void ResponseSaveMap::SharedCtor() {
  error_ = 1;
}

ResponseSaveMap::~ResponseSaveMap() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseSaveMap)
  SharedDtor();
}

void ResponseSaveMap::SharedDtor() {
}

void ResponseSaveMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseSaveMap::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseSaveMap& ResponseSaveMap::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseSaveMap.base);
  return *internal_default_instance();
}


void ResponseSaveMap::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseSaveMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseSaveMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseSaveMap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ResponseSaveMap.Error error = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::ResponseSaveMap_Error_IsValid(value)) {
            set_error(static_cast< ::SC2APIProtocol::ResponseSaveMap_Error >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseSaveMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseSaveMap)
  return false;
#undef DO_
}

void ResponseSaveMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseSaveMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.ResponseSaveMap.Error error = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseSaveMap)
}

::google::protobuf::uint8* ResponseSaveMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseSaveMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.ResponseSaveMap.Error error = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseSaveMap)
  return target;
}

size_t ResponseSaveMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseSaveMap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .SC2APIProtocol.ResponseSaveMap.Error error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseSaveMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseSaveMap)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseSaveMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseSaveMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseSaveMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseSaveMap)
    MergeFrom(*source);
  }
}

void ResponseSaveMap::MergeFrom(const ResponseSaveMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseSaveMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    set_error(from.error());
  }
}

void ResponseSaveMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseSaveMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSaveMap::CopyFrom(const ResponseSaveMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseSaveMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSaveMap::IsInitialized() const {
  return true;
}

void ResponseSaveMap::Swap(ResponseSaveMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseSaveMap::InternalSwap(ResponseSaveMap* other) {
  using std::swap;
  swap(error_, other->error_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseSaveMap::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestPing::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestPing::RequestPing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestPing.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestPing)
}
RequestPing::RequestPing(const RequestPing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestPing)
}

void RequestPing::SharedCtor() {
}

RequestPing::~RequestPing() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestPing)
  SharedDtor();
}

void RequestPing::SharedDtor() {
}

void RequestPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestPing::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestPing& RequestPing::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestPing.base);
  return *internal_default_instance();
}


void RequestPing::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestPing)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestPing)
  return false;
#undef DO_
}

void RequestPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestPing)
}

::google::protobuf::uint8* RequestPing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestPing)
  return target;
}

size_t RequestPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestPing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestPing)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestPing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestPing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestPing)
    MergeFrom(*source);
  }
}

void RequestPing::MergeFrom(const RequestPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RequestPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPing::CopyFrom(const RequestPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPing::IsInitialized() const {
  return true;
}

void RequestPing::Swap(RequestPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestPing::InternalSwap(RequestPing* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestPing::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponsePing::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponsePing::kGameVersionFieldNumber;
const int ResponsePing::kDataVersionFieldNumber;
const int ResponsePing::kDataBuildFieldNumber;
const int ResponsePing::kBaseBuildFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponsePing::ResponsePing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponsePing.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponsePing)
}
ResponsePing::ResponsePing(const ResponsePing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_version()) {
    game_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_version_);
  }
  data_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_version()) {
    data_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_version_);
  }
  ::memcpy(&data_build_, &from.data_build_,
    static_cast<size_t>(reinterpret_cast<char*>(&base_build_) -
    reinterpret_cast<char*>(&data_build_)) + sizeof(base_build_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponsePing)
}

void ResponsePing::SharedCtor() {
  game_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_build_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&base_build_) -
      reinterpret_cast<char*>(&data_build_)) + sizeof(base_build_));
}

ResponsePing::~ResponsePing() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponsePing)
  SharedDtor();
}

void ResponsePing::SharedDtor() {
  game_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResponsePing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponsePing::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponsePing& ResponsePing::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponsePing.base);
  return *internal_default_instance();
}


void ResponsePing::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponsePing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      game_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      data_version_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&data_build_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&base_build_) -
        reinterpret_cast<char*>(&data_build_)) + sizeof(base_build_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponsePing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponsePing)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string game_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_version().data(), static_cast<int>(this->game_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponsePing.game_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_version().data(), static_cast<int>(this->data_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponsePing.data_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_build = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_data_build();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_build_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 base_build = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_base_build();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_build_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponsePing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponsePing)
  return false;
#undef DO_
}

void ResponsePing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponsePing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string game_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_version().data(), static_cast<int>(this->game_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponsePing.game_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->game_version(), output);
  }

  // optional string data_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_version().data(), static_cast<int>(this->data_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponsePing.data_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data_version(), output);
  }

  // optional uint32 data_build = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->data_build(), output);
  }

  // optional uint32 base_build = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->base_build(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponsePing)
}

::google::protobuf::uint8* ResponsePing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponsePing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string game_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_version().data(), static_cast<int>(this->game_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponsePing.game_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->game_version(), target);
  }

  // optional string data_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_version().data(), static_cast<int>(this->data_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponsePing.data_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data_version(), target);
  }

  // optional uint32 data_build = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->data_build(), target);
  }

  // optional uint32 base_build = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->base_build(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponsePing)
  return target;
}

size_t ResponsePing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponsePing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string game_version = 1;
    if (has_game_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_version());
    }

    // optional string data_version = 2;
    if (has_data_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_version());
    }

    // optional uint32 data_build = 3;
    if (has_data_build()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_build());
    }

    // optional uint32 base_build = 4;
    if (has_base_build()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_build());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponsePing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponsePing)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponsePing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponsePing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponsePing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponsePing)
    MergeFrom(*source);
  }
}

void ResponsePing::MergeFrom(const ResponsePing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponsePing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_game_version();
      game_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data_version();
      data_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      data_build_ = from.data_build_;
    }
    if (cached_has_bits & 0x00000008u) {
      base_build_ = from.base_build_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResponsePing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponsePing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponsePing::CopyFrom(const ResponsePing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponsePing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsePing::IsInitialized() const {
  return true;
}

void ResponsePing::Swap(ResponsePing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponsePing::InternalSwap(ResponsePing* other) {
  using std::swap;
  game_version_.Swap(&other->game_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_version_.Swap(&other->data_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_build_, other->data_build_);
  swap(base_build_, other->base_build_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponsePing::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestDebug::InitAsDefaultInstance() {
}
void RequestDebug::clear_debug() {
  debug_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestDebug::kDebugFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestDebug::RequestDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestDebug.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestDebug)
}
RequestDebug::RequestDebug(const RequestDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      debug_(from.debug_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestDebug)
}

void RequestDebug::SharedCtor() {
}

RequestDebug::~RequestDebug() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestDebug)
  SharedDtor();
}

void RequestDebug::SharedDtor() {
}

void RequestDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestDebug::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestDebug& RequestDebug::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_RequestDebug.base);
  return *internal_default_instance();
}


void RequestDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  debug_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RequestDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestDebug)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC2APIProtocol.DebugCommand debug = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestDebug)
  return false;
#undef DO_
}

void RequestDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.DebugCommand debug = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->debug_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->debug(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestDebug)
}

::google::protobuf::uint8* RequestDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SC2APIProtocol.DebugCommand debug = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->debug_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->debug(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestDebug)
  return target;
}

size_t RequestDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SC2APIProtocol.DebugCommand debug = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->debug_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->debug(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestDebug)
    MergeFrom(*source);
  }
}

void RequestDebug::MergeFrom(const RequestDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  debug_.MergeFrom(from.debug_);
}

void RequestDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestDebug::CopyFrom(const RequestDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDebug::IsInitialized() const {
  return true;
}

void RequestDebug::Swap(RequestDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestDebug::InternalSwap(RequestDebug* other) {
  using std::swap;
  CastToBase(&debug_)->InternalSwap(CastToBase(&other->debug_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestDebug::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ResponseDebug::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseDebug::ResponseDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseDebug.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseDebug)
}
ResponseDebug::ResponseDebug(const ResponseDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseDebug)
}

void ResponseDebug::SharedCtor() {
}

ResponseDebug::~ResponseDebug() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseDebug)
  SharedDtor();
}

void ResponseDebug::SharedDtor() {
}

void ResponseDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ResponseDebug::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseDebug& ResponseDebug::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ResponseDebug.base);
  return *internal_default_instance();
}


void ResponseDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResponseDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseDebug)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseDebug)
  return false;
#undef DO_
}

void ResponseDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseDebug)
}

::google::protobuf::uint8* ResponseDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseDebug)
  return target;
}

size_t ResponseDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseDebug)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseDebug)
    MergeFrom(*source);
  }
}

void ResponseDebug::MergeFrom(const ResponseDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResponseDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseDebug::CopyFrom(const ResponseDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseDebug::IsInitialized() const {
  return true;
}

void ResponseDebug::Swap(ResponseDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseDebug::InternalSwap(ResponseDebug* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ResponseDebug::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerSetup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerSetup::kTypeFieldNumber;
const int PlayerSetup::kRaceFieldNumber;
const int PlayerSetup::kDifficultyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerSetup::PlayerSetup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_PlayerSetup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.PlayerSetup)
}
PlayerSetup::PlayerSetup(const PlayerSetup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&race_, &from.race_,
    static_cast<size_t>(reinterpret_cast<char*>(&difficulty_) -
    reinterpret_cast<char*>(&race_)) + sizeof(difficulty_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.PlayerSetup)
}

void PlayerSetup::SharedCtor() {
  race_ = 0;
  type_ = 1;
  difficulty_ = 1;
}

PlayerSetup::~PlayerSetup() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.PlayerSetup)
  SharedDtor();
}

void PlayerSetup::SharedDtor() {
}

void PlayerSetup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayerSetup::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerSetup& PlayerSetup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_PlayerSetup.base);
  return *internal_default_instance();
}


void PlayerSetup::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.PlayerSetup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    race_ = 0;
    type_ = 1;
    difficulty_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerSetup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.PlayerSetup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.PlayerType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::PlayerType_IsValid(value)) {
            set_type(static_cast< ::SC2APIProtocol::PlayerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.Race race = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Race_IsValid(value)) {
            set_race(static_cast< ::SC2APIProtocol::Race >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.Difficulty difficulty = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Difficulty_IsValid(value)) {
            set_difficulty(static_cast< ::SC2APIProtocol::Difficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.PlayerSetup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.PlayerSetup)
  return false;
#undef DO_
}

void PlayerSetup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.PlayerSetup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.PlayerType type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .SC2APIProtocol.Race race = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->race(), output);
  }

  // optional .SC2APIProtocol.Difficulty difficulty = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->difficulty(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.PlayerSetup)
}

::google::protobuf::uint8* PlayerSetup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.PlayerSetup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.PlayerType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .SC2APIProtocol.Race race = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->race(), target);
  }

  // optional .SC2APIProtocol.Difficulty difficulty = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->difficulty(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.PlayerSetup)
  return target;
}

size_t PlayerSetup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.PlayerSetup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .SC2APIProtocol.Race race = 2;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->race());
    }

    // optional .SC2APIProtocol.PlayerType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .SC2APIProtocol.Difficulty difficulty = 3;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->difficulty());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerSetup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.PlayerSetup)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerSetup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerSetup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.PlayerSetup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.PlayerSetup)
    MergeFrom(*source);
  }
}

void PlayerSetup::MergeFrom(const PlayerSetup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.PlayerSetup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      race_ = from.race_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      difficulty_ = from.difficulty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerSetup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.PlayerSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSetup::CopyFrom(const PlayerSetup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.PlayerSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSetup::IsInitialized() const {
  return true;
}

void PlayerSetup::Swap(PlayerSetup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerSetup::InternalSwap(PlayerSetup* other) {
  using std::swap;
  swap(race_, other->race_);
  swap(type_, other->type_);
  swap(difficulty_, other->difficulty_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayerSetup::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpatialCameraSetup::InitAsDefaultInstance() {
  ::SC2APIProtocol::_SpatialCameraSetup_default_instance_._instance.get_mutable()->resolution_ = const_cast< ::SC2APIProtocol::Size2DI*>(
      ::SC2APIProtocol::Size2DI::internal_default_instance());
  ::SC2APIProtocol::_SpatialCameraSetup_default_instance_._instance.get_mutable()->minimap_resolution_ = const_cast< ::SC2APIProtocol::Size2DI*>(
      ::SC2APIProtocol::Size2DI::internal_default_instance());
}
void SpatialCameraSetup::clear_resolution() {
  if (resolution_ != NULL) resolution_->Clear();
  clear_has_resolution();
}
void SpatialCameraSetup::clear_minimap_resolution() {
  if (minimap_resolution_ != NULL) minimap_resolution_->Clear();
  clear_has_minimap_resolution();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpatialCameraSetup::kWidthFieldNumber;
const int SpatialCameraSetup::kResolutionFieldNumber;
const int SpatialCameraSetup::kMinimapResolutionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpatialCameraSetup::SpatialCameraSetup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_SpatialCameraSetup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.SpatialCameraSetup)
}
SpatialCameraSetup::SpatialCameraSetup(const SpatialCameraSetup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_resolution()) {
    resolution_ = new ::SC2APIProtocol::Size2DI(*from.resolution_);
  } else {
    resolution_ = NULL;
  }
  if (from.has_minimap_resolution()) {
    minimap_resolution_ = new ::SC2APIProtocol::Size2DI(*from.minimap_resolution_);
  } else {
    minimap_resolution_ = NULL;
  }
  width_ = from.width_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.SpatialCameraSetup)
}

void SpatialCameraSetup::SharedCtor() {
  ::memset(&resolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&resolution_)) + sizeof(width_));
}

SpatialCameraSetup::~SpatialCameraSetup() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.SpatialCameraSetup)
  SharedDtor();
}

void SpatialCameraSetup::SharedDtor() {
  if (this != internal_default_instance()) delete resolution_;
  if (this != internal_default_instance()) delete minimap_resolution_;
}

void SpatialCameraSetup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpatialCameraSetup::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpatialCameraSetup& SpatialCameraSetup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_SpatialCameraSetup.base);
  return *internal_default_instance();
}


void SpatialCameraSetup::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.SpatialCameraSetup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(resolution_ != NULL);
      resolution_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(minimap_resolution_ != NULL);
      minimap_resolution_->Clear();
    }
  }
  width_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpatialCameraSetup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.SpatialCameraSetup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.Size2DI resolution = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_resolution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.Size2DI minimap_resolution = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_minimap_resolution()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.SpatialCameraSetup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.SpatialCameraSetup)
  return false;
#undef DO_
}

void SpatialCameraSetup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.SpatialCameraSetup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float width = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->width(), output);
  }

  // optional .SC2APIProtocol.Size2DI resolution = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_resolution(), output);
  }

  // optional .SC2APIProtocol.Size2DI minimap_resolution = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_minimap_resolution(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.SpatialCameraSetup)
}

::google::protobuf::uint8* SpatialCameraSetup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.SpatialCameraSetup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float width = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->width(), target);
  }

  // optional .SC2APIProtocol.Size2DI resolution = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_resolution(), deterministic, target);
  }

  // optional .SC2APIProtocol.Size2DI minimap_resolution = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_minimap_resolution(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.SpatialCameraSetup)
  return target;
}

size_t SpatialCameraSetup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.SpatialCameraSetup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .SC2APIProtocol.Size2DI resolution = 2;
    if (has_resolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *resolution_);
    }

    // optional .SC2APIProtocol.Size2DI minimap_resolution = 3;
    if (has_minimap_resolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *minimap_resolution_);
    }

    // optional float width = 1;
    if (has_width()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpatialCameraSetup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.SpatialCameraSetup)
  GOOGLE_DCHECK_NE(&from, this);
  const SpatialCameraSetup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpatialCameraSetup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.SpatialCameraSetup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.SpatialCameraSetup)
    MergeFrom(*source);
  }
}

void SpatialCameraSetup::MergeFrom(const SpatialCameraSetup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.SpatialCameraSetup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_resolution()->::SC2APIProtocol::Size2DI::MergeFrom(from.resolution());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_minimap_resolution()->::SC2APIProtocol::Size2DI::MergeFrom(from.minimap_resolution());
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpatialCameraSetup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.SpatialCameraSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpatialCameraSetup::CopyFrom(const SpatialCameraSetup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.SpatialCameraSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpatialCameraSetup::IsInitialized() const {
  return true;
}

void SpatialCameraSetup::Swap(SpatialCameraSetup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpatialCameraSetup::InternalSwap(SpatialCameraSetup* other) {
  using std::swap;
  swap(resolution_, other->resolution_);
  swap(minimap_resolution_, other->minimap_resolution_);
  swap(width_, other->width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpatialCameraSetup::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void InterfaceOptions::InitAsDefaultInstance() {
  ::SC2APIProtocol::_InterfaceOptions_default_instance_._instance.get_mutable()->feature_layer_ = const_cast< ::SC2APIProtocol::SpatialCameraSetup*>(
      ::SC2APIProtocol::SpatialCameraSetup::internal_default_instance());
  ::SC2APIProtocol::_InterfaceOptions_default_instance_._instance.get_mutable()->render_ = const_cast< ::SC2APIProtocol::SpatialCameraSetup*>(
      ::SC2APIProtocol::SpatialCameraSetup::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InterfaceOptions::kRawFieldNumber;
const int InterfaceOptions::kScoreFieldNumber;
const int InterfaceOptions::kFeatureLayerFieldNumber;
const int InterfaceOptions::kRenderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InterfaceOptions::InterfaceOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_InterfaceOptions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.InterfaceOptions)
}
InterfaceOptions::InterfaceOptions(const InterfaceOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_feature_layer()) {
    feature_layer_ = new ::SC2APIProtocol::SpatialCameraSetup(*from.feature_layer_);
  } else {
    feature_layer_ = NULL;
  }
  if (from.has_render()) {
    render_ = new ::SC2APIProtocol::SpatialCameraSetup(*from.render_);
  } else {
    render_ = NULL;
  }
  ::memcpy(&raw_, &from.raw_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&raw_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.InterfaceOptions)
}

void InterfaceOptions::SharedCtor() {
  ::memset(&feature_layer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&feature_layer_)) + sizeof(score_));
}

InterfaceOptions::~InterfaceOptions() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.InterfaceOptions)
  SharedDtor();
}

void InterfaceOptions::SharedDtor() {
  if (this != internal_default_instance()) delete feature_layer_;
  if (this != internal_default_instance()) delete render_;
}

void InterfaceOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* InterfaceOptions::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InterfaceOptions& InterfaceOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_InterfaceOptions.base);
  return *internal_default_instance();
}


void InterfaceOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.InterfaceOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(feature_layer_ != NULL);
      feature_layer_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(render_ != NULL);
      render_->Clear();
    }
  }
  ::memset(&raw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&raw_)) + sizeof(score_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InterfaceOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.InterfaceOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool raw = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_raw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &raw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.SpatialCameraSetup feature_layer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_feature_layer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.SpatialCameraSetup render = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_render()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.InterfaceOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.InterfaceOptions)
  return false;
#undef DO_
}

void InterfaceOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.InterfaceOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool raw = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->raw(), output);
  }

  // optional bool score = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->score(), output);
  }

  // optional .SC2APIProtocol.SpatialCameraSetup feature_layer = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_feature_layer(), output);
  }

  // optional .SC2APIProtocol.SpatialCameraSetup render = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_render(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.InterfaceOptions)
}

::google::protobuf::uint8* InterfaceOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.InterfaceOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool raw = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->raw(), target);
  }

  // optional bool score = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->score(), target);
  }

  // optional .SC2APIProtocol.SpatialCameraSetup feature_layer = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_feature_layer(), deterministic, target);
  }

  // optional .SC2APIProtocol.SpatialCameraSetup render = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_render(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.InterfaceOptions)
  return target;
}

size_t InterfaceOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.InterfaceOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .SC2APIProtocol.SpatialCameraSetup feature_layer = 3;
    if (has_feature_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *feature_layer_);
    }

    // optional .SC2APIProtocol.SpatialCameraSetup render = 4;
    if (has_render()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *render_);
    }

    // optional bool raw = 1;
    if (has_raw()) {
      total_size += 1 + 1;
    }

    // optional bool score = 2;
    if (has_score()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InterfaceOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.InterfaceOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const InterfaceOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InterfaceOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.InterfaceOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.InterfaceOptions)
    MergeFrom(*source);
  }
}

void InterfaceOptions::MergeFrom(const InterfaceOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.InterfaceOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_feature_layer()->::SC2APIProtocol::SpatialCameraSetup::MergeFrom(from.feature_layer());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_render()->::SC2APIProtocol::SpatialCameraSetup::MergeFrom(from.render());
    }
    if (cached_has_bits & 0x00000004u) {
      raw_ = from.raw_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InterfaceOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.InterfaceOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterfaceOptions::CopyFrom(const InterfaceOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.InterfaceOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterfaceOptions::IsInitialized() const {
  return true;
}

void InterfaceOptions::Swap(InterfaceOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InterfaceOptions::InternalSwap(InterfaceOptions* other) {
  using std::swap;
  swap(feature_layer_, other->feature_layer_);
  swap(render_, other->render_);
  swap(raw_, other->raw_);
  swap(score_, other->score_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata InterfaceOptions::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfo::kPlayerIdFieldNumber;
const int PlayerInfo::kTypeFieldNumber;
const int PlayerInfo::kRaceRequestedFieldNumber;
const int PlayerInfo::kRaceActualFieldNumber;
const int PlayerInfo::kDifficultyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_PlayerInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&difficulty_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(difficulty_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.PlayerInfo)
}

void PlayerInfo::SharedCtor() {
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&race_actual_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(race_actual_));
  type_ = 1;
  difficulty_ = 1;
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.PlayerInfo)
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
}

void PlayerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerInfo& PlayerInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_PlayerInfo.base);
  return *internal_default_instance();
}


void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.PlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&race_actual_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(race_actual_));
    type_ = 1;
    difficulty_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.PlayerInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.PlayerType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::PlayerType_IsValid(value)) {
            set_type(static_cast< ::SC2APIProtocol::PlayerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.Race race_requested = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Race_IsValid(value)) {
            set_race_requested(static_cast< ::SC2APIProtocol::Race >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.Race race_actual = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Race_IsValid(value)) {
            set_race_actual(static_cast< ::SC2APIProtocol::Race >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.Difficulty difficulty = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Difficulty_IsValid(value)) {
            set_difficulty(static_cast< ::SC2APIProtocol::Difficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.PlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.PlayerInfo)
  return false;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.PlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional .SC2APIProtocol.PlayerType type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .SC2APIProtocol.Race race_requested = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->race_requested(), output);
  }

  // optional .SC2APIProtocol.Race race_actual = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->race_actual(), output);
  }

  // optional .SC2APIProtocol.Difficulty difficulty = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->difficulty(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.PlayerInfo)
}

::google::protobuf::uint8* PlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.PlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional .SC2APIProtocol.PlayerType type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .SC2APIProtocol.Race race_requested = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->race_requested(), target);
  }

  // optional .SC2APIProtocol.Race race_actual = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->race_actual(), target);
  }

  // optional .SC2APIProtocol.Difficulty difficulty = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->difficulty(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.PlayerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional .SC2APIProtocol.Race race_requested = 3;
    if (has_race_requested()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->race_requested());
    }

    // optional .SC2APIProtocol.Race race_actual = 4;
    if (has_race_actual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->race_actual());
    }

    // optional .SC2APIProtocol.PlayerType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .SC2APIProtocol.Difficulty difficulty = 5;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->difficulty());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.PlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.PlayerInfo)
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      race_requested_ = from.race_requested_;
    }
    if (cached_has_bits & 0x00000004u) {
      race_actual_ = from.race_actual_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      difficulty_ = from.difficulty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  swap(player_id_, other->player_id_);
  swap(race_requested_, other->race_requested_);
  swap(race_actual_, other->race_actual_);
  swap(type_, other->type_);
  swap(difficulty_, other->difficulty_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerCommon::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerCommon::kPlayerIdFieldNumber;
const int PlayerCommon::kMineralsFieldNumber;
const int PlayerCommon::kVespeneFieldNumber;
const int PlayerCommon::kFoodCapFieldNumber;
const int PlayerCommon::kFoodUsedFieldNumber;
const int PlayerCommon::kFoodArmyFieldNumber;
const int PlayerCommon::kFoodWorkersFieldNumber;
const int PlayerCommon::kIdleWorkerCountFieldNumber;
const int PlayerCommon::kArmyCountFieldNumber;
const int PlayerCommon::kWarpGateCountFieldNumber;
const int PlayerCommon::kLarvaCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerCommon::PlayerCommon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_PlayerCommon.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.PlayerCommon)
}
PlayerCommon::PlayerCommon(const PlayerCommon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&larva_count_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(larva_count_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.PlayerCommon)
}

void PlayerCommon::SharedCtor() {
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&larva_count_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(larva_count_));
}

PlayerCommon::~PlayerCommon() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.PlayerCommon)
  SharedDtor();
}

void PlayerCommon::SharedDtor() {
}

void PlayerCommon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayerCommon::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerCommon& PlayerCommon::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_PlayerCommon.base);
  return *internal_default_instance();
}


void PlayerCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.PlayerCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&idle_worker_count_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(idle_worker_count_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&army_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&larva_count_) -
        reinterpret_cast<char*>(&army_count_)) + sizeof(larva_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.PlayerCommon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 minerals = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_minerals();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minerals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 vespene = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_vespene();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vespene_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 food_cap = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_food_cap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &food_cap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 food_used = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_food_used();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &food_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 food_army = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_food_army();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &food_army_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 food_workers = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_food_workers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &food_workers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 idle_worker_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_idle_worker_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idle_worker_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 army_count = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_army_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &army_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 warp_gate_count = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_warp_gate_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warp_gate_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 larva_count = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_larva_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &larva_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.PlayerCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.PlayerCommon)
  return false;
#undef DO_
}

void PlayerCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.PlayerCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 minerals = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minerals(), output);
  }

  // optional uint32 vespene = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vespene(), output);
  }

  // optional uint32 food_cap = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->food_cap(), output);
  }

  // optional uint32 food_used = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->food_used(), output);
  }

  // optional uint32 food_army = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->food_army(), output);
  }

  // optional uint32 food_workers = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->food_workers(), output);
  }

  // optional uint32 idle_worker_count = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->idle_worker_count(), output);
  }

  // optional uint32 army_count = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->army_count(), output);
  }

  // optional uint32 warp_gate_count = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->warp_gate_count(), output);
  }

  // optional uint32 larva_count = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->larva_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.PlayerCommon)
}

::google::protobuf::uint8* PlayerCommon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.PlayerCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 minerals = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minerals(), target);
  }

  // optional uint32 vespene = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vespene(), target);
  }

  // optional uint32 food_cap = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->food_cap(), target);
  }

  // optional uint32 food_used = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->food_used(), target);
  }

  // optional uint32 food_army = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->food_army(), target);
  }

  // optional uint32 food_workers = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->food_workers(), target);
  }

  // optional uint32 idle_worker_count = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->idle_worker_count(), target);
  }

  // optional uint32 army_count = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->army_count(), target);
  }

  // optional uint32 warp_gate_count = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->warp_gate_count(), target);
  }

  // optional uint32 larva_count = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->larva_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.PlayerCommon)
  return target;
}

size_t PlayerCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.PlayerCommon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional uint32 minerals = 2;
    if (has_minerals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minerals());
    }

    // optional uint32 vespene = 3;
    if (has_vespene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vespene());
    }

    // optional uint32 food_cap = 4;
    if (has_food_cap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->food_cap());
    }

    // optional uint32 food_used = 5;
    if (has_food_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->food_used());
    }

    // optional uint32 food_army = 6;
    if (has_food_army()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->food_army());
    }

    // optional uint32 food_workers = 7;
    if (has_food_workers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->food_workers());
    }

    // optional uint32 idle_worker_count = 8;
    if (has_idle_worker_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idle_worker_count());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 army_count = 9;
    if (has_army_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->army_count());
    }

    // optional uint32 warp_gate_count = 10;
    if (has_warp_gate_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warp_gate_count());
    }

    // optional uint32 larva_count = 11;
    if (has_larva_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->larva_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerCommon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.PlayerCommon)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerCommon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerCommon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.PlayerCommon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.PlayerCommon)
    MergeFrom(*source);
  }
}

void PlayerCommon::MergeFrom(const PlayerCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.PlayerCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      minerals_ = from.minerals_;
    }
    if (cached_has_bits & 0x00000004u) {
      vespene_ = from.vespene_;
    }
    if (cached_has_bits & 0x00000008u) {
      food_cap_ = from.food_cap_;
    }
    if (cached_has_bits & 0x00000010u) {
      food_used_ = from.food_used_;
    }
    if (cached_has_bits & 0x00000020u) {
      food_army_ = from.food_army_;
    }
    if (cached_has_bits & 0x00000040u) {
      food_workers_ = from.food_workers_;
    }
    if (cached_has_bits & 0x00000080u) {
      idle_worker_count_ = from.idle_worker_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      army_count_ = from.army_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      warp_gate_count_ = from.warp_gate_count_;
    }
    if (cached_has_bits & 0x00000400u) {
      larva_count_ = from.larva_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerCommon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.PlayerCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCommon::CopyFrom(const PlayerCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.PlayerCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCommon::IsInitialized() const {
  return true;
}

void PlayerCommon::Swap(PlayerCommon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerCommon::InternalSwap(PlayerCommon* other) {
  using std::swap;
  swap(player_id_, other->player_id_);
  swap(minerals_, other->minerals_);
  swap(vespene_, other->vespene_);
  swap(food_cap_, other->food_cap_);
  swap(food_used_, other->food_used_);
  swap(food_army_, other->food_army_);
  swap(food_workers_, other->food_workers_);
  swap(idle_worker_count_, other->idle_worker_count_);
  swap(army_count_, other->army_count_);
  swap(warp_gate_count_, other->warp_gate_count_);
  swap(larva_count_, other->larva_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayerCommon::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Observation::InitAsDefaultInstance() {
  ::SC2APIProtocol::_Observation_default_instance_._instance.get_mutable()->player_common_ = const_cast< ::SC2APIProtocol::PlayerCommon*>(
      ::SC2APIProtocol::PlayerCommon::internal_default_instance());
  ::SC2APIProtocol::_Observation_default_instance_._instance.get_mutable()->score_ = const_cast< ::SC2APIProtocol::Score*>(
      ::SC2APIProtocol::Score::internal_default_instance());
  ::SC2APIProtocol::_Observation_default_instance_._instance.get_mutable()->raw_data_ = const_cast< ::SC2APIProtocol::ObservationRaw*>(
      ::SC2APIProtocol::ObservationRaw::internal_default_instance());
  ::SC2APIProtocol::_Observation_default_instance_._instance.get_mutable()->feature_layer_data_ = const_cast< ::SC2APIProtocol::ObservationFeatureLayer*>(
      ::SC2APIProtocol::ObservationFeatureLayer::internal_default_instance());
  ::SC2APIProtocol::_Observation_default_instance_._instance.get_mutable()->render_data_ = const_cast< ::SC2APIProtocol::ObservationRender*>(
      ::SC2APIProtocol::ObservationRender::internal_default_instance());
  ::SC2APIProtocol::_Observation_default_instance_._instance.get_mutable()->ui_data_ = const_cast< ::SC2APIProtocol::ObservationUI*>(
      ::SC2APIProtocol::ObservationUI::internal_default_instance());
}
void Observation::clear_abilities() {
  abilities_.Clear();
}
void Observation::clear_score() {
  if (score_ != NULL) score_->Clear();
  clear_has_score();
}
void Observation::clear_raw_data() {
  if (raw_data_ != NULL) raw_data_->Clear();
  clear_has_raw_data();
}
void Observation::clear_feature_layer_data() {
  if (feature_layer_data_ != NULL) feature_layer_data_->Clear();
  clear_has_feature_layer_data();
}
void Observation::clear_render_data() {
  if (render_data_ != NULL) render_data_->Clear();
  clear_has_render_data();
}
void Observation::clear_ui_data() {
  if (ui_data_ != NULL) ui_data_->Clear();
  clear_has_ui_data();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Observation::kGameLoopFieldNumber;
const int Observation::kPlayerCommonFieldNumber;
const int Observation::kAlertsFieldNumber;
const int Observation::kAbilitiesFieldNumber;
const int Observation::kScoreFieldNumber;
const int Observation::kRawDataFieldNumber;
const int Observation::kFeatureLayerDataFieldNumber;
const int Observation::kRenderDataFieldNumber;
const int Observation::kUiDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Observation::Observation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_Observation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.Observation)
}
Observation::Observation(const Observation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      abilities_(from.abilities_),
      alerts_(from.alerts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player_common()) {
    player_common_ = new ::SC2APIProtocol::PlayerCommon(*from.player_common_);
  } else {
    player_common_ = NULL;
  }
  if (from.has_score()) {
    score_ = new ::SC2APIProtocol::Score(*from.score_);
  } else {
    score_ = NULL;
  }
  if (from.has_raw_data()) {
    raw_data_ = new ::SC2APIProtocol::ObservationRaw(*from.raw_data_);
  } else {
    raw_data_ = NULL;
  }
  if (from.has_feature_layer_data()) {
    feature_layer_data_ = new ::SC2APIProtocol::ObservationFeatureLayer(*from.feature_layer_data_);
  } else {
    feature_layer_data_ = NULL;
  }
  if (from.has_render_data()) {
    render_data_ = new ::SC2APIProtocol::ObservationRender(*from.render_data_);
  } else {
    render_data_ = NULL;
  }
  if (from.has_ui_data()) {
    ui_data_ = new ::SC2APIProtocol::ObservationUI(*from.ui_data_);
  } else {
    ui_data_ = NULL;
  }
  game_loop_ = from.game_loop_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Observation)
}

void Observation::SharedCtor() {
  ::memset(&player_common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_loop_) -
      reinterpret_cast<char*>(&player_common_)) + sizeof(game_loop_));
}

Observation::~Observation() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Observation)
  SharedDtor();
}

void Observation::SharedDtor() {
  if (this != internal_default_instance()) delete player_common_;
  if (this != internal_default_instance()) delete score_;
  if (this != internal_default_instance()) delete raw_data_;
  if (this != internal_default_instance()) delete feature_layer_data_;
  if (this != internal_default_instance()) delete render_data_;
  if (this != internal_default_instance()) delete ui_data_;
}

void Observation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Observation::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Observation& Observation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_Observation.base);
  return *internal_default_instance();
}


void Observation::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Observation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  abilities_.Clear();
  alerts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(player_common_ != NULL);
      player_common_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(score_ != NULL);
      score_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(raw_data_ != NULL);
      raw_data_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(feature_layer_data_ != NULL);
      feature_layer_data_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(render_data_ != NULL);
      render_data_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(ui_data_ != NULL);
      ui_data_->Clear();
    }
  }
  game_loop_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Observation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.Observation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.PlayerCommon player_common = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player_common()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SC2APIProtocol.AvailableAbility abilities = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_abilities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.Score score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_score()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ObservationRaw raw_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_raw_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ObservationFeatureLayer feature_layer_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_feature_layer_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ObservationRender render_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_render_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ObservationUI ui_data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ui_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_loop = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_game_loop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_loop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SC2APIProtocol.Alert alerts = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Alert_IsValid(value)) {
            add_alerts(static_cast< ::SC2APIProtocol::Alert >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                10, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 10,
                 ::SC2APIProtocol::Alert_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_alerts())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.Observation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.Observation)
  return false;
#undef DO_
}

void Observation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.Observation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.PlayerCommon player_common = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_player_common(), output);
  }

  // repeated .SC2APIProtocol.AvailableAbility abilities = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->abilities_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->abilities(static_cast<int>(i)),
      output);
  }

  // optional .SC2APIProtocol.Score score = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_score(), output);
  }

  // optional .SC2APIProtocol.ObservationRaw raw_data = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_raw_data(), output);
  }

  // optional .SC2APIProtocol.ObservationFeatureLayer feature_layer_data = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_feature_layer_data(), output);
  }

  // optional .SC2APIProtocol.ObservationRender render_data = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_render_data(), output);
  }

  // optional .SC2APIProtocol.ObservationUI ui_data = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_ui_data(), output);
  }

  // optional uint32 game_loop = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->game_loop(), output);
  }

  // repeated .SC2APIProtocol.Alert alerts = 10;
  for (int i = 0, n = this->alerts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->alerts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.Observation)
}

::google::protobuf::uint8* Observation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Observation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.PlayerCommon player_common = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_player_common(), deterministic, target);
  }

  // repeated .SC2APIProtocol.AvailableAbility abilities = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->abilities_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->abilities(static_cast<int>(i)), deterministic, target);
  }

  // optional .SC2APIProtocol.Score score = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_score(), deterministic, target);
  }

  // optional .SC2APIProtocol.ObservationRaw raw_data = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_raw_data(), deterministic, target);
  }

  // optional .SC2APIProtocol.ObservationFeatureLayer feature_layer_data = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_feature_layer_data(), deterministic, target);
  }

  // optional .SC2APIProtocol.ObservationRender render_data = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_render_data(), deterministic, target);
  }

  // optional .SC2APIProtocol.ObservationUI ui_data = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_ui_data(), deterministic, target);
  }

  // optional uint32 game_loop = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->game_loop(), target);
  }

  // repeated .SC2APIProtocol.Alert alerts = 10;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    10, this->alerts_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Observation)
  return target;
}

size_t Observation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Observation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SC2APIProtocol.AvailableAbility abilities = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->abilities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->abilities(static_cast<int>(i)));
    }
  }

  // repeated .SC2APIProtocol.Alert alerts = 10;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->alerts_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->alerts(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional .SC2APIProtocol.PlayerCommon player_common = 1;
    if (has_player_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *player_common_);
    }

    // optional .SC2APIProtocol.Score score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *score_);
    }

    // optional .SC2APIProtocol.ObservationRaw raw_data = 5;
    if (has_raw_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *raw_data_);
    }

    // optional .SC2APIProtocol.ObservationFeatureLayer feature_layer_data = 6;
    if (has_feature_layer_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *feature_layer_data_);
    }

    // optional .SC2APIProtocol.ObservationRender render_data = 7;
    if (has_render_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *render_data_);
    }

    // optional .SC2APIProtocol.ObservationUI ui_data = 8;
    if (has_ui_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ui_data_);
    }

    // optional uint32 game_loop = 9;
    if (has_game_loop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_loop());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Observation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.Observation)
  GOOGLE_DCHECK_NE(&from, this);
  const Observation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Observation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.Observation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.Observation)
    MergeFrom(*source);
  }
}

void Observation::MergeFrom(const Observation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Observation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  abilities_.MergeFrom(from.abilities_);
  alerts_.MergeFrom(from.alerts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_player_common()->::SC2APIProtocol::PlayerCommon::MergeFrom(from.player_common());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_score()->::SC2APIProtocol::Score::MergeFrom(from.score());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_raw_data()->::SC2APIProtocol::ObservationRaw::MergeFrom(from.raw_data());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_feature_layer_data()->::SC2APIProtocol::ObservationFeatureLayer::MergeFrom(from.feature_layer_data());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_render_data()->::SC2APIProtocol::ObservationRender::MergeFrom(from.render_data());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_ui_data()->::SC2APIProtocol::ObservationUI::MergeFrom(from.ui_data());
    }
    if (cached_has_bits & 0x00000040u) {
      game_loop_ = from.game_loop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Observation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.Observation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Observation::CopyFrom(const Observation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Observation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Observation::IsInitialized() const {
  return true;
}

void Observation::Swap(Observation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Observation::InternalSwap(Observation* other) {
  using std::swap;
  CastToBase(&abilities_)->InternalSwap(CastToBase(&other->abilities_));
  alerts_.InternalSwap(&other->alerts_);
  swap(player_common_, other->player_common_);
  swap(score_, other->score_);
  swap(raw_data_, other->raw_data_);
  swap(feature_layer_data_, other->feature_layer_data_);
  swap(render_data_, other->render_data_);
  swap(ui_data_, other->ui_data_);
  swap(game_loop_, other->game_loop_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Observation::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Action::InitAsDefaultInstance() {
  ::SC2APIProtocol::_Action_default_instance_._instance.get_mutable()->action_raw_ = const_cast< ::SC2APIProtocol::ActionRaw*>(
      ::SC2APIProtocol::ActionRaw::internal_default_instance());
  ::SC2APIProtocol::_Action_default_instance_._instance.get_mutable()->action_feature_layer_ = const_cast< ::SC2APIProtocol::ActionSpatial*>(
      ::SC2APIProtocol::ActionSpatial::internal_default_instance());
  ::SC2APIProtocol::_Action_default_instance_._instance.get_mutable()->action_render_ = const_cast< ::SC2APIProtocol::ActionSpatial*>(
      ::SC2APIProtocol::ActionSpatial::internal_default_instance());
  ::SC2APIProtocol::_Action_default_instance_._instance.get_mutable()->action_ui_ = const_cast< ::SC2APIProtocol::ActionUI*>(
      ::SC2APIProtocol::ActionUI::internal_default_instance());
  ::SC2APIProtocol::_Action_default_instance_._instance.get_mutable()->action_chat_ = const_cast< ::SC2APIProtocol::ActionChat*>(
      ::SC2APIProtocol::ActionChat::internal_default_instance());
}
void Action::clear_action_raw() {
  if (action_raw_ != NULL) action_raw_->Clear();
  clear_has_action_raw();
}
void Action::clear_action_feature_layer() {
  if (action_feature_layer_ != NULL) action_feature_layer_->Clear();
  clear_has_action_feature_layer();
}
void Action::clear_action_render() {
  if (action_render_ != NULL) action_render_->Clear();
  clear_has_action_render();
}
void Action::clear_action_ui() {
  if (action_ui_ != NULL) action_ui_->Clear();
  clear_has_action_ui();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Action::kActionRawFieldNumber;
const int Action::kActionFeatureLayerFieldNumber;
const int Action::kActionRenderFieldNumber;
const int Action::kActionUiFieldNumber;
const int Action::kActionChatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Action::Action()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_Action.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.Action)
}
Action::Action(const Action& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_action_raw()) {
    action_raw_ = new ::SC2APIProtocol::ActionRaw(*from.action_raw_);
  } else {
    action_raw_ = NULL;
  }
  if (from.has_action_feature_layer()) {
    action_feature_layer_ = new ::SC2APIProtocol::ActionSpatial(*from.action_feature_layer_);
  } else {
    action_feature_layer_ = NULL;
  }
  if (from.has_action_render()) {
    action_render_ = new ::SC2APIProtocol::ActionSpatial(*from.action_render_);
  } else {
    action_render_ = NULL;
  }
  if (from.has_action_ui()) {
    action_ui_ = new ::SC2APIProtocol::ActionUI(*from.action_ui_);
  } else {
    action_ui_ = NULL;
  }
  if (from.has_action_chat()) {
    action_chat_ = new ::SC2APIProtocol::ActionChat(*from.action_chat_);
  } else {
    action_chat_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Action)
}

void Action::SharedCtor() {
  ::memset(&action_raw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_chat_) -
      reinterpret_cast<char*>(&action_raw_)) + sizeof(action_chat_));
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Action)
  SharedDtor();
}

void Action::SharedDtor() {
  if (this != internal_default_instance()) delete action_raw_;
  if (this != internal_default_instance()) delete action_feature_layer_;
  if (this != internal_default_instance()) delete action_render_;
  if (this != internal_default_instance()) delete action_ui_;
  if (this != internal_default_instance()) delete action_chat_;
}

void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Action::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Action& Action::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_Action.base);
  return *internal_default_instance();
}


void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(action_raw_ != NULL);
      action_raw_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(action_feature_layer_ != NULL);
      action_feature_layer_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(action_render_ != NULL);
      action_render_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(action_ui_ != NULL);
      action_ui_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(action_chat_ != NULL);
      action_chat_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.Action)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ActionRaw action_raw = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_action_raw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ActionSpatial action_feature_layer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_action_feature_layer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ActionSpatial action_render = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_action_render()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ActionUI action_ui = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_action_ui()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ActionChat action_chat = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_action_chat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.Action)
  return false;
#undef DO_
}

void Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.ActionRaw action_raw = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_action_raw(), output);
  }

  // optional .SC2APIProtocol.ActionSpatial action_feature_layer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_action_feature_layer(), output);
  }

  // optional .SC2APIProtocol.ActionSpatial action_render = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_action_render(), output);
  }

  // optional .SC2APIProtocol.ActionUI action_ui = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_action_ui(), output);
  }

  // optional .SC2APIProtocol.ActionChat action_chat = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_action_chat(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.Action)
}

::google::protobuf::uint8* Action::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.ActionRaw action_raw = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_action_raw(), deterministic, target);
  }

  // optional .SC2APIProtocol.ActionSpatial action_feature_layer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_action_feature_layer(), deterministic, target);
  }

  // optional .SC2APIProtocol.ActionSpatial action_render = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_action_render(), deterministic, target);
  }

  // optional .SC2APIProtocol.ActionUI action_ui = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_action_ui(), deterministic, target);
  }

  // optional .SC2APIProtocol.ActionChat action_chat = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_action_chat(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Action)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .SC2APIProtocol.ActionRaw action_raw = 1;
    if (has_action_raw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_raw_);
    }

    // optional .SC2APIProtocol.ActionSpatial action_feature_layer = 2;
    if (has_action_feature_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_feature_layer_);
    }

    // optional .SC2APIProtocol.ActionSpatial action_render = 3;
    if (has_action_render()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_render_);
    }

    // optional .SC2APIProtocol.ActionUI action_ui = 4;
    if (has_action_ui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_ui_);
    }

    // optional .SC2APIProtocol.ActionChat action_chat = 6;
    if (has_action_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_chat_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Action::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const Action* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Action>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.Action)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.Action)
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_action_raw()->::SC2APIProtocol::ActionRaw::MergeFrom(from.action_raw());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_action_feature_layer()->::SC2APIProtocol::ActionSpatial::MergeFrom(from.action_feature_layer());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_action_render()->::SC2APIProtocol::ActionSpatial::MergeFrom(from.action_render());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_action_ui()->::SC2APIProtocol::ActionUI::MergeFrom(from.action_ui());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_action_chat()->::SC2APIProtocol::ActionChat::MergeFrom(from.action_chat());
    }
  }
}

void Action::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::Swap(Action* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Action::InternalSwap(Action* other) {
  using std::swap;
  swap(action_raw_, other->action_raw_);
  swap(action_feature_layer_, other->action_feature_layer_);
  swap(action_render_, other->action_render_);
  swap(action_ui_, other->action_ui_);
  swap(action_chat_, other->action_chat_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Action::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionChat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionChat::kChannelFieldNumber;
const int ActionChat::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionChat::ActionChat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ActionChat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionChat)
}
ActionChat::ActionChat(const ActionChat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionChat)
}

void ActionChat::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_ = 1;
}

ActionChat::~ActionChat() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionChat)
  SharedDtor();
}

void ActionChat::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ActionChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionChat::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionChat& ActionChat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ActionChat.base);
  return *internal_default_instance();
}


void ActionChat::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
    channel_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionChat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ActionChat.Channel channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::ActionChat_Channel_IsValid(value)) {
            set_channel(static_cast< ::SC2APIProtocol::ActionChat_Channel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ActionChat.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionChat)
  return false;
#undef DO_
}

void ActionChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.ActionChat.Channel channel = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->channel(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ActionChat.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionChat)
}

::google::protobuf::uint8* ActionChat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.ActionChat.Channel channel = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->channel(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ActionChat.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionChat)
  return target;
}

size_t ActionChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionChat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional .SC2APIProtocol.ActionChat.Channel channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionChat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionChat)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionChat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionChat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionChat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionChat)
    MergeFrom(*source);
  }
}

void ActionChat::MergeFrom(const ActionChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      channel_ = from.channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActionChat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionChat::CopyFrom(const ActionChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionChat::IsInitialized() const {
  return true;
}

void ActionChat::Swap(ActionChat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionChat::InternalSwap(ActionChat* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_, other->channel_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionChat::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionError::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionError::kUnitTagFieldNumber;
const int ActionError::kAbilityIdFieldNumber;
const int ActionError::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionError::ActionError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ActionError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionError)
}
ActionError::ActionError(const ActionError& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&unit_tag_, &from.unit_tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&unit_tag_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionError)
}

void ActionError::SharedCtor() {
  ::memset(&unit_tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ability_id_) -
      reinterpret_cast<char*>(&unit_tag_)) + sizeof(ability_id_));
  result_ = 1;
}

ActionError::~ActionError() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionError)
  SharedDtor();
}

void ActionError::SharedDtor() {
}

void ActionError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionError::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionError& ActionError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ActionError.base);
  return *internal_default_instance();
}


void ActionError::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&unit_tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ability_id_) -
        reinterpret_cast<char*>(&unit_tag_)) + sizeof(ability_id_));
    result_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 unit_tag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_unit_tag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unit_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ability_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ability_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ActionResult result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::ActionResult_IsValid(value)) {
            set_result(static_cast< ::SC2APIProtocol::ActionResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionError)
  return false;
#undef DO_
}

void ActionError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 unit_tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->unit_tag(), output);
  }

  // optional uint64 ability_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ability_id(), output);
  }

  // optional .SC2APIProtocol.ActionResult result = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionError)
}

::google::protobuf::uint8* ActionError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 unit_tag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->unit_tag(), target);
  }

  // optional uint64 ability_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ability_id(), target);
  }

  // optional .SC2APIProtocol.ActionResult result = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionError)
  return target;
}

size_t ActionError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionError)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 unit_tag = 1;
    if (has_unit_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unit_tag());
    }

    // optional uint64 ability_id = 2;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ability_id());
    }

    // optional .SC2APIProtocol.ActionResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionError)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionError* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionError)
    MergeFrom(*source);
  }
}

void ActionError::MergeFrom(const ActionError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      unit_tag_ = from.unit_tag_;
    }
    if (cached_has_bits & 0x00000002u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActionError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionError::CopyFrom(const ActionError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionError::IsInitialized() const {
  return true;
}

void ActionError::Swap(ActionError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionError::InternalSwap(ActionError* other) {
  using std::swap;
  swap(unit_tag_, other->unit_tag_);
  swap(ability_id_, other->ability_id_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionError::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ObserverAction::InitAsDefaultInstance() {
  ::SC2APIProtocol::_ObserverAction_default_instance_.player_perspective_ = const_cast< ::SC2APIProtocol::ActionObserverPlayerPerspective*>(
      ::SC2APIProtocol::ActionObserverPlayerPerspective::internal_default_instance());
  ::SC2APIProtocol::_ObserverAction_default_instance_.camera_move_ = const_cast< ::SC2APIProtocol::ActionObserverCameraMove*>(
      ::SC2APIProtocol::ActionObserverCameraMove::internal_default_instance());
  ::SC2APIProtocol::_ObserverAction_default_instance_.camera_follow_player_ = const_cast< ::SC2APIProtocol::ActionObserverCameraFollowPlayer*>(
      ::SC2APIProtocol::ActionObserverCameraFollowPlayer::internal_default_instance());
  ::SC2APIProtocol::_ObserverAction_default_instance_.camera_follow_units_ = const_cast< ::SC2APIProtocol::ActionObserverCameraFollowUnits*>(
      ::SC2APIProtocol::ActionObserverCameraFollowUnits::internal_default_instance());
}
void ObserverAction::set_allocated_player_perspective(::SC2APIProtocol::ActionObserverPlayerPerspective* player_perspective) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (player_perspective) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      player_perspective = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_perspective, submessage_arena);
    }
    set_has_player_perspective();
    action_.player_perspective_ = player_perspective;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObserverAction.player_perspective)
}
void ObserverAction::set_allocated_camera_move(::SC2APIProtocol::ActionObserverCameraMove* camera_move) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (camera_move) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      camera_move = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, camera_move, submessage_arena);
    }
    set_has_camera_move();
    action_.camera_move_ = camera_move;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObserverAction.camera_move)
}
void ObserverAction::set_allocated_camera_follow_player(::SC2APIProtocol::ActionObserverCameraFollowPlayer* camera_follow_player) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (camera_follow_player) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      camera_follow_player = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, camera_follow_player, submessage_arena);
    }
    set_has_camera_follow_player();
    action_.camera_follow_player_ = camera_follow_player;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObserverAction.camera_follow_player)
}
void ObserverAction::set_allocated_camera_follow_units(::SC2APIProtocol::ActionObserverCameraFollowUnits* camera_follow_units) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (camera_follow_units) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      camera_follow_units = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, camera_follow_units, submessage_arena);
    }
    set_has_camera_follow_units();
    action_.camera_follow_units_ = camera_follow_units;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObserverAction.camera_follow_units)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObserverAction::kPlayerPerspectiveFieldNumber;
const int ObserverAction::kCameraMoveFieldNumber;
const int ObserverAction::kCameraFollowPlayerFieldNumber;
const int ObserverAction::kCameraFollowUnitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObserverAction::ObserverAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ObserverAction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ObserverAction)
}
ObserverAction::ObserverAction(const ObserverAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_action();
  switch (from.action_case()) {
    case kPlayerPerspective: {
      mutable_player_perspective()->::SC2APIProtocol::ActionObserverPlayerPerspective::MergeFrom(from.player_perspective());
      break;
    }
    case kCameraMove: {
      mutable_camera_move()->::SC2APIProtocol::ActionObserverCameraMove::MergeFrom(from.camera_move());
      break;
    }
    case kCameraFollowPlayer: {
      mutable_camera_follow_player()->::SC2APIProtocol::ActionObserverCameraFollowPlayer::MergeFrom(from.camera_follow_player());
      break;
    }
    case kCameraFollowUnits: {
      mutable_camera_follow_units()->::SC2APIProtocol::ActionObserverCameraFollowUnits::MergeFrom(from.camera_follow_units());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ObserverAction)
}

void ObserverAction::SharedCtor() {
  clear_has_action();
}

ObserverAction::~ObserverAction() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ObserverAction)
  SharedDtor();
}

void ObserverAction::SharedDtor() {
  if (has_action()) {
    clear_action();
  }
}

void ObserverAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ObserverAction::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObserverAction& ObserverAction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ObserverAction.base);
  return *internal_default_instance();
}


void ObserverAction::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.ObserverAction)
  switch (action_case()) {
    case kPlayerPerspective: {
      delete action_.player_perspective_;
      break;
    }
    case kCameraMove: {
      delete action_.camera_move_;
      break;
    }
    case kCameraFollowPlayer: {
      delete action_.camera_follow_player_;
      break;
    }
    case kCameraFollowUnits: {
      delete action_.camera_follow_units_;
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void ObserverAction::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ObserverAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_action();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObserverAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ObserverAction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ActionObserverPlayerPerspective player_perspective = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_player_perspective()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ActionObserverCameraMove camera_move = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_move()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ActionObserverCameraFollowPlayer camera_follow_player = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_follow_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.ActionObserverCameraFollowUnits camera_follow_units = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_follow_units()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ObserverAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ObserverAction)
  return false;
#undef DO_
}

void ObserverAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ObserverAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (action_case()) {
    case kPlayerPerspective:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_player_perspective(), output);
      break;
    case kCameraMove:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_camera_move(), output);
      break;
    case kCameraFollowPlayer:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_camera_follow_player(), output);
      break;
    case kCameraFollowUnits:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, this->_internal_camera_follow_units(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ObserverAction)
}

::google::protobuf::uint8* ObserverAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ObserverAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (action_case()) {
    case kPlayerPerspective:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, this->_internal_player_perspective(), deterministic, target);
      break;
    case kCameraMove:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_camera_move(), deterministic, target);
      break;
    case kCameraFollowPlayer:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_camera_follow_player(), deterministic, target);
      break;
    case kCameraFollowUnits:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, this->_internal_camera_follow_units(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ObserverAction)
  return target;
}

size_t ObserverAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ObserverAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (action_case()) {
    // optional .SC2APIProtocol.ActionObserverPlayerPerspective player_perspective = 1;
    case kPlayerPerspective: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.player_perspective_);
      break;
    }
    // optional .SC2APIProtocol.ActionObserverCameraMove camera_move = 2;
    case kCameraMove: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.camera_move_);
      break;
    }
    // optional .SC2APIProtocol.ActionObserverCameraFollowPlayer camera_follow_player = 3;
    case kCameraFollowPlayer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.camera_follow_player_);
      break;
    }
    // optional .SC2APIProtocol.ActionObserverCameraFollowUnits camera_follow_units = 4;
    case kCameraFollowUnits: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *action_.camera_follow_units_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObserverAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ObserverAction)
  GOOGLE_DCHECK_NE(&from, this);
  const ObserverAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObserverAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ObserverAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ObserverAction)
    MergeFrom(*source);
  }
}

void ObserverAction::MergeFrom(const ObserverAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ObserverAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.action_case()) {
    case kPlayerPerspective: {
      mutable_player_perspective()->::SC2APIProtocol::ActionObserverPlayerPerspective::MergeFrom(from.player_perspective());
      break;
    }
    case kCameraMove: {
      mutable_camera_move()->::SC2APIProtocol::ActionObserverCameraMove::MergeFrom(from.camera_move());
      break;
    }
    case kCameraFollowPlayer: {
      mutable_camera_follow_player()->::SC2APIProtocol::ActionObserverCameraFollowPlayer::MergeFrom(from.camera_follow_player());
      break;
    }
    case kCameraFollowUnits: {
      mutable_camera_follow_units()->::SC2APIProtocol::ActionObserverCameraFollowUnits::MergeFrom(from.camera_follow_units());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void ObserverAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ObserverAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObserverAction::CopyFrom(const ObserverAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ObserverAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObserverAction::IsInitialized() const {
  return true;
}

void ObserverAction::Swap(ObserverAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObserverAction::InternalSwap(ObserverAction* other) {
  using std::swap;
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ObserverAction::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionObserverPlayerPerspective::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionObserverPlayerPerspective::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionObserverPlayerPerspective::ActionObserverPlayerPerspective()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ActionObserverPlayerPerspective.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionObserverPlayerPerspective)
}
ActionObserverPlayerPerspective::ActionObserverPlayerPerspective(const ActionObserverPlayerPerspective& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionObserverPlayerPerspective)
}

void ActionObserverPlayerPerspective::SharedCtor() {
  player_id_ = 0u;
}

ActionObserverPlayerPerspective::~ActionObserverPlayerPerspective() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionObserverPlayerPerspective)
  SharedDtor();
}

void ActionObserverPlayerPerspective::SharedDtor() {
}

void ActionObserverPlayerPerspective::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionObserverPlayerPerspective::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionObserverPlayerPerspective& ActionObserverPlayerPerspective::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ActionObserverPlayerPerspective.base);
  return *internal_default_instance();
}


void ActionObserverPlayerPerspective::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionObserverPlayerPerspective)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionObserverPlayerPerspective::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionObserverPlayerPerspective)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionObserverPlayerPerspective)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionObserverPlayerPerspective)
  return false;
#undef DO_
}

void ActionObserverPlayerPerspective::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionObserverPlayerPerspective)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionObserverPlayerPerspective)
}

::google::protobuf::uint8* ActionObserverPlayerPerspective::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionObserverPlayerPerspective)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionObserverPlayerPerspective)
  return target;
}

size_t ActionObserverPlayerPerspective::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionObserverPlayerPerspective)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionObserverPlayerPerspective::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionObserverPlayerPerspective)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionObserverPlayerPerspective* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionObserverPlayerPerspective>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionObserverPlayerPerspective)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionObserverPlayerPerspective)
    MergeFrom(*source);
  }
}

void ActionObserverPlayerPerspective::MergeFrom(const ActionObserverPlayerPerspective& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionObserverPlayerPerspective)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    set_player_id(from.player_id());
  }
}

void ActionObserverPlayerPerspective::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionObserverPlayerPerspective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionObserverPlayerPerspective::CopyFrom(const ActionObserverPlayerPerspective& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionObserverPlayerPerspective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionObserverPlayerPerspective::IsInitialized() const {
  return true;
}

void ActionObserverPlayerPerspective::Swap(ActionObserverPlayerPerspective* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionObserverPlayerPerspective::InternalSwap(ActionObserverPlayerPerspective* other) {
  using std::swap;
  swap(player_id_, other->player_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionObserverPlayerPerspective::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionObserverCameraMove::InitAsDefaultInstance() {
  ::SC2APIProtocol::_ActionObserverCameraMove_default_instance_._instance.get_mutable()->world_pos_ = const_cast< ::SC2APIProtocol::Point2D*>(
      ::SC2APIProtocol::Point2D::internal_default_instance());
}
void ActionObserverCameraMove::clear_world_pos() {
  if (world_pos_ != NULL) world_pos_->Clear();
  clear_has_world_pos();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionObserverCameraMove::kWorldPosFieldNumber;
const int ActionObserverCameraMove::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionObserverCameraMove::ActionObserverCameraMove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ActionObserverCameraMove.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionObserverCameraMove)
}
ActionObserverCameraMove::ActionObserverCameraMove(const ActionObserverCameraMove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_world_pos()) {
    world_pos_ = new ::SC2APIProtocol::Point2D(*from.world_pos_);
  } else {
    world_pos_ = NULL;
  }
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionObserverCameraMove)
}

void ActionObserverCameraMove::SharedCtor() {
  ::memset(&world_pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&world_pos_)) + sizeof(distance_));
}

ActionObserverCameraMove::~ActionObserverCameraMove() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionObserverCameraMove)
  SharedDtor();
}

void ActionObserverCameraMove::SharedDtor() {
  if (this != internal_default_instance()) delete world_pos_;
}

void ActionObserverCameraMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionObserverCameraMove::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionObserverCameraMove& ActionObserverCameraMove::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ActionObserverCameraMove.base);
  return *internal_default_instance();
}


void ActionObserverCameraMove::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionObserverCameraMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(world_pos_ != NULL);
    world_pos_->Clear();
  }
  distance_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionObserverCameraMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionObserverCameraMove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.Point2D world_pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_world_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionObserverCameraMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionObserverCameraMove)
  return false;
#undef DO_
}

void ActionObserverCameraMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionObserverCameraMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.Point2D world_pos = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_world_pos(), output);
  }

  // optional float distance = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionObserverCameraMove)
}

::google::protobuf::uint8* ActionObserverCameraMove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionObserverCameraMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SC2APIProtocol.Point2D world_pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_world_pos(), deterministic, target);
  }

  // optional float distance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionObserverCameraMove)
  return target;
}

size_t ActionObserverCameraMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionObserverCameraMove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .SC2APIProtocol.Point2D world_pos = 1;
    if (has_world_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *world_pos_);
    }

    // optional float distance = 2;
    if (has_distance()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionObserverCameraMove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionObserverCameraMove)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionObserverCameraMove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionObserverCameraMove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionObserverCameraMove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionObserverCameraMove)
    MergeFrom(*source);
  }
}

void ActionObserverCameraMove::MergeFrom(const ActionObserverCameraMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionObserverCameraMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_world_pos()->::SC2APIProtocol::Point2D::MergeFrom(from.world_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      distance_ = from.distance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActionObserverCameraMove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionObserverCameraMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionObserverCameraMove::CopyFrom(const ActionObserverCameraMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionObserverCameraMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionObserverCameraMove::IsInitialized() const {
  return true;
}

void ActionObserverCameraMove::Swap(ActionObserverCameraMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionObserverCameraMove::InternalSwap(ActionObserverCameraMove* other) {
  using std::swap;
  swap(world_pos_, other->world_pos_);
  swap(distance_, other->distance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionObserverCameraMove::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionObserverCameraFollowPlayer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionObserverCameraFollowPlayer::kPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionObserverCameraFollowPlayer::ActionObserverCameraFollowPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ActionObserverCameraFollowPlayer.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionObserverCameraFollowPlayer)
}
ActionObserverCameraFollowPlayer::ActionObserverCameraFollowPlayer(const ActionObserverCameraFollowPlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionObserverCameraFollowPlayer)
}

void ActionObserverCameraFollowPlayer::SharedCtor() {
  player_id_ = 0u;
}

ActionObserverCameraFollowPlayer::~ActionObserverCameraFollowPlayer() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionObserverCameraFollowPlayer)
  SharedDtor();
}

void ActionObserverCameraFollowPlayer::SharedDtor() {
}

void ActionObserverCameraFollowPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionObserverCameraFollowPlayer::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionObserverCameraFollowPlayer& ActionObserverCameraFollowPlayer::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ActionObserverCameraFollowPlayer.base);
  return *internal_default_instance();
}


void ActionObserverCameraFollowPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionObserverCameraFollowPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionObserverCameraFollowPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionObserverCameraFollowPlayer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionObserverCameraFollowPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionObserverCameraFollowPlayer)
  return false;
#undef DO_
}

void ActionObserverCameraFollowPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionObserverCameraFollowPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionObserverCameraFollowPlayer)
}

::google::protobuf::uint8* ActionObserverCameraFollowPlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionObserverCameraFollowPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionObserverCameraFollowPlayer)
  return target;
}

size_t ActionObserverCameraFollowPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionObserverCameraFollowPlayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionObserverCameraFollowPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionObserverCameraFollowPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionObserverCameraFollowPlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionObserverCameraFollowPlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionObserverCameraFollowPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionObserverCameraFollowPlayer)
    MergeFrom(*source);
  }
}

void ActionObserverCameraFollowPlayer::MergeFrom(const ActionObserverCameraFollowPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionObserverCameraFollowPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    set_player_id(from.player_id());
  }
}

void ActionObserverCameraFollowPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionObserverCameraFollowPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionObserverCameraFollowPlayer::CopyFrom(const ActionObserverCameraFollowPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionObserverCameraFollowPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionObserverCameraFollowPlayer::IsInitialized() const {
  return true;
}

void ActionObserverCameraFollowPlayer::Swap(ActionObserverCameraFollowPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionObserverCameraFollowPlayer::InternalSwap(ActionObserverCameraFollowPlayer* other) {
  using std::swap;
  swap(player_id_, other->player_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionObserverCameraFollowPlayer::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionObserverCameraFollowUnits::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionObserverCameraFollowUnits::kUnitTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionObserverCameraFollowUnits::ActionObserverCameraFollowUnits()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ActionObserverCameraFollowUnits.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionObserverCameraFollowUnits)
}
ActionObserverCameraFollowUnits::ActionObserverCameraFollowUnits(const ActionObserverCameraFollowUnits& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      unit_tags_(from.unit_tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionObserverCameraFollowUnits)
}

void ActionObserverCameraFollowUnits::SharedCtor() {
}

ActionObserverCameraFollowUnits::~ActionObserverCameraFollowUnits() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionObserverCameraFollowUnits)
  SharedDtor();
}

void ActionObserverCameraFollowUnits::SharedDtor() {
}

void ActionObserverCameraFollowUnits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionObserverCameraFollowUnits::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionObserverCameraFollowUnits& ActionObserverCameraFollowUnits::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_ActionObserverCameraFollowUnits.base);
  return *internal_default_instance();
}


void ActionObserverCameraFollowUnits::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionObserverCameraFollowUnits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_tags_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionObserverCameraFollowUnits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionObserverCameraFollowUnits)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 unit_tags = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_unit_tags())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_unit_tags())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionObserverCameraFollowUnits)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionObserverCameraFollowUnits)
  return false;
#undef DO_
}

void ActionObserverCameraFollowUnits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionObserverCameraFollowUnits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 unit_tags = 1;
  for (int i = 0, n = this->unit_tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->unit_tags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionObserverCameraFollowUnits)
}

::google::protobuf::uint8* ActionObserverCameraFollowUnits::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionObserverCameraFollowUnits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 unit_tags = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->unit_tags_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionObserverCameraFollowUnits)
  return target;
}

size_t ActionObserverCameraFollowUnits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionObserverCameraFollowUnits)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint64 unit_tags = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->unit_tags_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->unit_tags_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionObserverCameraFollowUnits::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionObserverCameraFollowUnits)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionObserverCameraFollowUnits* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionObserverCameraFollowUnits>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionObserverCameraFollowUnits)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionObserverCameraFollowUnits)
    MergeFrom(*source);
  }
}

void ActionObserverCameraFollowUnits::MergeFrom(const ActionObserverCameraFollowUnits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionObserverCameraFollowUnits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unit_tags_.MergeFrom(from.unit_tags_);
}

void ActionObserverCameraFollowUnits::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionObserverCameraFollowUnits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionObserverCameraFollowUnits::CopyFrom(const ActionObserverCameraFollowUnits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionObserverCameraFollowUnits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionObserverCameraFollowUnits::IsInitialized() const {
  return true;
}

void ActionObserverCameraFollowUnits::Swap(ActionObserverCameraFollowUnits* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionObserverCameraFollowUnits::InternalSwap(ActionObserverCameraFollowUnits* other) {
  using std::swap;
  unit_tags_.InternalSwap(&other->unit_tags_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionObserverCameraFollowUnits::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerResult::kPlayerIdFieldNumber;
const int PlayerResult::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerResult::PlayerResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_PlayerResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.PlayerResult)
}
PlayerResult::PlayerResult(const PlayerResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.PlayerResult)
}

void PlayerResult::SharedCtor() {
  player_id_ = 0u;
  result_ = 1;
}

PlayerResult::~PlayerResult() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.PlayerResult)
  SharedDtor();
}

void PlayerResult::SharedDtor() {
}

void PlayerResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayerResult::descriptor() {
  ::protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerResult& PlayerResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_s2clientprotocol_2fsc2api_2eproto::scc_info_PlayerResult.base);
  return *internal_default_instance();
}


void PlayerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.PlayerResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    player_id_ = 0u;
    result_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PlayerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.PlayerResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SC2APIProtocol.Result result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Result_IsValid(value)) {
            set_result(static_cast< ::SC2APIProtocol::Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.PlayerResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.PlayerResult)
  return false;
#undef DO_
}

void PlayerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.PlayerResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional .SC2APIProtocol.Result result = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.PlayerResult)
}

::google::protobuf::uint8* PlayerResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.PlayerResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional .SC2APIProtocol.Result result = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.PlayerResult)
  return target;
}

size_t PlayerResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.PlayerResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional .SC2APIProtocol.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.PlayerResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.PlayerResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.PlayerResult)
    MergeFrom(*source);
  }
}

void PlayerResult::MergeFrom(const PlayerResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.PlayerResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.PlayerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerResult::CopyFrom(const PlayerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.PlayerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerResult::IsInitialized() const {
  return true;
}

void PlayerResult::Swap(PlayerResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerResult::InternalSwap(PlayerResult* other) {
  using std::swap;
  swap(player_id_, other->player_id_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayerResult::GetMetadata() const {
  protobuf_s2clientprotocol_2fsc2api_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_s2clientprotocol_2fsc2api_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SC2APIProtocol
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::Request* Arena::CreateMaybeMessage< ::SC2APIProtocol::Request >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::Response* Arena::CreateMaybeMessage< ::SC2APIProtocol::Response >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::RequestCreateGame* Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestCreateGame >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::RequestCreateGame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::LocalMap* Arena::CreateMaybeMessage< ::SC2APIProtocol::LocalMap >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::LocalMap >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ResponseCreateGame* Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseCreateGame >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ResponseCreateGame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::RequestJoinGame* Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestJoinGame >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::RequestJoinGame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::PortSet* Arena::CreateMaybeMessage< ::SC2APIProtocol::PortSet >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::PortSet >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ResponseJoinGame* Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseJoinGame >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ResponseJoinGame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::RequestRestartGame* Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestRestartGame >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::RequestRestartGame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ResponseRestartGame* Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseRestartGame >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ResponseRestartGame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::RequestStartReplay* Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestStartReplay >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::RequestStartReplay >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ResponseStartReplay* Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseStartReplay >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ResponseStartReplay >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::RequestLeaveGame* Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestLeaveGame >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::RequestLeaveGame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ResponseLeaveGame* Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseLeaveGame >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ResponseLeaveGame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::RequestQuickSave* Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestQuickSave >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::RequestQuickSave >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ResponseQuickSave* Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseQuickSave >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ResponseQuickSave >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::RequestQuickLoad* Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestQuickLoad >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::RequestQuickLoad >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ResponseQuickLoad* Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseQuickLoad >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ResponseQuickLoad >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::RequestQuit* Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestQuit >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::RequestQuit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ResponseQuit* Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseQuit >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ResponseQuit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::RequestGameInfo* Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestGameInfo >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::RequestGameInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ResponseGameInfo* Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseGameInfo >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ResponseGameInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::RequestObservation* Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestObservation >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::RequestObservation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ResponseObservation* Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseObservation >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ResponseObservation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ChatReceived* Arena::CreateMaybeMessage< ::SC2APIProtocol::ChatReceived >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ChatReceived >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::RequestAction* Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestAction >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::RequestAction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ResponseAction* Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseAction >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ResponseAction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::RequestObserverAction* Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestObserverAction >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::RequestObserverAction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ResponseObserverAction* Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseObserverAction >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ResponseObserverAction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::RequestStep* Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestStep >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::RequestStep >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ResponseStep* Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseStep >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ResponseStep >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::RequestData* Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestData >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::RequestData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ResponseData* Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseData >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ResponseData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::RequestSaveReplay* Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestSaveReplay >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::RequestSaveReplay >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ResponseSaveReplay* Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseSaveReplay >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ResponseSaveReplay >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::RequestReplayInfo* Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestReplayInfo >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::RequestReplayInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::PlayerInfoExtra* Arena::CreateMaybeMessage< ::SC2APIProtocol::PlayerInfoExtra >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::PlayerInfoExtra >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ResponseReplayInfo* Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseReplayInfo >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ResponseReplayInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::RequestAvailableMaps* Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestAvailableMaps >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::RequestAvailableMaps >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ResponseAvailableMaps* Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseAvailableMaps >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ResponseAvailableMaps >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::RequestSaveMap* Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestSaveMap >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::RequestSaveMap >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ResponseSaveMap* Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseSaveMap >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ResponseSaveMap >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::RequestPing* Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestPing >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::RequestPing >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ResponsePing* Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponsePing >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ResponsePing >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::RequestDebug* Arena::CreateMaybeMessage< ::SC2APIProtocol::RequestDebug >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::RequestDebug >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ResponseDebug* Arena::CreateMaybeMessage< ::SC2APIProtocol::ResponseDebug >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ResponseDebug >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::PlayerSetup* Arena::CreateMaybeMessage< ::SC2APIProtocol::PlayerSetup >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::PlayerSetup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::SpatialCameraSetup* Arena::CreateMaybeMessage< ::SC2APIProtocol::SpatialCameraSetup >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::SpatialCameraSetup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::InterfaceOptions* Arena::CreateMaybeMessage< ::SC2APIProtocol::InterfaceOptions >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::InterfaceOptions >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::PlayerInfo* Arena::CreateMaybeMessage< ::SC2APIProtocol::PlayerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::PlayerInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::PlayerCommon* Arena::CreateMaybeMessage< ::SC2APIProtocol::PlayerCommon >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::PlayerCommon >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::Observation* Arena::CreateMaybeMessage< ::SC2APIProtocol::Observation >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::Observation >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::Action* Arena::CreateMaybeMessage< ::SC2APIProtocol::Action >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::Action >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ActionChat* Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionChat >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ActionChat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ActionError* Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionError >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ActionError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ObserverAction* Arena::CreateMaybeMessage< ::SC2APIProtocol::ObserverAction >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ObserverAction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ActionObserverPlayerPerspective* Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionObserverPlayerPerspective >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ActionObserverPlayerPerspective >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ActionObserverCameraMove* Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionObserverCameraMove >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ActionObserverCameraMove >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ActionObserverCameraFollowPlayer* Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionObserverCameraFollowPlayer >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ActionObserverCameraFollowPlayer >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::ActionObserverCameraFollowUnits* Arena::CreateMaybeMessage< ::SC2APIProtocol::ActionObserverCameraFollowUnits >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::ActionObserverCameraFollowUnits >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SC2APIProtocol::PlayerResult* Arena::CreateMaybeMessage< ::SC2APIProtocol::PlayerResult >(Arena* arena) {
  return Arena::CreateInternal< ::SC2APIProtocol::PlayerResult >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
